{"file_contents":{"design_guidelines.md":{"content":"# BondPos POS System - Design Guidelines\n\n## Design Approach\n**Design System Approach**: Utility-focused dashboard application inspired by modern POS systems (Square, Toast, Lightspeed) with Material Design principles. This is an operational tool requiring efficiency, clarity, and consistency over visual flair.\n\n---\n\n## Core Design Principles\n1. **Speed & Efficiency**: Every interaction optimized for fast order processing\n2. **Information Clarity**: Dense data presented hierarchically and scannable\n3. **Touch-Friendly**: Large tap targets (minimum 44px) for tablet use\n4. **Operational Reliability**: Consistent patterns, minimal cognitive load\n\n---\n\n## Color Palette\n\n**Light Mode (Primary)**\n- **Primary Brand**: 18 95% 60% (vibrant orange - CTA buttons, active states)\n- **Primary Dark**: 18 85% 45% (hover states, emphasis)\n- **Neutral Background**: 0 0% 98% (main app background)\n- **Card Background**: 0 0% 100% (product cards, panels)\n- **Border**: 0 0% 90% (dividers, card edges)\n- **Text Primary**: 0 0% 15%\n- **Text Secondary**: 0 0% 45%\n- **Success**: 142 71% 45% (completed orders)\n- **Warning**: 45 93% 57% (pending items)\n- **Error**: 0 84% 60% (cancellations)\n\n**Dark Mode** (for extended evening shifts)\n- Background: 0 0% 10%\n- Card: 0 0% 15%\n- Border: 0 0% 25%\n\n---\n\n## Typography\n\n**Font Families**\n- **Primary**: Inter (Google Fonts) - UI elements, body text\n- **Numeric**: Roboto Mono - prices, quantities, totals\n\n**Scale & Hierarchy**\n- **Page Headers**: text-2xl font-semibold (orders, products)\n- **Section Titles**: text-lg font-medium (categories, table names)\n- **Product Names**: text-base font-medium\n- **Body Text**: text-sm (descriptions, metadata)\n- **Prices**: text-lg font-semibold (cart totals), text-base (product prices)\n- **Small Labels**: text-xs (category tags, status badges)\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, and 8 consistently\n- Component padding: p-4 to p-6\n- Section gaps: gap-4 to gap-6\n- Page margins: px-6 py-4\n\n**Grid Structure**\n- **Sidebar Navigation**: Fixed 240px width (w-60)\n- **Main Content**: flex-1 with max-width constraints\n- **Product Grid**: grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\n- **Order Panel**: Fixed 320px width (w-80) on desktop, full-width drawer on mobile\n\n**Containers**\n- Dashboard sections: max-w-7xl mx-auto\n- Modal dialogs: max-w-2xl\n\n---\n\n## Component Library\n\n### Navigation\n- **Sidebar**: Vertical navigation with icons + labels, active state with orange left border and background tint\n- **Top Bar**: Logo left, search center, user profile/settings right\n- **Tab Navigation**: For sections (Dine In/Take Away/Delivery)\n\n### Product Display\n- **Product Cards**: White background, rounded-lg, product image top (aspect-square), name + price below, hover shadow-md transition\n- **Category Pills**: Horizontal scrollable list, active state with orange background, inactive with border-2\n\n### Order Management\n- **Order List Items**: Each item shows thumbnail, name, quantity controls (+/-), price, remove button\n- **Quantity Controls**: Outlined buttons with - and + flanking numeric display\n- **Order Summary**: Subtotal, discount row, divider, total in larger bold text\n\n### Tables & Lists\n- **Table Cards**: Grid layout showing table number, order count, time elapsed, status color indicator\n- **Data Tables**: Striped rows, sortable headers, hover states\n\n### Forms & Inputs\n- **Input Fields**: border rounded-md, focus:ring-2 ring-orange-500\n- **Select Dropdowns**: Consistent height (h-10), chevron icon\n- **Search Bar**: With magnifying glass icon, rounded-full design\n\n### Buttons\n- **Primary**: bg-orange-600 text-white, rounded-md, px-6 py-2.5\n- **Secondary**: border-2 border-orange-600 text-orange-600\n- **Ghost**: text-gray-600 hover:bg-gray-100\n- **Sizes**: Small (px-3 py-1.5 text-sm), Default (px-6 py-2.5), Large (px-8 py-3)\n\n### Status Badges\n- **Pending**: bg-yellow-100 text-yellow-800\n- **Completed**: bg-green-100 text-green-800\n- **Cancelled**: bg-red-100 text-red-800\n- Rounded-full, px-3 py-1, text-xs font-medium\n\n### Modals & Overlays\n- **Payment Modal**: Centered, max-w-lg, payment method selection with icons\n- **Confirmation Dialogs**: Simple, action buttons right-aligned\n\n---\n\n## Interaction Patterns\n\n**Order Flow**\n1. Select category → Browse products → Tap to add\n2. Adjust quantities in cart\n3. Add customer/table assignment\n4. Process payment → Print receipt\n\n**Touch Targets**\n- Minimum 44x44px for all interactive elements\n- Adequate spacing between buttons (gap-2 minimum)\n\n**Loading States**\n- Skeleton screens for product grids\n- Spinner for payment processing\n\n**Feedback**\n- Toast notifications (top-right) for confirmations\n- Inline validation for forms\n- Haptic-style subtle animations on successful actions\n\n---\n\n## Images\n\n**Product Images**\n- Square aspect ratio (1:1), consistent across all products\n- Placeholder: Neutral gray background with food icon for missing images\n- Optimized thumbnails in cart (64x64px)\n- High-quality images in product grid (200x200px)\n\n**No Hero Images**: This is an operational dashboard, not a marketing site\n\n---\n\n## Accessibility\n- WCAG AA contrast ratios maintained\n- Keyboard navigation for all functions\n- Screen reader labels on icon-only buttons\n- Focus indicators visible (ring-2 ring-orange-500)\n\n---\n\n## Responsive Behavior\n\n**Desktop (1024px+)**: Three-column layout (sidebar + main + order panel)\n**Tablet (768px-1023px)**: Two-column (collapsible sidebar + main), order panel as slide-out\n**Mobile (<768px)**: Single column, bottom navigation bar, full-screen views","size_bytes":5603},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# BondPos POS System\n\n## Overview\nA comprehensive Point of Sale (POS) system for restaurants featuring product catalog management, order processing, table tracking, and payment handling. Built with React, Express, and in-memory storage.\n\n## Current State\n- **Status**: In Development (Phase 7: Complete POS Order Workflow)\n- **Last Updated**: October 6, 2025\n- **Recent Changes**: \n  - **Complete POS Order Workflow**: Full order lifecycle with transactional safety\n    - Draft List modal with Edit/Print/Delete actions for all saved drafts\n    - Edit Draft functionality restores items to cart without data loss\n    - Receipt/Invoice Preview dialog with print functionality\n    - Payment Methods modal (ABA, Acleda, Cash, Due, Card Payment)\n    - Complete order flow: payment → receipt → save to sales with metadata\n    - Transactional draft deletion (only deletes after successful completion/save)\n    - Completed orders persist as sales records with payment details\n  - **Role Permissions System**: Fully functional permission controls in Settings → User & Access Management\n    - 4 permission switches: Access to Reports, Access to Settings, Process Refunds, Manage Inventory\n    - Backend persistence with schema validation\n    - All permissions save and load from API with proper state management\n  - **Rebranding Complete**: Changed application name from \"RestroBit\" to \"BondPos\" across all files\n    - Updated UI (sidebar, page title), documentation, schema defaults, and storage\n\n## Project Architecture\n\n### Frontend (React + TypeScript)\n- **Pages**:\n  - `/` - POS (Point of Sale) interface\n  - `/dashboard` - Dashboard overview\n  - `/tables` - Table Management interface\n  - `/sales` - Sales Management interface\n  - `/expenses` - Expense Management interface\n  - `/items` - Item/Inventory Management interface\n  - `/purchases` - Purchase Management interface\n  - `/hrm` - Human Resource Management interface\n  - `/reports` - Reports and analytics interface\n  - `/settings` - System settings and configuration\n- **Components**:\n  - `AppSidebar`: Navigation sidebar with all menu items\n  - `AppHeader`: Top header with conditional POS buttons (New, QR Menu Orders, Draft List, Table Order) and theme toggle\n  - `ProductCard`: Individual product display with add-to-order functionality\n  - `OrderPanel`: Right-side order management panel with items, quantities, totals, action buttons\n  - `PaymentModal`: Payment processing dialog with 5 payment methods (ABA, Acleda, Cash, Due, Card)\n  - `DraftListModal`: Draft order management with Edit/Print/Delete actions\n  - `ReceiptPrintModal`: Invoice preview and print dialog\n- **State Management**: React hooks + TanStack Query for server state\n- **Styling**: Tailwind CSS + Shadcn UI components with orange accent colors\n\n### Backend (Express + TypeScript)\n- **Storage**: In-memory MemStorage implementation\n- **API Endpoints**: RESTful API for products, categories, orders, tables, items, purchases, employees\n- **Data Models**:\n  - Categories (with name and slug - full CRUD support)\n  - Products (with prices, images, category, unit, quantity, description, createdAt - full CRUD support)\n  - Tables (with capacity, description, status tracking - full CRUD support)\n  - Orders (with items, totals, discounts, status, payment method, payment status, completed timestamp - full CRUD support)\n  - OrderItems (join table for order-product relationships)\n  - Purchases (with item details, quantity, price, purchase date - full CRUD support)\n  - Employees (with employee ID, position, department, salary, contact info, status - full CRUD support)\n  - Attendance (schema defined, ready for implementation)\n  - Leave (schema defined, ready for implementation)\n  - Payroll (schema defined, ready for implementation)\n\n### Design System\n- **Primary Color**: Orange (18 95% 60%)\n- **Typography**: Inter for UI, Roboto Mono for numbers/prices\n- **Layout**: Sidebar navigation + main content + order panel (3-column)\n- **Components**: Following Shadcn UI patterns with custom styling\n\n## Features\n\n### Implemented (MVP)\n- [x] Product catalog with category filtering\n- [x] Real-time order management\n- [x] Quantity adjustment with +/- controls\n- [x] Order total calculations (subtotal, discounts, total)\n- [x] Table selection and dining option selection\n- [x] **Complete POS Order Workflow**:\n  - Draft order saving with persistent storage\n  - Draft List modal (view all drafts, Edit/Print/Delete actions)\n  - Edit Draft (restores items to cart with transactional safety)\n  - Receipt/Invoice preview with print functionality\n  - Payment Methods modal (ABA, Acleda, Cash, Due, Card Payment)\n  - Complete order flow: payment selection → receipt print → save to sales\n  - Transactional safety: drafts only deleted after successful completion\n  - Sales records: completed orders with payment metadata (method, status, timestamp)\n- [x] Product search functionality\n- [x] KOT (Kitchen Order Ticket) printing\n- [x] **Item Management** - Comprehensive inventory management with:\n  - Add/Edit items with image URL, name, category, price, unit, quantity, description\n  - Category management (create, edit, delete categories)\n  - Search by item name or description\n  - Filter by category and date (All Time, Today, Yesterday, Custom Date)\n  - Items grid view with responsive cards\n  - Import items from Excel (.xlsx, .xls) or CSV files\n  - Download sample Excel template with example data\n  - Export items to CSV format\n  - Import tracking with detailed feedback (imported/skipped counts)\n  - Full CRUD operations with validation\n- [x] **Purchase Management** - Complete purchase order management with:\n  - Add/Edit purchases with item name, category, quantity, unit, price, purchase date, optional image\n  - Category management for purchases\n  - Search by item name\n  - Filter by category and date (All Time, Today, Yesterday, Custom Date)\n  - Import purchases from Excel (.xlsx, .xls) or CSV files\n  - Download sample Excel template with proper structure and example data\n  - Export purchases to CSV format\n  - View and print purchase receipts\n  - Full CRUD operations with validation and error handling\n- [x] **Table Management** - Complete table management system with:\n  - Add/Edit tables with table number, capacity, description\n  - View table details\n  - Status tracking (available/occupied)\n  - Delete tables\n  - Full CRUD operations with validation\n- [x] **HRM (Human Resource Management)** - Employee management foundation with:\n  - **Employee Management Module** (Fully Functional):\n    - Add/Edit employees with employee ID, name, position, department, email, phone, joining date, salary, photo URL, status\n    - View employee details in formatted dialog\n    - Delete employees with confirmation\n    - Employee list table with all details and status badges\n    - Form validation with Zod schemas\n    - Active/Inactive status tracking\n    - Import employees from Excel (.xlsx, .xls) or CSV files\n    - Export employees to CSV format\n    - Download employee sample template with proper structure and example data\n    - Upload employee schedules via Excel file\n    - Download schedule sample template with shift timings and day-off examples\n    - Full CRUD operations\n  - **Module Structure** (Ready for Implementation):\n    - Attendance Management tab (track check-in/out, mark present/absent, export reports)\n    - Leave Management tab (apply for leave, approve/reject requests, track leave balance)\n    - Payroll & Salary tab (manage salary records, generate payslips, calculate bonuses/deductions)\n    - Reports & Analytics tab (export HR summaries)\n  - Database schemas defined for all modules (employees, attendance, leave, payroll)\n  - Tab-based navigation with icons for easy module access\n\n### Navigation Structure (Sidebar)\n- Dashboard - Overview and key metrics\n- POS - Point of Sale interface (fully functional)\n- Table - Table management\n- Sales manage - Sales activities and records\n- Expense Manage - Business expense tracking\n- Item Manage - Inventory and menu items\n- Purchase Manage - Purchase orders and vendors\n- HRM - Human resource management\n- Reports - Business reports and analytics\n- Settings - System configuration\n\n- [x] **Comprehensive Reporting System** - Full-featured reports dashboard with:\n  - Report type selector (Sales, Inventory, Payments, Discounts, Refunds, Staff Performance)\n  - Date range filters (Today, Yesterday, Last 7 Days, Last Month, Custom Range with date pickers)\n  - Summary KPI tiles (Total Revenue, Transactions, Average Sale Value, Total Discounts)\n  - Payment methods breakdown with percentage distribution\n  - Detailed transaction tables with sortable columns\n  - Export to CSV functionality\n  - Print report capability\n  - Filter and view transaction details\n- [x] **System Settings** - Complete settings configuration with 10 sections:\n  - General Settings: Business info, logo, address, contact, date/time format, terminal ID\n  - Payment Methods: Enable/disable payment options (Cash, Card, ABA, Acleda, Credit), set defaults, min/max amounts\n  - Tax & Discount: VAT/service tax rates, default discounts, percentage/fixed amount options\n  - Receipt & Invoice: Custom header/footer text, logo, auto-print, tax breakdown, invoice numbering\n  - User & Access Management: Add/remove staff, assign roles (Manager, Cashier), set permissions\n  - Printer & Hardware: Configure receipt/kitchen printers, barcode scanner, cash drawer, paper size\n  - Currency & Localization: Default currency (USD, KHR, EUR, GBP), language, decimal places, rounding rules\n  - Backup & Data Management: Auto-backup frequency, storage options (local/cloud), manual backup/restore\n  - Notifications & Alerts: Low stock alerts, sale notifications, discount alerts, system updates\n  - Customization & Themes: Color themes, layout preferences (grid/list), font size, compact mode\n\n### Future Enhancements\n- [ ] Dashboard with sales analytics (page created, needs implementation)\n- [ ] Sales management features:\n  - View all completed orders (sales records)\n  - Filter by date range, payment method, dining option\n  - Export sales data to CSV\n  - Refund processing with permission controls\n- [ ] Expense tracking system (page created, needs implementation)\n- [ ] HRM additional modules:\n  - [ ] Attendance Management - Daily attendance tracking with check-in/out times\n  - [ ] Leave Management - Leave application and approval workflow\n  - [ ] Payroll & Salary - Salary records and payslip generation\n  - [ ] HR Reports & Analytics - Export attendance, leave, and payroll summaries\n\n## Development Notes\n- Using in-memory storage (no database persistence)\n- Orange accent color (#EA580C) matches BondPos branding\n- Responsive design optimized for tablet and desktop use\n- All interactive elements have proper data-testid attributes for testing\n\n## User Preferences\n- Clean, professional UI matching modern POS systems\n- Fast, efficient order processing workflow\n- Touch-friendly interface for tablet use\n","size_bytes":10981},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertOrderSchema, insertOrderItemSchema, insertExpenseCategorySchema, insertExpenseSchema, insertCategorySchema, insertProductSchema, insertPurchaseSchema, insertTableSchema, insertEmployeeSchema, insertAttendanceSchema, insertLeaveSchema, insertPayrollSchema, insertSettingsSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst createOrderWithItemsSchema = insertOrderSchema.extend({\n  items: z.array(insertOrderItemSchema.omit({ orderId: true })),\n});\n\nfunction getDateRange(filter: string, customDate?: string): { startDate: Date; endDate: Date } {\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  \n  switch (filter) {\n    case \"today\":\n      return {\n        startDate: today,\n        endDate: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999),\n      };\n    case \"yesterday\":\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n      return {\n        startDate: yesterday,\n        endDate: new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 23, 59, 59, 999),\n      };\n    case \"this-week\":\n      const startOfWeek = new Date(today);\n      startOfWeek.setDate(today.getDate() - today.getDay());\n      return {\n        startDate: startOfWeek,\n        endDate: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999),\n      };\n    case \"custom\":\n      if (customDate) {\n        const custom = new Date(customDate);\n        const customDay = new Date(custom.getFullYear(), custom.getMonth(), custom.getDate());\n        return {\n          startDate: customDay,\n          endDate: new Date(customDay.getFullYear(), customDay.getMonth(), customDay.getDate(), 23, 59, 59, 999),\n        };\n      }\n      return {\n        startDate: today,\n        endDate: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999),\n      };\n    default:\n      return {\n        startDate: today,\n        endDate: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999),\n      };\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const category = await storage.getCategory(req.params.id);\n      if (!category) {\n        return res.status(404).json({ error: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch category\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(validatedData);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid category data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create category\" });\n    }\n  });\n\n  app.patch(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const category = await storage.updateCategory(req.params.id, req.body);\n      if (!category) {\n        return res.status(404).json({ error: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteCategory(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Category not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete category\" });\n    }\n  });\n\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { categoryId } = req.query;\n      const products = categoryId\n        ? await storage.getProductsByCategory(categoryId as string)\n        : await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.status(201).json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid product data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create product\" });\n    }\n  });\n\n  app.patch(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.updateProduct(req.params.id, req.body);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete product\" });\n    }\n  });\n\n  app.get(\"/api/tables\", async (req, res) => {\n    try {\n      const tables = await storage.getTables();\n      res.json(tables);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tables\" });\n    }\n  });\n\n  app.get(\"/api/tables/:id\", async (req, res) => {\n    try {\n      const table = await storage.getTable(req.params.id);\n      if (!table) {\n        return res.status(404).json({ error: \"Table not found\" });\n      }\n      res.json(table);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch table\" });\n    }\n  });\n\n  app.post(\"/api/tables\", async (req, res) => {\n    try {\n      const validatedData = insertTableSchema.parse(req.body);\n      const table = await storage.createTable(validatedData);\n      res.status(201).json(table);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid table data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create table\" });\n    }\n  });\n\n  app.patch(\"/api/tables/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTableSchema.partial().parse(req.body);\n      const table = await storage.updateTable(req.params.id, validatedData);\n      if (!table) {\n        return res.status(404).json({ error: \"Table not found\" });\n      }\n      res.json(table);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid table data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update table\" });\n    }\n  });\n\n  app.patch(\"/api/tables/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (!status) {\n        return res.status(400).json({ error: \"Status is required\" });\n      }\n      const table = await storage.updateTableStatus(req.params.id, status);\n      if (!table) {\n        return res.status(404).json({ error: \"Table not found\" });\n      }\n      res.json(table);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update table status\" });\n    }\n  });\n\n  app.delete(\"/api/tables/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTable(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Table not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete table\" });\n    }\n  });\n\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n      \n      const items = await storage.getOrderItemsWithProducts(order.id);\n      res.json({ ...order, items });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch order\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id/items\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n      \n      const items = await storage.getOrderItemsWithProducts(order.id);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch order items\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const validatedData = createOrderWithItemsSchema.parse(req.body);\n      const { items, ...orderData } = validatedData;\n      \n      const order = await storage.createOrder(orderData);\n      \n      for (const item of items) {\n        await storage.createOrderItem({\n          ...item,\n          orderId: order.id,\n        });\n      }\n\n      if (orderData.tableId) {\n        await storage.updateTableStatus(orderData.tableId, \"occupied\");\n      }\n      \n      const orderWithItems = {\n        ...order,\n        items: await storage.getOrderItemsWithProducts(order.id),\n      };\n      \n      res.status(201).json(orderWithItems);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid order data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create order\" });\n    }\n  });\n\n  app.patch(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const order = await storage.updateOrder(req.params.id, req.body);\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update order\" });\n    }\n  });\n\n  app.patch(\"/api/orders/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (!status) {\n        return res.status(400).json({ error: \"Status is required\" });\n      }\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update order status\" });\n    }\n  });\n\n  app.delete(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteOrder(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete order\" });\n    }\n  });\n\n  app.get(\"/api/orders/drafts\", async (req, res) => {\n    try {\n      const drafts = await storage.getDraftOrders();\n      const draftsWithItems = await Promise.all(\n        drafts.map(async (draft) => {\n          const items = await storage.getOrderItemsWithProducts(draft.id);\n          return { ...draft, items };\n        })\n      );\n      res.json(draftsWithItems);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch draft orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/qr\", async (req, res) => {\n    try {\n      const qrOrders = await storage.getQROrders();\n      const qrOrdersWithItems = await Promise.all(\n        qrOrders.map(async (order) => {\n          const items = await storage.getOrderItemsWithProducts(order.id);\n          return { ...order, items };\n        })\n      );\n      res.json(qrOrdersWithItems);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch QR orders\" });\n    }\n  });\n\n  app.patch(\"/api/orders/:id/accept\", async (req, res) => {\n    try {\n      const order = await storage.updateOrderStatus(req.params.id, \"pending\");\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to accept order\" });\n    }\n  });\n\n  app.patch(\"/api/orders/:id/reject\", async (req, res) => {\n    try {\n      const order = await storage.updateOrderStatus(req.params.id, \"cancelled\");\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to reject order\" });\n    }\n  });\n\n  app.get(\"/api/sales\", async (req, res) => {\n    try {\n      const sales = await storage.getCompletedOrders();\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const filter = (req.query.filter as string) || \"today\";\n      const customDate = req.query.date as string | undefined;\n      const { startDate, endDate } = getDateRange(filter, customDate);\n      const stats = await storage.getDashboardStats(startDate, endDate);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/sales-by-category\", async (req, res) => {\n    try {\n      const filter = (req.query.filter as string) || \"today\";\n      const customDate = req.query.date as string | undefined;\n      const { startDate, endDate } = getDateRange(filter, customDate);\n      const sales = await storage.getSalesByCategory(startDate, endDate);\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch sales by category\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/sales-by-payment-method\", async (req, res) => {\n    try {\n      const filter = (req.query.filter as string) || \"today\";\n      const customDate = req.query.date as string | undefined;\n      const { startDate, endDate } = getDateRange(filter, customDate);\n      const sales = await storage.getSalesByPaymentMethod(startDate, endDate);\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch sales by payment method\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/popular-products\", async (req, res) => {\n    try {\n      const filter = (req.query.filter as string) || \"today\";\n      const customDate = req.query.date as string | undefined;\n      const { startDate, endDate } = getDateRange(filter, customDate);\n      const products = await storage.getPopularProducts(startDate, endDate);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch popular products\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-orders\", async (req, res) => {\n    try {\n      const filter = (req.query.filter as string) || \"today\";\n      const customDate = req.query.date as string | undefined;\n      const { startDate, endDate } = getDateRange(filter, customDate);\n      const orders = await storage.getRecentOrders(startDate, endDate);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch recent orders\" });\n    }\n  });\n\n  app.get(\"/api/expense-categories\", async (req, res) => {\n    try {\n      const categories = await storage.getExpenseCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch expense categories\" });\n    }\n  });\n\n  app.get(\"/api/expense-categories/:id\", async (req, res) => {\n    try {\n      const category = await storage.getExpenseCategory(req.params.id);\n      if (!category) {\n        return res.status(404).json({ error: \"Expense category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch expense category\" });\n    }\n  });\n\n  app.post(\"/api/expense-categories\", async (req, res) => {\n    try {\n      const validatedData = insertExpenseCategorySchema.parse(req.body);\n      const category = await storage.createExpenseCategory(validatedData);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid category data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create expense category\" });\n    }\n  });\n\n  app.patch(\"/api/expense-categories/:id\", async (req, res) => {\n    try {\n      const category = await storage.updateExpenseCategory(req.params.id, req.body);\n      if (!category) {\n        return res.status(404).json({ error: \"Expense category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update expense category\" });\n    }\n  });\n\n  app.delete(\"/api/expense-categories/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteExpenseCategory(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Expense category not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete expense category\" });\n    }\n  });\n\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenses = await storage.getExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.get(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const expense = await storage.getExpense(req.params.id);\n      if (!expense) {\n        return res.status(404).json({ error: \"Expense not found\" });\n      }\n      res.json(expense);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch expense\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      const validatedData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(validatedData);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid expense data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create expense\" });\n    }\n  });\n\n  app.patch(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const expense = await storage.updateExpense(req.params.id, req.body);\n      if (!expense) {\n        return res.status(404).json({ error: \"Expense not found\" });\n      }\n      res.json(expense);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update expense\" });\n    }\n  });\n\n  app.delete(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteExpense(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Expense not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete expense\" });\n    }\n  });\n\n  app.get(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchases = await storage.getPurchases();\n      res.json(purchases);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch purchases\" });\n    }\n  });\n\n  app.get(\"/api/purchases/:id\", async (req, res) => {\n    try {\n      const purchase = await storage.getPurchase(req.params.id);\n      if (!purchase) {\n        return res.status(404).json({ error: \"Purchase not found\" });\n      }\n      res.json(purchase);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch purchase\" });\n    }\n  });\n\n  app.post(\"/api/purchases\", async (req, res) => {\n    try {\n      const validatedData = insertPurchaseSchema.parse(req.body);\n      const purchase = await storage.createPurchase(validatedData);\n      res.status(201).json(purchase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid purchase data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create purchase\" });\n    }\n  });\n\n  app.patch(\"/api/purchases/:id\", async (req, res) => {\n    try {\n      const purchase = await storage.updatePurchase(req.params.id, req.body);\n      if (!purchase) {\n        return res.status(404).json({ error: \"Purchase not found\" });\n      }\n      res.json(purchase);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update purchase\" });\n    }\n  });\n\n  app.delete(\"/api/purchases/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePurchase(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Purchase not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete purchase\" });\n    }\n  });\n\n  app.get(\"/api/employees\", async (req, res) => {\n    try {\n      const employees = await storage.getEmployees();\n      res.json(employees);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employees\" });\n    }\n  });\n\n  app.get(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const employee = await storage.getEmployee(req.params.id);\n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employee\" });\n    }\n  });\n\n  app.post(\"/api/employees\", async (req, res) => {\n    try {\n      const validatedData = insertEmployeeSchema.parse(req.body);\n      const employee = await storage.createEmployee(validatedData);\n      res.status(201).json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid employee data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create employee\" });\n    }\n  });\n\n  app.patch(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const employee = await storage.updateEmployee(req.params.id, req.body);\n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update employee\" });\n    }\n  });\n\n  app.delete(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteEmployee(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete employee\" });\n    }\n  });\n\n  app.get(\"/api/attendance\", async (req, res) => {\n    try {\n      const { date, employeeId } = req.query;\n      let attendance;\n      \n      if (date) {\n        attendance = await storage.getAttendanceByDate(new Date(date as string));\n      } else if (employeeId) {\n        attendance = await storage.getAttendanceByEmployee(employeeId as string);\n      } else {\n        attendance = await storage.getAttendance();\n      }\n      \n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch attendance\" });\n    }\n  });\n\n  app.post(\"/api/attendance\", async (req, res) => {\n    try {\n      const validatedData = insertAttendanceSchema.parse(req.body);\n      const attendance = await storage.createAttendance(validatedData);\n      res.status(201).json(attendance);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid attendance data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create attendance record\" });\n    }\n  });\n\n  app.patch(\"/api/attendance/:id\", async (req, res) => {\n    try {\n      const attendance = await storage.updateAttendance(req.params.id, req.body);\n      if (!attendance) {\n        return res.status(404).json({ error: \"Attendance record not found\" });\n      }\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update attendance\" });\n    }\n  });\n\n  app.delete(\"/api/attendance/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteAttendance(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Attendance record not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete attendance\" });\n    }\n  });\n\n  app.get(\"/api/leaves\", async (req, res) => {\n    try {\n      const { employeeId } = req.query;\n      let leaves;\n      \n      if (employeeId) {\n        leaves = await storage.getLeavesByEmployee(employeeId as string);\n      } else {\n        leaves = await storage.getLeaves();\n      }\n      \n      res.json(leaves);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch leaves\" });\n    }\n  });\n\n  app.get(\"/api/leaves/:id\", async (req, res) => {\n    try {\n      const leave = await storage.getLeave(req.params.id);\n      if (!leave) {\n        return res.status(404).json({ error: \"Leave not found\" });\n      }\n      res.json(leave);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch leave\" });\n    }\n  });\n\n  app.post(\"/api/leaves\", async (req, res) => {\n    try {\n      const validatedData = insertLeaveSchema.parse(req.body);\n      const leave = await storage.createLeave(validatedData);\n      res.status(201).json(leave);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid leave data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create leave request\" });\n    }\n  });\n\n  app.patch(\"/api/leaves/:id\", async (req, res) => {\n    try {\n      const leave = await storage.updateLeave(req.params.id, req.body);\n      if (!leave) {\n        return res.status(404).json({ error: \"Leave not found\" });\n      }\n      res.json(leave);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update leave\" });\n    }\n  });\n\n  app.delete(\"/api/leaves/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteLeave(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Leave not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete leave\" });\n    }\n  });\n\n  app.get(\"/api/payroll\", async (req, res) => {\n    try {\n      const { employeeId } = req.query;\n      let payroll;\n      \n      if (employeeId) {\n        payroll = await storage.getPayrollByEmployee(employeeId as string);\n      } else {\n        payroll = await storage.getPayroll();\n      }\n      \n      res.json(payroll);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch payroll\" });\n    }\n  });\n\n  app.get(\"/api/payroll/:id\", async (req, res) => {\n    try {\n      const payroll = await storage.getPayrollById(req.params.id);\n      if (!payroll) {\n        return res.status(404).json({ error: \"Payroll not found\" });\n      }\n      res.json(payroll);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch payroll\" });\n    }\n  });\n\n  app.post(\"/api/payroll\", async (req, res) => {\n    try {\n      const validatedData = insertPayrollSchema.parse(req.body);\n      const payroll = await storage.createPayroll(validatedData);\n      res.status(201).json(payroll);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid payroll data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create payroll record\" });\n    }\n  });\n\n  app.patch(\"/api/payroll/:id\", async (req, res) => {\n    try {\n      const payroll = await storage.updatePayroll(req.params.id, req.body);\n      if (!payroll) {\n        return res.status(404).json({ error: \"Payroll not found\" });\n      }\n      res.json(payroll);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update payroll\" });\n    }\n  });\n\n  app.delete(\"/api/payroll/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePayroll(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Payroll not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete payroll\" });\n    }\n  });\n\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.put(\"/api/settings\", async (req, res) => {\n    try {\n      const validatedData = insertSettingsSchema.partial().parse(req.body);\n      const settings = await storage.updateSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid settings data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":30089},"server/storage.ts":{"content":"import {\n  type Product,\n  type InsertProduct,\n  type Category,\n  type InsertCategory,\n  type Table,\n  type InsertTable,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type ExpenseCategory,\n  type InsertExpenseCategory,\n  type Expense,\n  type InsertExpense,\n  type Purchase,\n  type InsertPurchase,\n  type Employee,\n  type InsertEmployee,\n  type Attendance,\n  type InsertAttendance,\n  type Leave,\n  type InsertLeave,\n  type Payroll,\n  type InsertPayroll,\n  type Settings,\n  type InsertSettings,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getCategories(): Promise<Category[]>;\n  getCategory(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<boolean>;\n  \n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductsByCategory(categoryId: string): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  \n  getTables(): Promise<Table[]>;\n  getTable(id: string): Promise<Table | undefined>;\n  createTable(table: InsertTable): Promise<Table>;\n  updateTable(id: string, table: Partial<InsertTable>): Promise<Table | undefined>;\n  updateTableStatus(id: string, status: string): Promise<Table | undefined>;\n  deleteTable(id: string): Promise<boolean>;\n  \n  getOrders(): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  getDraftOrders(): Promise<Order[]>;\n  getQROrders(): Promise<Order[]>;\n  getCompletedOrders(): Promise<Order[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  createOrderWithItems(order: InsertOrder, items: InsertOrderItem[]): Promise<Order>;\n  updateOrder(id: string, order: Partial<InsertOrder>): Promise<Order | undefined>;\n  updateOrderStatus(id: string, status: string): Promise<Order | undefined>;\n  deleteOrder(id: string): Promise<boolean>;\n  \n  getOrderItems(orderId: string): Promise<OrderItem[]>;\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  deleteOrderItems(orderId: string): Promise<boolean>;\n  getOrderItemsWithProducts(orderId: string): Promise<(OrderItem & { product: Product })[]>;\n  \n  getDashboardStats(startDate: Date, endDate: Date): Promise<{\n    todaySales: number;\n    todayOrders: number;\n    totalRevenue: number;\n    totalOrders: number;\n    totalExpenses: number;\n    totalSalary: number;\n    totalPurchase: number;\n  }>;\n  getSalesByCategory(startDate: Date, endDate: Date): Promise<Array<{ category: string; revenue: number }>>;\n  getSalesByPaymentMethod(startDate: Date, endDate: Date): Promise<Array<{ paymentMethod: string; amount: number }>>;\n  getPopularProducts(startDate: Date, endDate: Date): Promise<Array<{ product: string; quantity: number; revenue: number }>>;\n  getRecentOrders(startDate: Date, endDate: Date): Promise<Order[]>;\n  \n  getExpenseCategories(): Promise<ExpenseCategory[]>;\n  getExpenseCategory(id: string): Promise<ExpenseCategory | undefined>;\n  createExpenseCategory(category: InsertExpenseCategory): Promise<ExpenseCategory>;\n  updateExpenseCategory(id: string, category: Partial<InsertExpenseCategory>): Promise<ExpenseCategory | undefined>;\n  deleteExpenseCategory(id: string): Promise<boolean>;\n  \n  getExpenses(): Promise<Expense[]>;\n  getExpense(id: string): Promise<Expense | undefined>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  updateExpense(id: string, expense: Partial<InsertExpense>): Promise<Expense | undefined>;\n  deleteExpense(id: string): Promise<boolean>;\n  \n  getPurchases(): Promise<Purchase[]>;\n  getPurchase(id: string): Promise<Purchase | undefined>;\n  createPurchase(purchase: InsertPurchase): Promise<Purchase>;\n  updatePurchase(id: string, purchase: Partial<InsertPurchase>): Promise<Purchase | undefined>;\n  deletePurchase(id: string): Promise<boolean>;\n  \n  getEmployees(): Promise<Employee[]>;\n  getEmployee(id: string): Promise<Employee | undefined>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: string, employee: Partial<InsertEmployee>): Promise<Employee | undefined>;\n  deleteEmployee(id: string): Promise<boolean>;\n  \n  getAttendance(): Promise<Attendance[]>;\n  getAttendanceByDate(date: Date): Promise<Attendance[]>;\n  getAttendanceByEmployee(employeeId: string): Promise<Attendance[]>;\n  createAttendance(attendance: InsertAttendance): Promise<Attendance>;\n  updateAttendance(id: string, attendance: Partial<InsertAttendance>): Promise<Attendance | undefined>;\n  deleteAttendance(id: string): Promise<boolean>;\n  \n  getLeaves(): Promise<Leave[]>;\n  getLeave(id: string): Promise<Leave | undefined>;\n  getLeavesByEmployee(employeeId: string): Promise<Leave[]>;\n  createLeave(leave: InsertLeave): Promise<Leave>;\n  updateLeave(id: string, leave: Partial<InsertLeave>): Promise<Leave | undefined>;\n  deleteLeave(id: string): Promise<boolean>;\n  \n  getPayroll(): Promise<Payroll[]>;\n  getPayrollById(id: string): Promise<Payroll | undefined>;\n  getPayrollByEmployee(employeeId: string): Promise<Payroll[]>;\n  createPayroll(payroll: InsertPayroll): Promise<Payroll>;\n  updatePayroll(id: string, payroll: Partial<InsertPayroll>): Promise<Payroll | undefined>;\n  deletePayroll(id: string): Promise<boolean>;\n  \n  getSettings(): Promise<Settings | undefined>;\n  updateSettings(settings: Partial<InsertSettings>): Promise<Settings>;\n}\n\nexport class MemStorage implements IStorage {\n  private categories: Map<string, Category>;\n  private products: Map<string, Product>;\n  private tables: Map<string, Table>;\n  private orders: Map<string, Order>;\n  private orderItems: Map<string, OrderItem>;\n  private expenseCategories: Map<string, ExpenseCategory>;\n  private expenses: Map<string, Expense>;\n  private purchases: Map<string, Purchase>;\n  private employees: Map<string, Employee>;\n  private attendance: Map<string, Attendance>;\n  private leaves: Map<string, Leave>;\n  private payroll: Map<string, Payroll>;\n  private settings: Settings | null;\n  private orderCounter: number = 20;\n\n  constructor() {\n    this.categories = new Map();\n    this.products = new Map();\n    this.tables = new Map();\n    this.orders = new Map();\n    this.orderItems = new Map();\n    this.expenseCategories = new Map();\n    this.expenses = new Map();\n    this.purchases = new Map();\n    this.employees = new Map();\n    this.attendance = new Map();\n    this.leaves = new Map();\n    this.payroll = new Map();\n    this.settings = null;\n    this.seedData();\n  }\n\n  private seedData() {\n    const categories: Category[] = [\n      { id: \"1\", name: \"Rice\", slug: \"rice\" },\n      { id: \"2\", name: \"Beverages\", slug: \"beverages\" },\n      { id: \"3\", name: \"Salads\", slug: \"salads\" },\n      { id: \"4\", name: \"Soup\", slug: \"soup\" },\n      { id: \"5\", name: \"Pizza\", slug: \"pizza\" },\n    ];\n\n    categories.forEach((cat) => this.categories.set(cat.id, cat));\n\n    const products: Product[] = [\n      { id: \"1\", name: \"Shrimp Basil Salad\", price: \"10.60\", purchaseCost: null, categoryId: \"3\", imageUrl: null, unit: \"plate\", description: \"Fresh shrimp with basil and greens\", quantity: \"50\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"2\", name: \"Onion Rings\", price: \"8.50\", purchaseCost: null, categoryId: \"2\", imageUrl: null, unit: \"serving\", description: \"Crispy fried onion rings\", quantity: \"100\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"3\", name: \"Smoked Bacon\", price: \"12.00\", purchaseCost: null, categoryId: \"3\", imageUrl: null, unit: \"serving\", description: \"Premium smoked bacon strips\", quantity: \"75\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"4\", name: \"Fresh Tomatoes\", price: \"9.50\", purchaseCost: null, categoryId: \"3\", imageUrl: null, unit: \"kg\", description: \"Organic fresh tomatoes\", quantity: \"25\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"5\", name: \"Chicken Burger\", price: \"10.50\", purchaseCost: null, categoryId: \"4\", imageUrl: null, unit: \"piece\", description: \"Juicy grilled chicken burger\", quantity: \"60\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"6\", name: \"Red Onion Rings\", price: \"8.50\", purchaseCost: null, categoryId: \"2\", imageUrl: null, unit: \"serving\", description: \"Red onion rings with special sauce\", quantity: \"80\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"7\", name: \"Beef Burger\", price: \"10.50\", purchaseCost: null, categoryId: \"4\", imageUrl: null, unit: \"piece\", description: \"Classic beef burger with cheese\", quantity: \"55\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"8\", name: \"Grilled Burger\", price: \"10.50\", purchaseCost: null, categoryId: \"4\", imageUrl: null, unit: \"piece\", description: \"Premium grilled burger\", quantity: \"45\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"9\", name: \"Fresh Basil Salad\", price: \"8.50\", purchaseCost: null, categoryId: \"3\", imageUrl: null, unit: \"plate\", description: \"Garden fresh basil salad\", quantity: \"70\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"10\", name: \"Vegetable Pizza\", price: \"15.00\", purchaseCost: null, categoryId: \"5\", imageUrl: null, unit: \"piece\", description: \"Mixed vegetable pizza\", quantity: \"40\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"11\", name: \"Fish & Chips\", price: \"12.50\", purchaseCost: null, categoryId: \"4\", imageUrl: null, unit: \"serving\", description: \"Crispy fish with fries\", quantity: \"35\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"12\", name: \"Fried Rice\", price: \"9.00\", purchaseCost: null, categoryId: \"1\", imageUrl: null, unit: \"plate\", description: \"Classic fried rice\", quantity: \"90\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"13\", name: \"Biryani Rice\", price: \"11.00\", purchaseCost: null, categoryId: \"1\", imageUrl: null, unit: \"plate\", description: \"Aromatic biryani rice\", quantity: \"65\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"14\", name: \"Chicken Rice\", price: \"10.00\", purchaseCost: null, categoryId: \"1\", imageUrl: null, unit: \"plate\", description: \"Tender chicken with rice\", quantity: \"85\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"15\", name: \"Caesar Salad\", price: \"9.50\", purchaseCost: null, categoryId: \"3\", imageUrl: null, unit: \"plate\", description: \"Classic caesar salad\", quantity: \"55\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"16\", name: \"Greek Salad\", price: \"10.00\", purchaseCost: null, categoryId: \"3\", imageUrl: null, unit: \"plate\", description: \"Traditional greek salad\", quantity: \"50\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"17\", name: \"Tomato Soup\", price: \"6.50\", purchaseCost: null, categoryId: \"4\", imageUrl: null, unit: \"bowl\", description: \"Creamy tomato soup\", quantity: \"100\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"18\", name: \"Mushroom Soup\", price: \"7.00\", purchaseCost: null, categoryId: \"4\", imageUrl: null, unit: \"bowl\", description: \"Rich mushroom soup\", quantity: \"95\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"19\", name: \"Margherita Pizza\", price: \"14.00\", purchaseCost: null, categoryId: \"5\", imageUrl: null, unit: \"piece\", description: \"Classic margherita pizza\", quantity: \"42\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"20\", name: \"Pepperoni Pizza\", price: \"16.00\", purchaseCost: null, categoryId: \"5\", imageUrl: null, unit: \"piece\", description: \"Spicy pepperoni pizza\", quantity: \"38\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"21\", name: \"Orange Juice\", price: \"4.50\", purchaseCost: null, categoryId: \"2\", imageUrl: null, unit: \"glass\", description: \"Fresh orange juice\", quantity: \"120\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"22\", name: \"Mango Juice\", price: \"4.50\", purchaseCost: null, categoryId: \"2\", imageUrl: null, unit: \"glass\", description: \"Sweet mango juice\", quantity: \"110\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"23\", name: \"Coffee\", price: \"3.50\", purchaseCost: null, categoryId: \"2\", imageUrl: null, unit: \"cup\", description: \"Fresh brewed coffee\", quantity: \"200\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n      { id: \"24\", name: \"Green Tea\", price: \"3.00\", purchaseCost: null, categoryId: \"2\", imageUrl: null, unit: \"cup\", description: \"Organic green tea\", quantity: \"150\", createdAt: new Date(\"2025-10-01T10:00:00\") },\n    ];\n\n    products.forEach((prod) => this.products.set(prod.id, prod));\n\n    const tables: Table[] = [\n      { id: \"1\", tableNumber: \"1\", capacity: \"4\", description: \"Window seat table\", status: \"available\" },\n      { id: \"2\", tableNumber: \"2\", capacity: \"2\", description: \"Small corner table\", status: \"available\" },\n      { id: \"3\", tableNumber: \"3\", capacity: \"6\", description: \"Large family table\", status: \"available\" },\n      { id: \"4\", tableNumber: \"4\", capacity: \"4\", description: \"Center table\", status: \"available\" },\n      { id: \"5\", tableNumber: \"5\", capacity: \"2\", description: \"Quiet corner\", status: \"available\" },\n      { id: \"6\", tableNumber: \"6\", capacity: \"8\", description: \"Party table\", status: \"available\" },\n      { id: \"7\", tableNumber: \"7\", capacity: \"4\", description: \"Near entrance\", status: \"available\" },\n      { id: \"8\", tableNumber: \"8\", capacity: \"4\", description: \"Outdoor patio\", status: \"available\" },\n    ];\n\n    tables.forEach((table) => this.tables.set(table.id, table));\n\n    const employees: Employee[] = [\n      { id: \"1\", employeeId: \"EMP001\", name: \"John Smith\", position: \"Manager\", department: \"Admin\", email: \"john.smith@restrobit.com\", phone: \"+1234567890\", joiningDate: new Date(\"2024-01-15\"), salary: \"5000.00\", photoUrl: null, status: \"active\", createdAt: new Date(\"2024-01-15\") },\n      { id: \"2\", employeeId: \"EMP002\", name: \"Sarah Johnson\", position: \"Head Chef\", department: \"Kitchen\", email: \"sarah.johnson@restrobit.com\", phone: \"+1234567891\", joiningDate: new Date(\"2024-02-01\"), salary: \"4500.00\", photoUrl: null, status: \"active\", createdAt: new Date(\"2024-02-01\") },\n      { id: \"3\", employeeId: \"EMP003\", name: \"Michael Chen\", position: \"Sous Chef\", department: \"Kitchen\", email: \"michael.chen@restrobit.com\", phone: \"+1234567892\", joiningDate: new Date(\"2024-03-10\"), salary: \"3500.00\", photoUrl: null, status: \"active\", createdAt: new Date(\"2024-03-10\") },\n      { id: \"4\", employeeId: \"EMP004\", name: \"Emma Wilson\", position: \"Waitress\", department: \"Service\", email: \"emma.wilson@restrobit.com\", phone: \"+1234567893\", joiningDate: new Date(\"2024-04-05\"), salary: \"2500.00\", photoUrl: null, status: \"active\", createdAt: new Date(\"2024-04-05\") },\n      { id: \"5\", employeeId: \"EMP005\", name: \"David Martinez\", position: \"Waiter\", department: \"Service\", email: \"david.martinez@restrobit.com\", phone: \"+1234567894\", joiningDate: new Date(\"2024-04-20\"), salary: \"2500.00\", photoUrl: null, status: \"active\", createdAt: new Date(\"2024-04-20\") },\n      { id: \"6\", employeeId: \"EMP006\", name: \"Lisa Anderson\", position: \"Receptionist\", department: \"Reception\", email: \"lisa.anderson@restrobit.com\", phone: \"+1234567895\", joiningDate: new Date(\"2024-05-01\"), salary: \"2800.00\", photoUrl: null, status: \"active\", createdAt: new Date(\"2024-05-01\") },\n      { id: \"7\", employeeId: \"EMP007\", name: \"Robert Taylor\", position: \"Accountant\", department: \"Finance\", email: \"robert.taylor@restrobit.com\", phone: \"+1234567896\", joiningDate: new Date(\"2024-06-15\"), salary: \"4000.00\", photoUrl: null, status: \"active\", createdAt: new Date(\"2024-06-15\") },\n      { id: \"8\", employeeId: \"EMP008\", name: \"Jennifer Lee\", position: \"HR Manager\", department: \"HR\", email: \"jennifer.lee@restrobit.com\", phone: \"+1234567897\", joiningDate: new Date(\"2024-07-01\"), salary: \"4200.00\", photoUrl: null, status: \"active\", createdAt: new Date(\"2024-07-01\") },\n    ];\n\n    employees.forEach((emp) => this.employees.set(emp.id, emp));\n\n    const sampleOrders: Order[] = [\n      {\n        id: \"sale-1\",\n        orderNumber: \"1\",\n        tableId: \"1\",\n        diningOption: \"dine-in\",\n        customerName: \"John Smith\",\n        customerPhone: null,\n        orderSource: \"pos\",\n        subtotal: \"45.50\",\n        discount: \"5.00\",\n        discountType: \"amount\",\n        total: \"40.50\",\n        status: \"completed\",\n        paymentStatus: \"paid\",\n        paymentMethod: \"cash\",\n        createdAt: new Date(\"2025-10-06T10:30:00\"),\n        completedAt: new Date(\"2025-10-06T10:45:00\"),\n      },\n      {\n        id: \"sale-2\",\n        orderNumber: \"2\",\n        tableId: null,\n        diningOption: \"takeaway\",\n        customerName: \"Sarah Johnson\",\n        customerPhone: null,\n        orderSource: \"pos\",\n        subtotal: \"32.00\",\n        discount: \"0.00\",\n        discountType: \"amount\",\n        total: \"32.00\",\n        status: \"completed\",\n        paymentStatus: \"paid\",\n        paymentMethod: \"card\",\n        createdAt: new Date(\"2025-10-06T11:15:00\"),\n        completedAt: new Date(\"2025-10-06T11:30:00\"),\n      },\n      {\n        id: \"sale-3\",\n        orderNumber: \"3\",\n        tableId: \"3\",\n        diningOption: \"dine-in\",\n        customerName: \"Michael Brown\",\n        customerPhone: null,\n        orderSource: \"pos\",\n        subtotal: \"68.75\",\n        discount: \"10.00\",\n        discountType: \"amount\",\n        total: \"58.75\",\n        status: \"completed\",\n        paymentStatus: \"paid\",\n        paymentMethod: \"aba\",\n        createdAt: new Date(\"2025-10-06T12:00:00\"),\n        completedAt: new Date(\"2025-10-06T12:20:00\"),\n      },\n      {\n        id: \"sale-4\",\n        orderNumber: \"4\",\n        tableId: null,\n        diningOption: \"delivery\",\n        customerName: \"Emily Davis\",\n        customerPhone: null,\n        orderSource: \"pos\",\n        subtotal: \"55.20\",\n        discount: \"0.00\",\n        discountType: \"amount\",\n        total: \"55.20\",\n        status: \"confirmed\",\n        paymentStatus: \"pending\",\n        paymentMethod: null,\n        createdAt: new Date(\"2025-10-06T13:45:00\"),\n        completedAt: null,\n      },\n      {\n        id: \"sale-5\",\n        orderNumber: \"5\",\n        tableId: \"5\",\n        diningOption: \"dine-in\",\n        customerName: null,\n        customerPhone: null,\n        orderSource: \"pos\",\n        subtotal: \"28.50\",\n        discount: \"2.00\",\n        discountType: \"amount\",\n        total: \"26.50\",\n        status: \"completed\",\n        paymentStatus: \"paid\",\n        paymentMethod: \"cash\",\n        createdAt: new Date(\"2025-10-06T14:20:00\"),\n        completedAt: new Date(\"2025-10-06T14:35:00\"),\n      },\n      {\n        id: \"qr-order-1\",\n        orderNumber: \"6\",\n        tableId: \"2\",\n        diningOption: \"dine-in\",\n        customerName: \"James Wilson\",\n        customerPhone: \"+1234567890\",\n        orderSource: \"qr\",\n        subtotal: \"42.00\",\n        discount: \"0.00\",\n        discountType: \"amount\",\n        total: \"42.00\",\n        status: \"qr-pending\",\n        paymentStatus: \"pending\",\n        paymentMethod: null,\n        createdAt: new Date(),\n        completedAt: null,\n      },\n      {\n        id: \"qr-order-2\",\n        orderNumber: \"7\",\n        tableId: \"4\",\n        diningOption: \"dine-in\",\n        customerName: \"Linda Martinez\",\n        customerPhone: \"+1234567891\",\n        orderSource: \"qr\",\n        subtotal: \"67.50\",\n        discount: \"0.00\",\n        discountType: \"amount\",\n        total: \"67.50\",\n        status: \"qr-pending\",\n        paymentStatus: \"pending\",\n        paymentMethod: null,\n        createdAt: new Date(),\n        completedAt: null,\n      },\n      {\n        id: \"qr-order-3\",\n        orderNumber: \"8\",\n        tableId: null,\n        diningOption: \"takeaway\",\n        customerName: \"Robert Chen\",\n        customerPhone: \"+1234567892\",\n        orderSource: \"qr\",\n        subtotal: \"28.00\",\n        discount: \"0.00\",\n        discountType: \"amount\",\n        total: \"28.00\",\n        status: \"qr-pending\",\n        paymentStatus: \"pending\",\n        paymentMethod: null,\n        createdAt: new Date(),\n        completedAt: null,\n      },\n    ];\n\n    sampleOrders.forEach((order) => this.orders.set(order.id, order));\n    this.orderCounter = 9;\n\n    const qrOrderItems: OrderItem[] = [\n      { id: randomUUID(), orderId: \"qr-order-1\", productId: \"5\", quantity: 2, price: \"10.50\", total: \"21.00\" },\n      { id: randomUUID(), orderId: \"qr-order-1\", productId: \"10\", quantity: 1, price: \"15.00\", total: \"15.00\" },\n      { id: randomUUID(), orderId: \"qr-order-1\", productId: \"21\", quantity: 2, price: \"4.50\", total: \"9.00\" },\n      \n      { id: randomUUID(), orderId: \"qr-order-2\", productId: \"1\", quantity: 2, price: \"10.60\", total: \"21.20\" },\n      { id: randomUUID(), orderId: \"qr-order-2\", productId: \"7\", quantity: 3, price: \"10.50\", total: \"31.50\" },\n      { id: randomUUID(), orderId: \"qr-order-2\", productId: \"23\", quantity: 2, price: \"3.50\", total: \"7.00\" },\n      { id: randomUUID(), orderId: \"qr-order-2\", productId: \"24\", quantity: 1, price: \"3.00\", total: \"3.00\" },\n      \n      { id: randomUUID(), orderId: \"qr-order-3\", productId: \"12\", quantity: 2, price: \"9.00\", total: \"18.00\" },\n      { id: randomUUID(), orderId: \"qr-order-3\", productId: \"22\", quantity: 2, price: \"4.50\", total: \"9.00\" },\n    ];\n\n    qrOrderItems.forEach((item) => this.orderItems.set(item.id, item));\n\n    const expenseCategories: ExpenseCategory[] = [\n      { id: \"exp-cat-1\", name: \"Office Supplies\", description: \"Stationery, printing, and office materials\" },\n      { id: \"exp-cat-2\", name: \"Travel\", description: \"Transportation and travel expenses\" },\n      { id: \"exp-cat-3\", name: \"Utilities\", description: \"Electricity, water, and internet\" },\n      { id: \"exp-cat-4\", name: \"Food & Ingredients\", description: \"Raw materials and ingredients for kitchen\" },\n      { id: \"exp-cat-5\", name: \"Maintenance\", description: \"Repairs and maintenance\" },\n    ];\n\n    expenseCategories.forEach((cat) => this.expenseCategories.set(cat.id, cat));\n\n    const sampleExpenses: Expense[] = [\n      {\n        id: \"exp-1\",\n        expenseDate: new Date(\"2025-10-06T09:00:00\"),\n        categoryId: \"exp-cat-4\",\n        description: \"Fresh vegetables and meat\",\n        amount: \"250.00\",\n        unit: \"Kg\",\n        quantity: \"15.5\",\n        total: \"250.00\",\n        createdAt: new Date(\"2025-10-06T09:00:00\"),\n      },\n      {\n        id: \"exp-2\",\n        expenseDate: new Date(\"2025-10-05T14:30:00\"),\n        categoryId: \"exp-cat-3\",\n        description: \"Monthly electricity bill\",\n        amount: \"450.00\",\n        unit: \"Unit\",\n        quantity: \"1\",\n        total: \"450.00\",\n        createdAt: new Date(\"2025-10-05T14:30:00\"),\n      },\n      {\n        id: \"exp-3\",\n        expenseDate: new Date(\"2025-10-04T11:15:00\"),\n        categoryId: \"exp-cat-1\",\n        description: \"Printer paper and ink\",\n        amount: \"85.50\",\n        unit: \"Box\",\n        quantity: \"3\",\n        total: \"85.50\",\n        createdAt: new Date(\"2025-10-04T11:15:00\"),\n      },\n    ];\n\n    sampleExpenses.forEach((expense) => this.expenses.set(expense.id, expense));\n\n    // Sample purchases\n    const samplePurchases: Purchase[] = [\n      {\n        id: \"purchase-1\",\n        imageUrl: null,\n        categoryId: \"4\",\n        itemName: \"Fresh Vegetables\",\n        quantity: \"50\",\n        unit: \"Kg\",\n        price: \"5.00\",\n        purchaseDate: new Date(\"2025-10-06T08:00:00\"),\n        createdAt: new Date(\"2025-10-06T08:00:00\"),\n      },\n      {\n        id: \"purchase-2\",\n        imageUrl: null,\n        categoryId: \"4\",\n        itemName: \"Chicken Meat\",\n        quantity: \"30\",\n        unit: \"Kg\",\n        price: \"8.50\",\n        purchaseDate: new Date(\"2025-10-05T09:30:00\"),\n        createdAt: new Date(\"2025-10-05T09:30:00\"),\n      },\n      {\n        id: \"purchase-3\",\n        imageUrl: null,\n        categoryId: \"1\",\n        itemName: \"Rice\",\n        quantity: \"100\",\n        unit: \"Kg\",\n        price: \"2.50\",\n        purchaseDate: new Date(\"2025-10-04T10:00:00\"),\n        createdAt: new Date(\"2025-10-04T10:00:00\"),\n      },\n    ];\n\n    samplePurchases.forEach((purchase) => this.purchases.set(purchase.id, purchase));\n  }\n\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const category: Category = { ...insertCategory, id };\n    this.categories.set(id, category);\n    return category;\n  }\n\n  async updateCategory(id: string, updates: Partial<InsertCategory>): Promise<Category | undefined> {\n    const category = this.categories.get(id);\n    if (!category) return undefined;\n    const updated = { ...category, ...updates };\n    this.categories.set(id, updated);\n    return updated;\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    const exists = this.categories.has(id);\n    if (!exists) return false;\n    this.categories.delete(id);\n    return true;\n  }\n\n  async getProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async getProductsByCategory(categoryId: string): Promise<Product[]> {\n    return Array.from(this.products.values()).filter(\n      (product) => product.categoryId === categoryId\n    );\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = { \n      ...insertProduct, \n      id, \n      purchaseCost: insertProduct.purchaseCost ?? null,\n      imageUrl: insertProduct.imageUrl ?? null,\n      description: insertProduct.description ?? null,\n      unit: insertProduct.unit ?? \"piece\",\n      quantity: insertProduct.quantity ?? \"0\",\n      createdAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n    const updated = { ...product, ...updates };\n    this.products.set(id, updated);\n    return updated;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const exists = this.products.has(id);\n    if (!exists) return false;\n    this.products.delete(id);\n    return true;\n  }\n\n  async getTables(): Promise<Table[]> {\n    return Array.from(this.tables.values());\n  }\n\n  async getTable(id: string): Promise<Table | undefined> {\n    return this.tables.get(id);\n  }\n\n  async createTable(insertTable: InsertTable): Promise<Table> {\n    const id = randomUUID();\n    const table: Table = { \n      ...insertTable, \n      id, \n      capacity: insertTable.capacity ?? null,\n      description: insertTable.description ?? null,\n      status: insertTable.status ?? \"available\" \n    };\n    this.tables.set(id, table);\n    return table;\n  }\n\n  async updateTable(id: string, updates: Partial<InsertTable>): Promise<Table | undefined> {\n    const table = this.tables.get(id);\n    if (!table) return undefined;\n    const updated = { ...table, ...updates };\n    this.tables.set(id, updated);\n    return updated;\n  }\n\n  async updateTableStatus(id: string, status: string): Promise<Table | undefined> {\n    const table = this.tables.get(id);\n    if (!table) return undefined;\n    const updated = { ...table, status };\n    this.tables.set(id, updated);\n    return updated;\n  }\n\n  async deleteTable(id: string): Promise<boolean> {\n    const exists = this.tables.has(id);\n    if (!exists) return false;\n    this.tables.delete(id);\n    return true;\n  }\n\n  async getOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values());\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async getDraftOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(order => order.status === \"draft\");\n  }\n\n  async getQROrders(): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(order => order.orderSource === \"qr\" && order.status === \"qr-pending\");\n  }\n\n  async getCompletedOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(order => order.status === \"completed\");\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const orderNumber = `${this.orderCounter++}`;\n    const order: Order = {\n      ...insertOrder,\n      id,\n      orderNumber,\n      discountType: insertOrder.discountType ?? \"amount\",\n      createdAt: new Date(),\n      completedAt: null,\n      status: insertOrder.status ?? \"draft\",\n      diningOption: insertOrder.diningOption ?? \"dine-in\",\n      discount: insertOrder.discount ?? \"0\",\n      tableId: insertOrder.tableId ?? null,\n      customerName: insertOrder.customerName ?? null,\n      customerPhone: insertOrder.customerPhone ?? null,\n      orderSource: insertOrder.orderSource ?? \"pos\",\n      paymentStatus: insertOrder.paymentStatus ?? \"pending\",\n      paymentMethod: insertOrder.paymentMethod ?? null,\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async updateOrder(id: string, updates: Partial<InsertOrder>): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    const updated = { ...order, ...updates };\n    this.orders.set(id, updated);\n    return updated;\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    const updated = { ...order, status };\n    this.orders.set(id, updated);\n    return updated;\n  }\n\n  async deleteOrder(id: string): Promise<boolean> {\n    const exists = this.orders.has(id);\n    if (!exists) return false;\n    this.orders.delete(id);\n    const orderItems = Array.from(this.orderItems.values()).filter(\n      (item) => item.orderId === id\n    );\n    orderItems.forEach((item) => this.orderItems.delete(item.id));\n    return true;\n  }\n\n  async getOrderItems(orderId: string): Promise<OrderItem[]> {\n    return Array.from(this.orderItems.values()).filter(\n      (item) => item.orderId === orderId\n    );\n  }\n\n  async createOrderItem(insertOrderItem: InsertOrderItem): Promise<OrderItem> {\n    const id = randomUUID();\n    const orderItem: OrderItem = { ...insertOrderItem, id };\n    this.orderItems.set(id, orderItem);\n    return orderItem;\n  }\n\n  async createOrderWithItems(insertOrder: InsertOrder, items: InsertOrderItem[]): Promise<Order> {\n    const order = await this.createOrder(insertOrder);\n    for (const item of items) {\n      await this.createOrderItem({ ...item, orderId: order.id });\n    }\n    return order;\n  }\n\n  async deleteOrderItems(orderId: string): Promise<boolean> {\n    const items = await this.getOrderItems(orderId);\n    items.forEach((item) => this.orderItems.delete(item.id));\n    return true;\n  }\n\n  async getOrderItemsWithProducts(\n    orderId: string\n  ): Promise<(OrderItem & { product: Product })[]> {\n    const items = await this.getOrderItems(orderId);\n    return items\n      .map((item) => {\n        const product = this.products.get(item.productId);\n        if (!product) return null;\n        return { ...item, product };\n      })\n      .filter((item): item is OrderItem & { product: Product } => item !== null);\n  }\n\n  async getDashboardStats(startDate: Date, endDate: Date): Promise<{\n    todaySales: number;\n    todayOrders: number;\n    totalRevenue: number;\n    totalOrders: number;\n    totalExpenses: number;\n    totalSalary: number;\n    totalPurchase: number;\n  }> {\n    const orders = Array.from(this.orders.values());\n    const completedOrders = orders.filter(order => order.status === 'completed');\n    \n    const filteredOrders = completedOrders.filter(order => {\n      const orderDate = new Date(order.createdAt);\n      return orderDate >= startDate && orderDate <= endDate;\n    });\n\n    const todaySales = filteredOrders.reduce((sum, order) => sum + parseFloat(order.total), 0);\n    \n    // Calculate total purchase cost (COGS) for completed orders\n    let totalPurchaseCost = 0;\n    for (const order of completedOrders) {\n      const items = await this.getOrderItems(order.id);\n      for (const item of items) {\n        const product = this.products.get(item.productId);\n        if (product && product.purchaseCost) {\n          totalPurchaseCost += parseFloat(product.purchaseCost) * item.quantity;\n        }\n      }\n    }\n\n    // Calculate total discount from all completed orders\n    const totalDiscount = completedOrders.reduce((sum, order) => sum + parseFloat(order.discount), 0);\n\n    // Calculate Total Revenue = Total Sales - (Purchase Cost + Discount)\n    const totalSales = completedOrders.reduce((sum, order) => sum + parseFloat(order.total), 0);\n    const totalRevenue = totalSales - (totalPurchaseCost + totalDiscount);\n\n    // Calculate total expenses for the date range (includes both expenses and purchases)\n    const expenses = Array.from(this.expenses.values()).filter(expense => {\n      const expenseDate = new Date(expense.expenseDate);\n      return expenseDate >= startDate && expenseDate <= endDate;\n    });\n    const expensesTotal = expenses.reduce((sum, expense) => sum + parseFloat(expense.total), 0);\n\n    // Add purchases to total expenses\n    const purchasesForExpenses = Array.from(this.purchases.values()).filter(purchase => {\n      const purchaseDate = new Date(purchase.purchaseDate);\n      return purchaseDate >= startDate && purchaseDate <= endDate;\n    });\n    const purchasesExpenseTotal = purchasesForExpenses.reduce((sum, purchase) => {\n      return sum + (parseFloat(purchase.price) * parseFloat(purchase.quantity));\n    }, 0);\n\n    const totalExpenses = expensesTotal + purchasesExpenseTotal;\n\n    // Calculate total salary for the date range\n    const payrolls = Array.from(this.payroll.values()).filter(payroll => {\n      const payrollDate = new Date(payroll.createdAt);\n      return payrollDate >= startDate && payrollDate <= endDate;\n    });\n    const totalSalary = payrolls.reduce((sum, payroll) => sum + parseFloat(payroll.netSalary), 0);\n\n    // Calculate total purchase for the date range\n    const purchases = Array.from(this.purchases.values()).filter(purchase => {\n      const purchaseDate = new Date(purchase.purchaseDate);\n      return purchaseDate >= startDate && purchaseDate <= endDate;\n    });\n    const totalPurchase = purchases.reduce((sum, purchase) => {\n      return sum + (parseFloat(purchase.price) * parseFloat(purchase.quantity));\n    }, 0);\n\n    return {\n      todaySales,\n      todayOrders: filteredOrders.length,\n      totalRevenue,\n      totalOrders: completedOrders.length,\n      totalExpenses,\n      totalSalary,\n      totalPurchase,\n    };\n  }\n\n  async getSalesByCategory(startDate: Date, endDate: Date): Promise<Array<{ category: string; revenue: number }>> {\n    const orders = Array.from(this.orders.values()).filter(order => {\n      if (order.status !== 'completed') return false;\n      const orderDate = new Date(order.createdAt);\n      return orderDate >= startDate && orderDate <= endDate;\n    });\n    const categoryRevenue = new Map<string, number>();\n\n    for (const order of orders) {\n      const items = await this.getOrderItems(order.id);\n      for (const item of items) {\n        const product = this.products.get(item.productId);\n        if (product) {\n          const category = this.categories.get(product.categoryId);\n          if (category) {\n            const current = categoryRevenue.get(category.name) || 0;\n            categoryRevenue.set(category.name, current + parseFloat(item.total));\n          }\n        }\n      }\n    }\n\n    return Array.from(categoryRevenue.entries())\n      .map(([category, revenue]) => ({ category, revenue }))\n      .sort((a, b) => b.revenue - a.revenue);\n  }\n\n  async getSalesByPaymentMethod(startDate: Date, endDate: Date): Promise<Array<{ paymentMethod: string; amount: number }>> {\n    const filteredOrders = Array.from(this.orders.values()).filter(order => {\n      if (order.status !== 'completed') return false;\n      const orderDate = new Date(order.createdAt);\n      return orderDate >= startDate && orderDate <= endDate;\n    });\n\n    const paymentMethodTotals = new Map<string, number>();\n\n    for (const order of filteredOrders) {\n      const paymentMethod = order.paymentMethod || 'Not specified';\n      const current = paymentMethodTotals.get(paymentMethod) || 0;\n      paymentMethodTotals.set(paymentMethod, current + parseFloat(order.total));\n    }\n\n    return Array.from(paymentMethodTotals.entries())\n      .map(([paymentMethod, amount]) => ({ paymentMethod, amount }))\n      .sort((a, b) => b.amount - a.amount);\n  }\n\n  async getPopularProducts(startDate: Date, endDate: Date): Promise<Array<{ product: string; quantity: number; revenue: number }>> {\n    const orders = Array.from(this.orders.values()).filter(order => {\n      if (order.status !== 'completed') return false;\n      const orderDate = new Date(order.createdAt);\n      return orderDate >= startDate && orderDate <= endDate;\n    });\n    const productStats = new Map<string, { name: string; quantity: number; revenue: number }>();\n\n    for (const order of orders) {\n      const items = await this.getOrderItems(order.id);\n      for (const item of items) {\n        const product = this.products.get(item.productId);\n        if (product) {\n          const current = productStats.get(product.id) || { name: product.name, quantity: 0, revenue: 0 };\n          productStats.set(product.id, {\n            name: product.name,\n            quantity: current.quantity + item.quantity,\n            revenue: current.revenue + parseFloat(item.total),\n          });\n        }\n      }\n    }\n\n    return Array.from(productStats.values())\n      .map(({ name, quantity, revenue }) => ({ product: name, quantity, revenue }))\n      .sort((a, b) => b.quantity - a.quantity)\n      .slice(0, 5);\n  }\n\n  async getRecentOrders(startDate: Date, endDate: Date): Promise<Order[]> {\n    const orders = Array.from(this.orders.values())\n      .filter(order => {\n        if (order.status !== 'completed') return false;\n        const orderDate = new Date(order.createdAt);\n        return orderDate >= startDate && orderDate <= endDate;\n      })\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, 10);\n    return orders;\n  }\n\n  async getExpenseCategories(): Promise<ExpenseCategory[]> {\n    return Array.from(this.expenseCategories.values());\n  }\n\n  async getExpenseCategory(id: string): Promise<ExpenseCategory | undefined> {\n    return this.expenseCategories.get(id);\n  }\n\n  async createExpenseCategory(insertCategory: InsertExpenseCategory): Promise<ExpenseCategory> {\n    const id = randomUUID();\n    const category: ExpenseCategory = { ...insertCategory, id, description: insertCategory.description ?? null };\n    this.expenseCategories.set(id, category);\n    return category;\n  }\n\n  async updateExpenseCategory(id: string, updates: Partial<InsertExpenseCategory>): Promise<ExpenseCategory | undefined> {\n    const category = this.expenseCategories.get(id);\n    if (!category) return undefined;\n    const updated = { ...category, ...updates };\n    this.expenseCategories.set(id, updated);\n    return updated;\n  }\n\n  async deleteExpenseCategory(id: string): Promise<boolean> {\n    const exists = this.expenseCategories.has(id);\n    if (!exists) return false;\n    this.expenseCategories.delete(id);\n    return true;\n  }\n\n  async getExpenses(): Promise<Expense[]> {\n    return Array.from(this.expenses.values());\n  }\n\n  async getExpense(id: string): Promise<Expense | undefined> {\n    return this.expenses.get(id);\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<Expense> {\n    const id = randomUUID();\n    const expense: Expense = { ...insertExpense, id, createdAt: new Date() };\n    this.expenses.set(id, expense);\n    return expense;\n  }\n\n  async updateExpense(id: string, updates: Partial<InsertExpense>): Promise<Expense | undefined> {\n    const expense = this.expenses.get(id);\n    if (!expense) return undefined;\n    const updated = { ...expense, ...updates };\n    this.expenses.set(id, updated);\n    return updated;\n  }\n\n  async deleteExpense(id: string): Promise<boolean> {\n    const exists = this.expenses.has(id);\n    if (!exists) return false;\n    this.expenses.delete(id);\n    return true;\n  }\n\n  async getPurchases(): Promise<Purchase[]> {\n    return Array.from(this.purchases.values());\n  }\n\n  async getPurchase(id: string): Promise<Purchase | undefined> {\n    return this.purchases.get(id);\n  }\n\n  async createPurchase(insertPurchase: InsertPurchase): Promise<Purchase> {\n    const id = randomUUID();\n    const purchase: Purchase = {\n      ...insertPurchase,\n      id,\n      imageUrl: insertPurchase.imageUrl ?? null,\n      createdAt: new Date(),\n    };\n    this.purchases.set(id, purchase);\n    return purchase;\n  }\n\n  async updatePurchase(id: string, updates: Partial<InsertPurchase>): Promise<Purchase | undefined> {\n    const purchase = this.purchases.get(id);\n    if (!purchase) return undefined;\n    const updated = { ...purchase, ...updates };\n    this.purchases.set(id, updated);\n    return updated;\n  }\n\n  async deletePurchase(id: string): Promise<boolean> {\n    const exists = this.purchases.has(id);\n    if (!exists) return false;\n    this.purchases.delete(id);\n    return true;\n  }\n\n  async getEmployees(): Promise<Employee[]> {\n    return Array.from(this.employees.values());\n  }\n\n  async getEmployee(id: string): Promise<Employee | undefined> {\n    return this.employees.get(id);\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const id = randomUUID();\n    const employee: Employee = {\n      ...insertEmployee,\n      id,\n      photoUrl: insertEmployee.photoUrl ?? null,\n      email: insertEmployee.email ?? null,\n      phone: insertEmployee.phone ?? null,\n      status: insertEmployee.status ?? \"active\",\n      createdAt: new Date(),\n    };\n    this.employees.set(id, employee);\n    return employee;\n  }\n\n  async updateEmployee(id: string, updates: Partial<InsertEmployee>): Promise<Employee | undefined> {\n    const employee = this.employees.get(id);\n    if (!employee) return undefined;\n    const updated = { ...employee, ...updates };\n    this.employees.set(id, updated);\n    return updated;\n  }\n\n  async deleteEmployee(id: string): Promise<boolean> {\n    const exists = this.employees.has(id);\n    if (!exists) return false;\n    this.employees.delete(id);\n    return true;\n  }\n\n  async getAttendance(): Promise<Attendance[]> {\n    return Array.from(this.attendance.values());\n  }\n\n  async getAttendanceByDate(date: Date): Promise<Attendance[]> {\n    const targetDate = new Date(date).toDateString();\n    return Array.from(this.attendance.values()).filter((att) => {\n      return new Date(att.date).toDateString() === targetDate;\n    });\n  }\n\n  async getAttendanceByEmployee(employeeId: string): Promise<Attendance[]> {\n    return Array.from(this.attendance.values()).filter((att) => att.employeeId === employeeId);\n  }\n\n  async createAttendance(insertAttendance: InsertAttendance): Promise<Attendance> {\n    const id = randomUUID();\n    const attendance: Attendance = {\n      ...insertAttendance,\n      id,\n      checkIn: insertAttendance.checkIn ?? null,\n      checkOut: insertAttendance.checkOut ?? null,\n      createdAt: new Date(),\n    };\n    this.attendance.set(id, attendance);\n    return attendance;\n  }\n\n  async updateAttendance(id: string, updates: Partial<InsertAttendance>): Promise<Attendance | undefined> {\n    const attendance = this.attendance.get(id);\n    if (!attendance) return undefined;\n    const updated = { ...attendance, ...updates };\n    this.attendance.set(id, updated);\n    return updated;\n  }\n\n  async deleteAttendance(id: string): Promise<boolean> {\n    const exists = this.attendance.has(id);\n    if (!exists) return false;\n    this.attendance.delete(id);\n    return true;\n  }\n\n  async getLeaves(): Promise<Leave[]> {\n    return Array.from(this.leaves.values());\n  }\n\n  async getLeave(id: string): Promise<Leave | undefined> {\n    return this.leaves.get(id);\n  }\n\n  async getLeavesByEmployee(employeeId: string): Promise<Leave[]> {\n    return Array.from(this.leaves.values()).filter((leave) => leave.employeeId === employeeId);\n  }\n\n  async createLeave(insertLeave: InsertLeave): Promise<Leave> {\n    const id = randomUUID();\n    const leave: Leave = {\n      ...insertLeave,\n      id,\n      reason: insertLeave.reason ?? null,\n      status: insertLeave.status ?? \"pending\",\n      createdAt: new Date(),\n    };\n    this.leaves.set(id, leave);\n    return leave;\n  }\n\n  async updateLeave(id: string, updates: Partial<InsertLeave>): Promise<Leave | undefined> {\n    const leave = this.leaves.get(id);\n    if (!leave) return undefined;\n    const updated = { ...leave, ...updates };\n    this.leaves.set(id, updated);\n    return updated;\n  }\n\n  async deleteLeave(id: string): Promise<boolean> {\n    const exists = this.leaves.has(id);\n    if (!exists) return false;\n    this.leaves.delete(id);\n    return true;\n  }\n\n  async getPayroll(): Promise<Payroll[]> {\n    return Array.from(this.payroll.values());\n  }\n\n  async getPayrollById(id: string): Promise<Payroll | undefined> {\n    return this.payroll.get(id);\n  }\n\n  async getPayrollByEmployee(employeeId: string): Promise<Payroll[]> {\n    return Array.from(this.payroll.values()).filter((pay) => pay.employeeId === employeeId);\n  }\n\n  async createPayroll(insertPayroll: InsertPayroll): Promise<Payroll> {\n    const id = randomUUID();\n    const payroll: Payroll = {\n      ...insertPayroll,\n      id,\n      bonus: insertPayroll.bonus ?? \"0\",\n      deductions: insertPayroll.deductions ?? \"0\",\n      status: insertPayroll.status ?? \"pending\",\n      createdAt: new Date(),\n    };\n    this.payroll.set(id, payroll);\n    return payroll;\n  }\n\n  async updatePayroll(id: string, updates: Partial<InsertPayroll>): Promise<Payroll | undefined> {\n    const payroll = this.payroll.get(id);\n    if (!payroll) return undefined;\n    const updated = { ...payroll, ...updates };\n    this.payroll.set(id, updated);\n    return updated;\n  }\n\n  async deletePayroll(id: string): Promise<boolean> {\n    const exists = this.payroll.has(id);\n    if (!exists) return false;\n    this.payroll.delete(id);\n    return true;\n  }\n\n  async getSettings(): Promise<Settings | undefined> {\n    if (this.settings === null) {\n      const defaultSettings: Settings = {\n        id: randomUUID(),\n        businessName: \"BondPos POS\",\n        businessLogo: null,\n        address: null,\n        phone: null,\n        email: null,\n        dateFormat: \"dd-mm-yyyy\",\n        timeFormat: \"12h\",\n        terminalId: null,\n        paymentCash: \"true\",\n        paymentCard: \"true\",\n        paymentAba: \"true\",\n        paymentAcleda: \"true\",\n        paymentCredit: \"true\",\n        defaultPaymentMethod: \"cash\",\n        minTransactionAmount: \"0\",\n        maxTransactionAmount: null,\n        vatRate: \"0\",\n        serviceTaxRate: \"0\",\n        defaultDiscount: \"0\",\n        enablePercentageDiscount: \"true\",\n        enableFixedDiscount: \"true\",\n        maxDiscount: \"50\",\n        invoicePrefix: \"INV-\",\n        receiptHeader: null,\n        receiptFooter: null,\n        receiptLogo: null,\n        autoPrintReceipt: \"false\",\n        showLogoOnReceipt: \"true\",\n        includeTaxBreakdown: \"true\",\n        receiptPrinter: \"default\",\n        kitchenPrinter: \"none\",\n        paperSize: \"80mm\",\n        enableBarcodeScanner: \"false\",\n        enableCashDrawer: \"true\",\n        currency: \"usd\",\n        language: \"en\",\n        decimalPlaces: \"2\",\n        roundingRule: \"nearest\",\n        currencySymbolPosition: \"before\",\n        autoBackup: \"true\",\n        backupFrequency: \"daily\",\n        backupStorage: \"cloud\",\n        lowStockAlerts: \"true\",\n        stockThreshold: 10,\n        saleNotifications: \"false\",\n        discountAlerts: \"false\",\n        systemUpdateNotifications: \"true\",\n        notificationEmail: null,\n        colorTheme: \"orange\",\n        layoutPreference: \"grid\",\n        fontSize: \"medium\",\n        compactMode: \"false\",\n        showAnimations: \"true\",\n        permAccessReports: \"true\",\n        permAccessSettings: \"false\",\n        permProcessRefunds: \"false\",\n        permManageInventory: \"true\",\n        updatedAt: new Date(),\n      };\n      this.settings = defaultSettings;\n    }\n    return this.settings;\n  }\n\n  async updateSettings(updates: Partial<InsertSettings>): Promise<Settings> {\n    if (this.settings === null) {\n      await this.getSettings();\n    }\n    this.settings = {\n      ...this.settings!,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    return this.settings;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":48754},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  purchaseCost: decimal(\"purchase_cost\", { precision: 10, scale: 2 }),\n  categoryId: varchar(\"category_id\").notNull(),\n  imageUrl: text(\"image_url\"),\n  unit: text(\"unit\").notNull().default(\"piece\"),\n  description: text(\"description\"),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\nexport const tables = pgTable(\"tables\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tableNumber: text(\"table_number\").notNull().unique(),\n  capacity: text(\"capacity\"),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"available\"),\n});\n\nexport const insertTableSchema = createInsertSchema(tables).omit({\n  id: true,\n});\n\nexport type InsertTable = z.infer<typeof insertTableSchema>;\nexport type Table = typeof tables.$inferSelect;\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderNumber: text(\"order_number\").notNull().unique(),\n  tableId: varchar(\"table_id\"),\n  diningOption: text(\"dining_option\").notNull().default(\"dine-in\"),\n  customerName: text(\"customer_name\"),\n  customerPhone: text(\"customer_phone\"),\n  orderSource: text(\"order_source\").notNull().default(\"pos\"),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  discount: decimal(\"discount\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  discountType: text(\"discount_type\").notNull().default(\"amount\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"draft\"),\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"),\n  paymentMethod: text(\"payment_method\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  orderNumber: true,\n  createdAt: true,\n});\n\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\n\nexport const expenseCategories = pgTable(\"expense_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n});\n\nexport const insertExpenseCategorySchema = createInsertSchema(expenseCategories).omit({\n  id: true,\n});\n\nexport type InsertExpenseCategory = z.infer<typeof insertExpenseCategorySchema>;\nexport type ExpenseCategory = typeof expenseCategories.$inferSelect;\n\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  expenseDate: timestamp(\"expense_date\").notNull(),\n  categoryId: varchar(\"category_id\").notNull(),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  unit: text(\"unit\").notNull(),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type Expense = typeof expenses.$inferSelect;\n\nexport const purchases = pgTable(\"purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  imageUrl: text(\"image_url\"),\n  categoryId: varchar(\"category_id\").notNull(),\n  itemName: text(\"item_name\").notNull(),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  unit: text(\"unit\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  purchaseDate: timestamp(\"purchase_date\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertPurchaseSchema = createInsertSchema(purchases).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertPurchase = z.infer<typeof insertPurchaseSchema>;\nexport type Purchase = typeof purchases.$inferSelect;\n\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: text(\"employee_id\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  position: text(\"position\").notNull(),\n  department: text(\"department\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  joiningDate: timestamp(\"joining_date\").notNull(),\n  salary: decimal(\"salary\", { precision: 10, scale: 2 }).notNull(),\n  photoUrl: text(\"photo_url\"),\n  status: text(\"status\").notNull().default(\"active\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type Employee = typeof employees.$inferSelect;\n\nexport const attendance = pgTable(\"attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  checkIn: text(\"check_in\"),\n  checkOut: text(\"check_out\"),\n  status: text(\"status\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type Attendance = typeof attendance.$inferSelect;\n\nexport const leaves = pgTable(\"leaves\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  leaveType: text(\"leave_type\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  reason: text(\"reason\"),\n  status: text(\"status\").notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertLeaveSchema = createInsertSchema(leaves).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertLeave = z.infer<typeof insertLeaveSchema>;\nexport type Leave = typeof leaves.$inferSelect;\n\nexport const payroll = pgTable(\"payroll\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull(),\n  month: text(\"month\").notNull(),\n  year: text(\"year\").notNull(),\n  baseSalary: decimal(\"base_salary\", { precision: 10, scale: 2 }).notNull(),\n  bonus: decimal(\"bonus\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  deductions: decimal(\"deductions\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  netSalary: decimal(\"net_salary\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertPayrollSchema = createInsertSchema(payroll).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertPayroll = z.infer<typeof insertPayrollSchema>;\nexport type Payroll = typeof payroll.$inferSelect;\n\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  businessName: text(\"business_name\").notNull().default(\"BondPos POS\"),\n  businessLogo: text(\"business_logo\"),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  dateFormat: text(\"date_format\").notNull().default(\"dd-mm-yyyy\"),\n  timeFormat: text(\"time_format\").notNull().default(\"12h\"),\n  terminalId: text(\"terminal_id\"),\n  \n  paymentCash: text(\"payment_cash\").notNull().default(\"true\"),\n  paymentCard: text(\"payment_card\").notNull().default(\"true\"),\n  paymentAba: text(\"payment_aba\").notNull().default(\"true\"),\n  paymentAcleda: text(\"payment_acleda\").notNull().default(\"true\"),\n  paymentCredit: text(\"payment_credit\").notNull().default(\"true\"),\n  defaultPaymentMethod: text(\"default_payment_method\").notNull().default(\"cash\"),\n  minTransactionAmount: decimal(\"min_transaction_amount\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  maxTransactionAmount: decimal(\"max_transaction_amount\", { precision: 10, scale: 2 }),\n  \n  vatRate: decimal(\"vat_rate\", { precision: 5, scale: 2 }).notNull().default(\"0\"),\n  serviceTaxRate: decimal(\"service_tax_rate\", { precision: 5, scale: 2 }).notNull().default(\"0\"),\n  defaultDiscount: decimal(\"default_discount\", { precision: 5, scale: 2 }).notNull().default(\"0\"),\n  enablePercentageDiscount: text(\"enable_percentage_discount\").notNull().default(\"true\"),\n  enableFixedDiscount: text(\"enable_fixed_discount\").notNull().default(\"true\"),\n  maxDiscount: decimal(\"max_discount\", { precision: 5, scale: 2 }).notNull().default(\"50\"),\n  \n  invoicePrefix: text(\"invoice_prefix\").notNull().default(\"INV-\"),\n  receiptHeader: text(\"receipt_header\"),\n  receiptFooter: text(\"receipt_footer\"),\n  receiptLogo: text(\"receipt_logo\"),\n  autoPrintReceipt: text(\"auto_print_receipt\").notNull().default(\"false\"),\n  showLogoOnReceipt: text(\"show_logo_on_receipt\").notNull().default(\"true\"),\n  includeTaxBreakdown: text(\"include_tax_breakdown\").notNull().default(\"true\"),\n  \n  receiptPrinter: text(\"receipt_printer\").notNull().default(\"default\"),\n  kitchenPrinter: text(\"kitchen_printer\").notNull().default(\"none\"),\n  paperSize: text(\"paper_size\").notNull().default(\"80mm\"),\n  enableBarcodeScanner: text(\"enable_barcode_scanner\").notNull().default(\"false\"),\n  enableCashDrawer: text(\"enable_cash_drawer\").notNull().default(\"true\"),\n  \n  currency: text(\"currency\").notNull().default(\"usd\"),\n  language: text(\"language\").notNull().default(\"en\"),\n  decimalPlaces: text(\"decimal_places\").notNull().default(\"2\"),\n  roundingRule: text(\"rounding_rule\").notNull().default(\"nearest\"),\n  currencySymbolPosition: text(\"currency_symbol_position\").notNull().default(\"before\"),\n  \n  autoBackup: text(\"auto_backup\").notNull().default(\"true\"),\n  backupFrequency: text(\"backup_frequency\").notNull().default(\"daily\"),\n  backupStorage: text(\"backup_storage\").notNull().default(\"cloud\"),\n  \n  lowStockAlerts: text(\"low_stock_alerts\").notNull().default(\"true\"),\n  stockThreshold: integer(\"stock_threshold\").notNull().default(10),\n  saleNotifications: text(\"sale_notifications\").notNull().default(\"false\"),\n  discountAlerts: text(\"discount_alerts\").notNull().default(\"false\"),\n  systemUpdateNotifications: text(\"system_update_notifications\").notNull().default(\"true\"),\n  notificationEmail: text(\"notification_email\"),\n  \n  colorTheme: text(\"color_theme\").notNull().default(\"orange\"),\n  layoutPreference: text(\"layout_preference\").notNull().default(\"grid\"),\n  fontSize: text(\"font_size\").notNull().default(\"medium\"),\n  compactMode: text(\"compact_mode\").notNull().default(\"false\"),\n  showAnimations: text(\"show_animations\").notNull().default(\"true\"),\n  \n  permAccessReports: text(\"perm_access_reports\").notNull().default(\"true\"),\n  permAccessSettings: text(\"perm_access_settings\").notNull().default(\"false\"),\n  permProcessRefunds: text(\"perm_process_refunds\").notNull().default(\"false\"),\n  permManageInventory: text(\"perm_manage_inventory\").notNull().default(\"true\"),\n  \n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertSettingsSchema = createInsertSchema(settings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type InsertSettings = z.infer<typeof insertSettingsSchema>;\nexport type Settings = typeof settings.$inferSelect;\n","size_bytes":13074},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient, apiRequest } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Grid3x3 } from \"lucide-react\";\nimport { QRMenuOrdersModal } from \"@/components/qr-menu-orders-modal\";\nimport { DraftListModal } from \"@/components/draft-list-modal\";\nimport { ReceiptPrintModal } from \"@/components/receipt-print-modal\";\nimport { TableOrderModal } from \"@/components/table-order-modal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Order, OrderItem, Product, Table } from \"@shared/schema\";\nimport POS from \"@/pages/pos\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Tables from \"@/pages/tables\";\nimport SalesManage from \"@/pages/sales\";\nimport ExpenseManage from \"@/pages/expenses\";\nimport ItemManage from \"@/pages/items\";\nimport PurchaseManage from \"@/pages/purchases\";\nimport HRM from \"@/pages/hrm\";\nimport Reports from \"@/pages/reports\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={POS} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/tables\" component={Tables} />\n      <Route path=\"/sales\" component={SalesManage} />\n      <Route path=\"/expenses\" component={ExpenseManage} />\n      <Route path=\"/items\" component={ItemManage} />\n      <Route path=\"/purchases\" component={PurchaseManage} />\n      <Route path=\"/hrm\" component={HRM} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppHeader() {\n  const [location] = useLocation();\n  const isPOSPage = location === \"/\";\n  const [qrOrdersOpen, setQrOrdersOpen] = useState(false);\n  const [draftListModalOpen, setDraftListModalOpen] = useState(false);\n  const [tableOrderModalOpen, setTableOrderModalOpen] = useState(false);\n  const [receiptModalOpen, setReceiptModalOpen] = useState(false);\n  const [receiptData, setReceiptData] = useState<any>(null);\n  const { toast } = useToast();\n\n  const { data: orders = [] } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: tables = [] } = useQuery<Table[]>({\n    queryKey: [\"/api/tables\"],\n  });\n\n  const draftOrders = orders.filter((order) => order.status === \"draft\");\n\n  const deleteOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      return await apiRequest(\"DELETE\", `/api/orders/${orderId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Success\",\n        description: \"Draft order deleted\",\n      });\n    },\n  });\n\n  const handleEditDraft = async (orderId: string) => {\n    // Dispatch custom event to notify POS page to load this draft\n    if (location !== \"/\") {\n      toast({\n        title: \"Navigate to POS\",\n        description: \"Please go to the POS page to edit draft orders\",\n      });\n      return;\n    }\n    window.dispatchEvent(new CustomEvent('loadDraft', { detail: { orderId } }));\n    setDraftListModalOpen(false);\n    toast({\n      title: \"Draft Loaded\",\n      description: \"Draft order has been loaded to the cart for editing\",\n    });\n  };\n\n  const handlePrintDraft = async (orderId: string) => {\n    // Dispatch custom event to notify POS page to show payment modal for this draft\n    if (location !== \"/\") {\n      toast({\n        title: \"Navigate to POS\",\n        description: \"Please go to the POS page to print draft orders\",\n      });\n      return;\n    }\n    window.dispatchEvent(new CustomEvent('printDraft', { detail: { orderId } }));\n    setDraftListModalOpen(false);\n  };\n\n  const handleDeleteDraft = (orderId: string) => {\n    deleteOrderMutation.mutate(orderId);\n  };\n\n  const handlePrintReceipt = () => {\n    toast({\n      title: \"Receipt Printed\",\n      description: \"Receipt has been sent to printer\",\n    });\n  };\n\n  return (\n    <>\n      <header className=\"h-14 border-b border-border bg-background px-4 flex items-center gap-4\">\n        <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n        <div className=\"flex-1\" />\n        {isPOSPage && (\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" className=\"gap-2\" data-testid=\"button-new-order\">\n              <Plus className=\"w-4 h-4\" />\n              New\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"gap-2\" \n              onClick={() => setQrOrdersOpen(true)}\n              data-testid=\"button-menu-orders\"\n            >\n              <Grid3x3 className=\"w-4 h-4\" />\n              QR Menu Orders\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => setDraftListModalOpen(true)}\n              data-testid=\"button-draft-list\"\n              className=\"gap-2\"\n            >\n              Draft List\n              {draftOrders.length > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-1\" data-testid=\"badge-draft-count\">\n                  {draftOrders.length}\n                </Badge>\n              )}\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => setTableOrderModalOpen(true)}\n              data-testid=\"button-table-order\"\n              className=\"gap-2\"\n            >\n              Table Order\n              {tables.length > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-1\" data-testid=\"badge-table-count\">\n                  {tables.length}\n                </Badge>\n              )}\n            </Button>\n          </div>\n        )}\n        <ThemeToggle />\n      </header>\n      <QRMenuOrdersModal open={qrOrdersOpen} onOpenChange={setQrOrdersOpen} />\n      <DraftListModal\n        open={draftListModalOpen}\n        onClose={() => setDraftListModalOpen(false)}\n        draftOrders={draftOrders}\n        onEditDraft={handleEditDraft}\n        onPrintDraft={handlePrintDraft}\n        onDeleteDraft={handleDeleteDraft}\n      />\n      <TableOrderModal\n        open={tableOrderModalOpen}\n        onClose={() => setTableOrderModalOpen(false)}\n        tables={tables}\n      />\n      {receiptData && (\n        <ReceiptPrintModal\n          open={receiptModalOpen}\n          onClose={() => setReceiptModalOpen(false)}\n          order={receiptData}\n          onPrint={handlePrintReceipt}\n        />\n      )}\n    </>\n  );\n}\n\nexport default function App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <SidebarProvider style={style as React.CSSProperties}>\n          <div className=\"flex h-screen w-full\">\n            <AppSidebar />\n            <div className=\"flex flex-col flex-1\">\n              <AppHeader />\n              <main className=\"flex-1 overflow-hidden\">\n                <Router />\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":7770},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 240deg 42.86% 93.14%;\n\n  --foreground: 0 0% 15%;\n\n  --border: 0 0% 90%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 0 0% 15%;\n\n  --card-border: 0 0% 88%;\n\n  --sidebar: 0 0% 99%;\n\n  --sidebar-foreground: 0 0% 15%;\n\n  --sidebar-border: 0 0% 92%;\n\n  --sidebar-primary: 18 95% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 18 15% 95%;\n\n  --sidebar-accent-foreground: 0 0% 15%;\n\n  --sidebar-ring: 18 95% 60%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 0 0% 15%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 18 95% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 94%;\n\n  --secondary-foreground: 0 0% 15%;\n\n  --muted: 0 0% 96%;\n\n  --muted-foreground: 0 0% 45%;\n\n  --accent: 18 12% 96%;\n\n  --accent-foreground: 0 0% 15%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 80%;\n  --ring: 18 95% 60%;\n  --chart-1: 18 95% 50%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 45 93% 57%;\n  --chart-4: 220 90% 56%;\n  --chart-5: 280 65% 60%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"Roboto Mono\", Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.08), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.10), 0px 3px 6px -2px hsl(0 0% 0% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.12), 0px 4px 8px -2px hsl(0 0% 0% / 0.08);\n  --shadow-xl: 0px 20px 30px -8px hsl(0 0% 0% / 0.15), 0px 8px 12px -4px hsl(0 0% 0% / 0.10);\n  --shadow-2xl: 0px 25px 40px -12px hsl(0 0% 0% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 10%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 0 0% 25%;\n\n  --card: 0 0% 15%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 0 0% 20%;\n\n  --sidebar: 0 0% 13%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 0 0% 18%;\n\n  --sidebar-primary: 18 85% 45%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 18 15% 18%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 18 85% 45%;\n\n  --popover: 0 0% 16%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 0 0% 22%;\n\n  --primary: 18 85% 45%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 20%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 0 0% 18%;\n\n  --muted-foreground: 0 0% 60%;\n\n  --accent: 18 12% 18%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 75% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 35%;\n  --ring: 18 85% 45%;\n  --chart-1: 18 95% 65%;\n  --chart-2: 142 71% 55%;\n  --chart-3: 45 93% 67%;\n  --chart-4: 220 90% 66%;\n  --chart-5: 280 65% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.15);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.30), 0px 2px 4px -1px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.35), 0px 3px 6px -2px hsl(0 0% 0% / 0.25);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.40), 0px 4px 8px -2px hsl(0 0% 0% / 0.30);\n  --shadow-xl: 0px 20px 30px -8px hsl(0 0% 0% / 0.45), 0px 8px 12px -4px hsl(0 0% 0% / 0.35);\n  --shadow-2xl: 0px 25px 40px -12px hsl(0 0% 0% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10231},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/app-sidebar.tsx":{"content":"import {\n  LayoutDashboard,\n  ShoppingCart,\n  Table2,\n  TrendingUp,\n  Wallet,\n  Package,\n  ShoppingBag,\n  UserCog,\n  BarChart3,\n  Settings,\n  Utensils,\n  User,\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nconst menuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/dashboard\",\n    icon: LayoutDashboard,\n  },\n  {\n    title: \"POS\",\n    url: \"/\",\n    icon: ShoppingCart,\n  },\n  {\n    title: \"Table\",\n    url: \"/tables\",\n    icon: Table2,\n  },\n  {\n    title: \"Sales manage\",\n    url: \"/sales\",\n    icon: TrendingUp,\n  },\n  {\n    title: \"Expense Manage\",\n    url: \"/expenses\",\n    icon: Wallet,\n  },\n  {\n    title: \"Item Manage\",\n    url: \"/items\",\n    icon: Package,\n  },\n  {\n    title: \"Purchase Manage\",\n    url: \"/purchases\",\n    icon: ShoppingBag,\n  },\n  {\n    title: \"HRM\",\n    url: \"/hrm\",\n    icon: UserCog,\n  },\n  {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-6 border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-3 justify-center\">\n          <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-primary to-orange-600 flex items-center justify-center shadow-lg\">\n            <Utensils className=\"w-6 h-6 text-primary-foreground\" />\n          </div>\n          <span className=\"text-xl font-bold bg-gradient-to-r from-primary to-orange-600 bg-clip-text text-transparent\">\n            BondPos\n          </span>\n        </div>\n      </SidebarHeader>\n      <SidebarContent className=\"px-4 py-6\">\n        <div className=\"space-y-2\">\n          {menuItems.map((item) => {\n            const isActive = location === item.url;\n            const Icon = item.icon;\n            \n            return (\n              <Link\n                key={item.title}\n                href={item.url}\n                data-testid={`link-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <div className=\"group flex items-center gap-4 py-2 px-3 rounded-full transition-all duration-200 hover-elevate active-elevate-2 cursor-pointer\">\n                  <div\n                    className={cn(\n                      \"w-12 h-12 rounded-full flex items-center justify-center transition-all duration-200 shadow-md\",\n                      isActive\n                        ? \"bg-gradient-to-br from-primary to-orange-600 text-primary-foreground scale-105 shadow-lg\"\n                        : \"bg-sidebar-accent text-sidebar-accent-foreground group-hover:scale-110 group-hover:shadow-lg\"\n                    )}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                  </div>\n                  <span\n                    className={cn(\n                      \"text-sm font-medium transition-all duration-200\",\n                      isActive\n                        ? \"text-primary font-semibold\"\n                        : \"text-sidebar-foreground group-hover:text-primary\"\n                    )}\n                  >\n                    {item.title}\n                  </span>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </SidebarContent>\n      <SidebarFooter className=\"p-4 border-t border-sidebar-border\">\n        <div className=\"flex items-center gap-3 px-2\" data-testid=\"sidebar-profile\">\n          <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-primary to-orange-600 flex items-center justify-center shadow-md\">\n            <User className=\"w-5 h-5 text-primary-foreground\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium truncate\">Mohid Zaman</p>\n            <p className=\"text-xs text-muted-foreground truncate\">Product Designer</p>\n          </div>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":4172},"client/src/components/order-panel.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Minus, Plus, X, Search, Printer, CreditCard, FileText, Utensils } from \"lucide-react\";\nimport type { Product, Table } from \"@shared/schema\";\n\nexport interface OrderItemData {\n  product: Product;\n  quantity: number;\n}\n\ninterface OrderPanelProps {\n  orderItems: OrderItemData[];\n  onUpdateQuantity: (productId: string, quantity: number) => void;\n  onRemoveItem: (productId: string) => void;\n  onClearOrder: () => void;\n  onSaveDraft: () => void;\n  onProcessPayment: (type: \"kot\" | \"bill\" | \"print\") => void;\n  orderNumber: string;\n  selectedTable: string | null;\n  onSelectTable: (tableId: string) => void;\n  tables: Table[];\n  diningOption: string;\n  onChangeDiningOption: (option: string) => void;\n  searchInPacking: string;\n  onSearchInPacking: (value: string) => void;\n  manualDiscount: number;\n  onManualDiscountChange: (discount: number) => void;\n  discountType: 'amount' | 'percentage';\n  onDiscountTypeChange: (type: 'amount' | 'percentage') => void;\n  onDiscountChange?: (value: number, type: 'amount' | 'percentage') => void;\n}\n\nconst PRESET_PERCENTAGES = [5, 10, 15, 20];\n\nexport function OrderPanel({\n  orderItems,\n  onUpdateQuantity,\n  onRemoveItem,\n  onClearOrder,\n  onSaveDraft,\n  onProcessPayment,\n  orderNumber,\n  selectedTable,\n  onSelectTable,\n  tables,\n  diningOption,\n  onChangeDiningOption,\n  searchInPacking,\n  onSearchInPacking,\n  manualDiscount,\n  onManualDiscountChange,\n  discountType,\n  onDiscountTypeChange,\n  onDiscountChange,\n}: OrderPanelProps) {\n  const subtotal = orderItems.reduce(\n    (sum, item) => sum + parseFloat(item.product.price) * item.quantity,\n    0\n  );\n  \n  // Calculate actual discount amount based on type\n  const discountAmount = discountType === 'percentage' \n    ? (subtotal * manualDiscount) / 100 \n    : manualDiscount;\n  \n  const total = subtotal - discountAmount;\n  \n  // Derive active preset from current discount value\n  const activePreset = discountType === 'percentage' && PRESET_PERCENTAGES.includes(manualDiscount) \n    ? manualDiscount \n    : null;\n  \n  const handlePresetClick = (percentage: number) => {\n    // Use combined handler if available to avoid race conditions\n    if (onDiscountChange) {\n      onDiscountChange(percentage, 'percentage');\n    } else {\n      onDiscountTypeChange('percentage');\n      onManualDiscountChange(percentage);\n    }\n  };\n  \n  const handleDiscountTypeChange = (type: 'amount' | 'percentage') => {\n    if (onDiscountChange) {\n      onDiscountChange(0, type);\n    } else {\n      onDiscountTypeChange(type);\n      onManualDiscountChange(0);\n    }\n  };\n\n  return (\n    <div className=\"w-80 border-l border-border bg-card flex flex-col h-full\">\n      <div className=\"p-4 border-b border-border space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold\">Order Summary</h2>\n          {orderItems.length > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClearOrder}\n              data-testid=\"button-clear-order\"\n            >\n              Clear All\n            </Button>\n          )}\n        </div>\n        \n        <Select value={selectedTable || \"\"} onValueChange={onSelectTable}>\n          <SelectTrigger data-testid=\"select-table\">\n            <SelectValue placeholder=\"Select Table\" />\n          </SelectTrigger>\n          <SelectContent>\n            {tables.map((table) => (\n              <SelectItem key={table.id} value={table.id}>\n                Table {table.tableNumber}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4 space-y-3\">\n          {orderItems.length === 0 ? (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <p className=\"text-sm\">No items in order</p>\n              <p className=\"text-xs mt-1\">Add products to get started</p>\n            </div>\n          ) : (\n            orderItems.map((item) => (\n              <Card key={item.product.id} className=\"p-3\" data-testid={`card-order-item-${item.product.id}`}>\n                <div className=\"flex gap-3\">\n                  <div className=\"w-16 h-16 rounded-md bg-muted overflow-hidden flex-shrink-0\">\n                    {item.product.imageUrl ? (\n                      <img\n                        src={item.product.imageUrl}\n                        alt={item.product.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-muted to-accent\">\n                        <Utensils className=\"w-6 h-6 text-muted-foreground\" />\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between gap-2 mb-2\">\n                      <h4 className=\"font-medium text-sm truncate\">\n                        {item.product.name}\n                      </h4>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-6 w-6 flex-shrink-0\"\n                        onClick={() => onRemoveItem(item.product.id)}\n                        data-testid={`button-remove-item-${item.product.id}`}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          className=\"h-7 w-7\"\n                          onClick={() => onUpdateQuantity(item.product.id, item.quantity - 1)}\n                          disabled={item.quantity <= 1}\n                          data-testid={`button-decrease-${item.product.id}`}\n                        >\n                          <Minus className=\"h-3 w-3\" />\n                        </Button>\n                        <span className=\"w-8 text-center font-medium font-mono\" data-testid={`text-quantity-${item.product.id}`}>\n                          {item.quantity}\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          className=\"h-7 w-7\"\n                          onClick={() => onUpdateQuantity(item.product.id, item.quantity + 1)}\n                          data-testid={`button-increase-${item.product.id}`}\n                        >\n                          <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                      \n                      <span className=\"font-semibold text-sm font-mono\" data-testid={`text-item-total-${item.product.id}`}>\n                        ${(parseFloat(item.product.price) * item.quantity).toFixed(2)}\n                      </span>\n                    </div>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-auto p-0 text-xs text-muted-foreground mt-1\"\n                      data-testid={`button-add-notes-${item.product.id}`}\n                    >\n                      + Add Notes\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n      </ScrollArea>\n\n      <div className=\"p-4 border-t border-border space-y-4\">\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Sub total :</span>\n            <span className=\"font-mono\" data-testid=\"text-subtotal\">${subtotal.toFixed(2)}</span>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center gap-2\">\n              <span className=\"text-muted-foreground\">Discount :</span>\n              <div className=\"flex items-center gap-1\">\n                <Button\n                  variant={discountType === 'amount' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  className=\"h-7 px-2 text-xs\"\n                  onClick={() => handleDiscountTypeChange('amount')}\n                  data-testid=\"button-discount-amount\"\n                >\n                  $\n                </Button>\n                <Button\n                  variant={discountType === 'percentage' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  className=\"h-7 px-2 text-xs\"\n                  onClick={() => handleDiscountTypeChange('percentage')}\n                  data-testid=\"button-discount-percentage\"\n                >\n                  %\n                </Button>\n                <div className=\"relative\">\n                  <Input\n                    type=\"number\"\n                    min=\"0\"\n                    max={discountType === 'percentage' ? 100 : subtotal}\n                    step={discountType === 'percentage' ? '1' : '0.01'}\n                    value={manualDiscount || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0;\n                      const maxValue = discountType === 'percentage' ? 100 : subtotal;\n                      onManualDiscountChange(Math.min(Math.max(0, value), maxValue));\n                    }}\n                    className=\"w-20 h-7 text-right font-mono pr-6\"\n                    placeholder={discountType === 'percentage' ? '0' : '0.00'}\n                    data-testid=\"input-discount-value\"\n                  />\n                  {discountType === 'percentage' && (\n                    <span className=\"absolute right-2 top-1/2 -translate-y-1/2 text-sm text-muted-foreground pointer-events-none\">\n                      %\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            {discountType === 'percentage' && (\n              <div className=\"flex justify-end gap-1 flex-wrap\">\n                {PRESET_PERCENTAGES.map((percentage) => (\n                  <Button\n                    key={percentage}\n                    variant={activePreset === percentage ? 'default' : 'ghost'}\n                    size=\"sm\"\n                    className=\"h-6 px-2 text-xs\"\n                    onClick={() => handlePresetClick(percentage)}\n                    data-testid={`button-preset-${percentage}`}\n                  >\n                    {percentage}%\n                  </Button>\n                ))}\n              </div>\n            )}\n            \n            {discountType === 'percentage' && manualDiscount > 0 && (\n              <div className=\"flex justify-end text-xs text-muted-foreground\">\n                Discount: ${discountAmount.toFixed(2)}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"h-px bg-border my-2\" />\n          <div className=\"flex justify-between font-semibold text-base\">\n            <span>Total :</span>\n            <span className=\"font-mono\" data-testid=\"text-total\">${total.toFixed(2)}</span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-2\">\n          <Button\n            onClick={() => onProcessPayment(\"kot\")}\n            disabled={orderItems.length === 0}\n            className=\"gap-2 bg-primary hover:bg-primary/90 text-primary-foreground\"\n            data-testid=\"button-receipt-print\"\n          >\n            <Printer className=\"w-4 h-4\" />\n            Receipt Print\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={onSaveDraft}\n            disabled={orderItems.length === 0}\n            className=\"gap-2 bg-sky-500 hover:bg-sky-600 text-white border-sky-500\"\n            data-testid=\"button-draft\"\n          >\n            Draft\n          </Button>\n        </div>\n        \n        <Button\n          variant=\"secondary\"\n          onClick={() => onProcessPayment(\"print\")}\n          disabled={orderItems.length === 0}\n          className=\"w-full gap-2\"\n          data-testid=\"button-complete-order\"\n        >\n          <FileText className=\"w-4 h-4\" />\n          Complete Order\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12856},"client/src/components/payment-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { CreditCard, Banknote, Wallet, Smartphone } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface PaymentModalProps {\n  open: boolean;\n  onClose: () => void;\n  onConfirm: (paymentMethod: string, amountPaid: number) => void;\n  total: number;\n  orderNumber: string;\n}\n\nexport function PaymentModal({\n  open,\n  onClose,\n  onConfirm,\n  total,\n  orderNumber,\n}: PaymentModalProps) {\n  const [paymentMethod, setPaymentMethod] = useState(\"cash\");\n  const [amountPaid, setAmountPaid] = useState(total.toString());\n\n  const handleConfirm = () => {\n    onConfirm(paymentMethod, parseFloat(amountPaid) || 0);\n    setAmountPaid(total.toString());\n    setPaymentMethod(\"cash\");\n  };\n\n  const change = Math.max(0, parseFloat(amountPaid || \"0\") - total);\n\n  const paymentMethods = [\n    { value: \"cash\", label: \"Cash\", icon: Banknote },\n    { value: \"card\", label: \"Card Payment\", icon: CreditCard },\n    { value: \"aba\", label: \"ABA\", icon: Smartphone },\n    { value: \"acleda\", label: \"Acleda\", icon: Wallet },\n    { value: \"due\", label: \"Due (Pay Later)\", icon: CreditCard },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-payment\">\n        <DialogHeader>\n          <DialogTitle>Process Payment</DialogTitle>\n          <DialogDescription>\n            Order #{orderNumber} - Complete the payment transaction\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"total\">Total Amount</Label>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-payment-total\">\n              ${total.toFixed(2)}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"payment-method\">Payment Method</Label>\n            <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n              <SelectTrigger id=\"payment-method\" data-testid=\"select-payment-method\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {paymentMethods.map((method) => (\n                  <SelectItem key={method.value} value={method.value}>\n                    <div className=\"flex items-center gap-2\">\n                      <method.icon className=\"w-4 h-4\" />\n                      <span>{method.label}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"amount-paid\">Amount Paid</Label>\n            <Input\n              id=\"amount-paid\"\n              type=\"number\"\n              step=\"0.01\"\n              value={amountPaid}\n              onChange={(e) => setAmountPaid(e.target.value)}\n              className=\"font-mono\"\n              data-testid=\"input-amount-paid\"\n            />\n          </div>\n\n          {change > 0 && (\n            <div className=\"p-3 bg-muted rounded-md\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Change:</span>\n                <span className=\"text-lg font-semibold font-mono text-primary\" data-testid=\"text-change\">\n                  ${change.toFixed(2)}\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <DialogFooter className=\"gap-2 sm:gap-0\">\n          <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel-payment\">\n            Cancel\n          </Button>\n          <Button onClick={handleConfirm} data-testid=\"button-confirm-payment\">\n            Confirm Payment\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4198},"client/src/components/product-card.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Plus, Utensils } from \"lucide-react\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductCardProps {\n  product: Product & { categoryName?: string };\n  onAddToOrder: (product: Product) => void;\n}\n\nexport function ProductCard({ product, onAddToOrder }: ProductCardProps) {\n  return (\n    <Card\n      className=\"overflow-hidden hover-elevate active-elevate-2 cursor-pointer transition-all\"\n      onClick={() => onAddToOrder(product)}\n      data-testid={`card-product-${product.id}`}\n    >\n      <div className=\"aspect-square bg-muted relative overflow-hidden\">\n        {product.imageUrl ? (\n          <img\n            src={product.imageUrl}\n            alt={product.name}\n            className=\"w-full h-full object-cover\"\n          />\n        ) : (\n          <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-muted to-accent\">\n            <Utensils className=\"w-12 h-12 text-muted-foreground\" />\n          </div>\n        )}\n        <div className=\"absolute bottom-2 right-2\">\n          <div className=\"w-8 h-8 rounded-full bg-primary flex items-center justify-center shadow-lg\">\n            <Plus className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n        </div>\n      </div>\n      <div className=\"p-3\">\n        <h3 className=\"font-medium text-sm mb-1 truncate\" data-testid={`text-product-name-${product.id}`}>\n          {product.name}\n        </h3>\n        <p className=\"text-base font-semibold text-primary font-mono\" data-testid={`text-product-price-${product.id}`}>\n          ${parseFloat(product.price).toFixed(2)}\n        </p>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1680},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const initialTheme = savedTheme || \"light\";\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1024},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { DollarSign, ShoppingCart, TrendingUp, Package, Calendar as CalendarIcon, Receipt, Wallet, ShoppingBag } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Button } from \"@/components/ui/button\";\nimport { format } from \"date-fns\";\n\ninterface DashboardStats {\n  todaySales: number;\n  todayOrders: number;\n  totalRevenue: number;\n  totalOrders: number;\n  totalExpenses: number;\n  totalSalary: number;\n  totalPurchase: number;\n}\n\ninterface SalesByCategory {\n  category: string;\n  revenue: number;\n}\n\ninterface SalesByPaymentMethod {\n  paymentMethod: string;\n  amount: number;\n}\n\ninterface PopularProduct {\n  product: string;\n  quantity: number;\n  revenue: number;\n}\n\ninterface RecentOrder {\n  id: string;\n  orderNumber: string;\n  total: string;\n  status: string;\n  createdAt: string;\n  diningOption: string;\n}\n\nexport default function Dashboard() {\n  const [dateFilter, setDateFilter] = useState<string>(\"today\");\n  const [customDate, setCustomDate] = useState<Date | undefined>(undefined);\n\n  const getDateParams = () => {\n    const params = new URLSearchParams();\n    params.append(\"filter\", dateFilter);\n    if (dateFilter === \"custom\" && customDate) {\n      params.append(\"date\", customDate.toISOString());\n    }\n    return params.toString();\n  };\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\", dateFilter, customDate],\n    queryFn: async () => {\n      const response = await fetch(`/api/dashboard/stats?${getDateParams()}`);\n      return response.json();\n    },\n  });\n\n  const { data: salesByCategory, isLoading: salesByCategoryLoading } = useQuery<SalesByCategory[]>({\n    queryKey: [\"/api/dashboard/sales-by-category\", dateFilter, customDate],\n    queryFn: async () => {\n      const response = await fetch(`/api/dashboard/sales-by-category?${getDateParams()}`);\n      return response.json();\n    },\n  });\n\n  const { data: salesByPaymentMethod, isLoading: salesByPaymentMethodLoading } = useQuery<SalesByPaymentMethod[]>({\n    queryKey: [\"/api/dashboard/sales-by-payment-method\", dateFilter, customDate],\n    queryFn: async () => {\n      const response = await fetch(`/api/dashboard/sales-by-payment-method?${getDateParams()}`);\n      return response.json();\n    },\n  });\n\n  const { data: popularProducts, isLoading: popularProductsLoading } = useQuery<PopularProduct[]>({\n    queryKey: [\"/api/dashboard/popular-products\", dateFilter, customDate],\n    queryFn: async () => {\n      const response = await fetch(`/api/dashboard/popular-products?${getDateParams()}`);\n      return response.json();\n    },\n  });\n\n  const { data: recentOrders, isLoading: recentOrdersLoading } = useQuery<RecentOrder[]>({\n    queryKey: [\"/api/dashboard/recent-orders\", dateFilter, customDate],\n    queryFn: async () => {\n      const response = await fetch(`/api/dashboard/recent-orders?${getDateParams()}`);\n      return response.json();\n    },\n  });\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n    }).format(value);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  return (\n    <div className=\"p-6 space-y-6 overflow-auto h-full bg-background\">\n      <div className=\"flex items-center justify-between flex-wrap gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-semibold text-foreground\">Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">Overview of your restaurant's performance</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Select value={dateFilter} onValueChange={setDateFilter}>\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-date-filter\">\n              <SelectValue placeholder=\"Select period\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"today\">Today</SelectItem>\n              <SelectItem value=\"yesterday\">Yesterday</SelectItem>\n              <SelectItem value=\"this-week\">This Week</SelectItem>\n              <SelectItem value=\"custom\">Custom Date</SelectItem>\n            </SelectContent>\n          </Select>\n          {dateFilter === \"custom\" && (\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button variant=\"outline\" data-testid=\"button-custom-date\">\n                  <CalendarIcon className=\"w-4 h-4 mr-2\" />\n                  {customDate ? format(customDate, \"MMM dd, yyyy\") : \"Pick date\"}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\">\n                <Calendar\n                  mode=\"single\"\n                  selected={customDate}\n                  onSelect={setCustomDate}\n                  initialFocus\n                />\n              </PopoverContent>\n            </Popover>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card data-testid=\"card-today-sales\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Today's Sales</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {statsLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-today-sales\">\n                  {formatCurrency(stats?.todaySales || 0)}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {stats?.todayOrders || 0} orders today\n                </p>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-today-orders\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Today's Orders</CardTitle>\n            <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {statsLoading ? (\n              <Skeleton className=\"h-8 w-16\" />\n            ) : (\n              <>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-today-orders\">\n                  {stats?.todayOrders || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">Completed orders</p>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-revenue\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {statsLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-total-revenue\">\n                  {formatCurrency(stats?.totalRevenue || 0)}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">All time revenue</p>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-orders\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {statsLoading ? (\n              <Skeleton className=\"h-8 w-16\" />\n            ) : (\n              <>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-total-orders\">\n                  {stats?.totalOrders || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">Completed orders</p>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-expenses\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Expenses</CardTitle>\n            <Receipt className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {statsLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-total-expenses\">\n                  {formatCurrency(stats?.totalExpenses || 0)}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">For selected period</p>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-salary\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Salary</CardTitle>\n            <Wallet className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {statsLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-total-salary\">\n                  {formatCurrency(stats?.totalSalary || 0)}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">For selected period</p>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-purchase\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Purchase</CardTitle>\n            <ShoppingBag className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {statsLoading ? (\n              <Skeleton className=\"h-8 w-24\" />\n            ) : (\n              <>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-total-purchase\">\n                  {formatCurrency(stats?.totalPurchase || 0)}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">For selected period</p>\n              </>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card data-testid=\"card-sales-by-category\">\n          <CardHeader>\n            <CardTitle>Sales by Category</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {salesByCategoryLoading ? (\n              <Skeleton className=\"h-64 w-full\" />\n            ) : salesByCategory && salesByCategory.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={salesByCategory}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                  <XAxis dataKey=\"category\" className=\"text-xs\" />\n                  <YAxis className=\"text-xs\" />\n                  <Tooltip\n                    formatter={(value: number) => formatCurrency(value)}\n                    contentStyle={{\n                      backgroundColor: \"hsl(var(--card))\",\n                      border: \"1px solid hsl(var(--border))\",\n                      borderRadius: \"0.375rem\",\n                    }}\n                  />\n                  <Bar dataKey=\"revenue\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                No sales data available\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-sales-by-payment\">\n          <CardHeader>\n            <CardTitle>Today's Sales by Payment</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {salesByPaymentMethodLoading ? (\n              <div className=\"space-y-2\">\n                {[...Array(5)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-12 w-full\" />\n                ))}\n              </div>\n            ) : salesByPaymentMethod && salesByPaymentMethod.length > 0 ? (\n              <div className=\"space-y-2\">\n                {salesByPaymentMethod.map((method, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-3 rounded-md bg-muted/50\"\n                    data-testid={`payment-method-${index}`}\n                  >\n                    <div>\n                      <p className=\"font-medium text-sm capitalize\" data-testid={`text-payment-method-${index}`}>\n                        {method.paymentMethod}\n                      </p>\n                    </div>\n                    <div className=\"text-sm font-semibold\" data-testid={`text-payment-amount-${index}`}>\n                      {formatCurrency(method.amount)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                No payment data for today\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-popular-products\">\n          <CardHeader>\n            <CardTitle>Popular Products</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {popularProductsLoading ? (\n              <div className=\"space-y-2\">\n                {[...Array(5)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-12 w-full\" />\n                ))}\n              </div>\n            ) : popularProducts && popularProducts.length > 0 ? (\n              <div className=\"space-y-2\">\n                {popularProducts.map((product, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-3 rounded-md bg-muted/50\"\n                    data-testid={`product-${index}`}\n                  >\n                    <div>\n                      <p className=\"font-medium text-sm\" data-testid={`text-product-name-${index}`}>\n                        {product.product}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {product.quantity} sold\n                      </p>\n                    </div>\n                    <div className=\"text-sm font-semibold\" data-testid={`text-product-revenue-${index}`}>\n                      {formatCurrency(product.revenue)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                No product data available\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card data-testid=\"card-recent-orders\">\n        <CardHeader>\n          <CardTitle>Recent Orders</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {recentOrdersLoading ? (\n            <div className=\"space-y-2\">\n              {[...Array(5)].map((_, i) => (\n                <Skeleton key={i} className=\"h-16 w-full\" />\n              ))}\n            </div>\n          ) : recentOrders && recentOrders.length > 0 ? (\n            <div className=\"space-y-2\">\n              {recentOrders.map((order) => (\n                <div\n                  key={order.id}\n                  className=\"flex items-center justify-between p-3 rounded-md bg-muted/50\"\n                  data-testid={`order-${order.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-sm\" data-testid={`text-order-number-${order.id}`}>\n                      Order #{order.orderNumber}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {formatDate(order.createdAt)} • {order.diningOption}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-semibold\" data-testid={`text-order-total-${order.id}`}>\n                      {formatCurrency(parseFloat(order.total))}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground capitalize\">{order.status}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"h-32 flex items-center justify-center text-muted-foreground\">\n              No recent orders\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":17589},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pos.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Bell, Plus, Grid3x3, FileText, Utensils } from \"lucide-react\";\nimport { ProductCard } from \"@/components/product-card\";\nimport { OrderPanel, type OrderItemData } from \"@/components/order-panel\";\nimport { PaymentModal } from \"@/components/payment-modal\";\nimport { DraftListModal } from \"@/components/draft-list-modal\";\nimport { ReceiptPrintModal } from \"@/components/receipt-print-modal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product, Category, Table, Order, OrderItem } from \"@shared/schema\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nexport default function POS() {\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [orderItems, setOrderItems] = useState<OrderItemData[]>([]);\n  const [selectedTable, setSelectedTable] = useState<string | null>(null);\n  const [diningOption, setDiningOption] = useState(\"dine-in\");\n  const [searchInPacking, setSearchInPacking] = useState(\"\");\n  const [paymentModalOpen, setPaymentModalOpen] = useState(false);\n  const [draftListModalOpen, setDraftListModalOpen] = useState(false);\n  const [receiptModalOpen, setReceiptModalOpen] = useState(false);\n  const [currentOrderNumber, setCurrentOrderNumber] = useState(() => \n    `${Math.floor(Math.random() * 100)}`\n  );\n  const [receiptData, setReceiptData] = useState<any>(null);\n  const [currentDraftId, setCurrentDraftId] = useState<string | null>(null);\n  const [manualDiscount, setManualDiscount] = useState<number>(0);\n  const [discountType, setDiscountType] = useState<'amount' | 'percentage'>('amount');\n  const { toast } = useToast();\n\n  // Handle discount changes properly to avoid race conditions\n  const handleDiscountChange = (value: number, type: 'amount' | 'percentage') => {\n    setDiscountType(type);\n    setManualDiscount(value);\n  };\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: products = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: tables = [] } = useQuery<Table[]>({\n    queryKey: [\"/api/tables\"],\n  });\n\n  const { data: orders = [] } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const draftOrders = orders.filter((order) => order.status === \"draft\");\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      return await apiRequest(\"POST\", \"/api/orders\", orderData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      setOrderItems([]);\n      setSelectedTable(null);\n      setCurrentOrderNumber(`${Math.floor(Math.random() * 100)}`);\n      toast({\n        title: \"Success\",\n        description: \"Order processed successfully\",\n      });\n    },\n  });\n\n  const deleteOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      return await apiRequest(\"DELETE\", `/api/orders/${orderId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Success\",\n        description: \"Draft order deleted\",\n      });\n    },\n  });\n\n  const handleAddToOrder = (product: Product) => {\n    setOrderItems((prev) => {\n      const existing = prev.find((item) => item.product.id === product.id);\n      if (existing) {\n        return prev.map((item) =>\n          item.product.id === product.id\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        );\n      }\n      return [...prev, { product, quantity: 1 }];\n    });\n  };\n\n  const handleUpdateQuantity = (productId: string, quantity: number) => {\n    if (quantity < 1) return;\n    setOrderItems((prev) =>\n      prev.map((item) =>\n        item.product.id === productId ? { ...item, quantity } : item\n      )\n    );\n  };\n\n  const handleRemoveItem = (productId: string) => {\n    setOrderItems((prev) => prev.filter((item) => item.product.id !== productId));\n  };\n\n  const handleClearOrder = () => {\n    setOrderItems([]);\n    setManualDiscount(0);\n    setDiscountType('amount');\n  };\n\n  const handleSaveDraft = () => {\n    const subtotal = orderItems.reduce(\n      (sum, item) => sum + parseFloat(item.product.price) * item.quantity,\n      0\n    );\n\n    const discountAmount = discountType === 'percentage' \n      ? (subtotal * manualDiscount) / 100 \n      : manualDiscount;\n    const total = subtotal - discountAmount;\n    const draftIdToDelete = currentDraftId;\n\n    createOrderMutation.mutate(\n      {\n        tableId: selectedTable,\n        diningOption,\n        subtotal: subtotal.toString(),\n        discount: manualDiscount.toString(),\n        discountType: discountType,\n        total: total.toString(),\n        status: \"draft\",\n        items: orderItems.map((item) => ({\n          productId: item.product.id,\n          quantity: item.quantity,\n          price: item.product.price,\n          total: (parseFloat(item.product.price) * item.quantity).toString(),\n        })),\n      },\n      {\n        onSuccess: () => {\n          if (draftIdToDelete) {\n            deleteOrderMutation.mutate(draftIdToDelete);\n            setCurrentDraftId(null);\n          }\n        },\n      }\n    );\n  };\n\n  const handleOpenDraftList = () => {\n    setDraftListModalOpen(true);\n  };\n\n  const handleEditDraft = async (orderId: string) => {\n    const order = orders.find((o) => o.id === orderId);\n    if (!order) return;\n\n    try {\n      const response = await apiRequest(\"GET\", `/api/orders/${orderId}/items`);\n      const orderItemsData = await response.json() as OrderItem[];\n      \n      const productsMap = new Map(products.map((p) => [p.id, p]));\n      const restoredItems: OrderItemData[] = orderItemsData\n        .map((item) => {\n          const product = productsMap.get(item.productId);\n          if (!product) return null;\n          return {\n            product,\n            quantity: item.quantity,\n          };\n        })\n        .filter((item): item is OrderItemData => item !== null);\n\n      setOrderItems(restoredItems);\n      setSelectedTable(order.tableId);\n      setDiningOption(order.diningOption);\n      setCurrentOrderNumber(order.orderNumber);\n      setCurrentDraftId(orderId);\n      setManualDiscount(parseFloat(order.discount) || 0);\n      setDiscountType((order.discountType as 'amount' | 'percentage') || 'amount');\n      setDraftListModalOpen(false);\n      \n      toast({\n        title: \"Draft Loaded\",\n        description: \"Draft order items restored to cart. Complete or save to update.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load draft order\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePrintDraft = async (orderId: string) => {\n    const order = orders.find((o) => o.id === orderId);\n    if (!order) return;\n\n    try {\n      const response = await apiRequest(\"GET\", `/api/orders/${orderId}/items`);\n      const orderItemsData = await response.json() as OrderItem[];\n      \n      const productsMap = new Map(products.map((p) => [p.id, p]));\n      const items = orderItemsData\n        .map((item) => {\n          const product = productsMap.get(item.productId);\n          if (!product) return null;\n          return {\n            product,\n            quantity: item.quantity,\n            price: item.price,\n            total: item.total,\n          };\n        })\n        .filter((item): item is any => item !== null);\n\n      setReceiptData({\n        orderNumber: order.orderNumber,\n        items,\n        subtotal: parseFloat(order.subtotal),\n        discount: parseFloat(order.discount),\n        total: parseFloat(order.total),\n        tableId: order.tableId,\n        diningOption: order.diningOption,\n      });\n      setReceiptModalOpen(true);\n      setDraftListModalOpen(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load draft order for printing\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteDraft = (orderId: string) => {\n    deleteOrderMutation.mutate(orderId);\n  };\n\n  // Listen for loadDraft event from header\n  useEffect(() => {\n    const handleLoadDraft = async (event: Event) => {\n      const customEvent = event as CustomEvent;\n      const { orderId } = customEvent.detail;\n      const order = orders.find((o) => o.id === orderId);\n      if (!order) return;\n\n      try {\n        const response = await apiRequest(\"GET\", `/api/orders/${orderId}/items`);\n        const orderItemsData = await response.json() as OrderItem[];\n        \n        const productsMap = new Map(products.map((p) => [p.id, p]));\n        const restoredItems: OrderItemData[] = orderItemsData\n          .map((item) => {\n            const product = productsMap.get(item.productId);\n            if (!product) return null;\n            return {\n              product,\n              quantity: item.quantity,\n            };\n          })\n          .filter((item): item is OrderItemData => item !== null);\n\n        setOrderItems(restoredItems);\n        setSelectedTable(order.tableId);\n        setDiningOption(order.diningOption);\n        setCurrentOrderNumber(order.orderNumber);\n        setCurrentDraftId(orderId);\n        setManualDiscount(parseFloat(order.discount) || 0);\n        setDiscountType((order.discountType as 'amount' | 'percentage') || 'amount');\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to load draft order\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    window.addEventListener('loadDraft', handleLoadDraft);\n    return () => {\n      window.removeEventListener('loadDraft', handleLoadDraft);\n    };\n  }, [orders, products, toast]);\n\n  // Listen for printDraft event from header\n  useEffect(() => {\n    const handlePrintDraft = async (event: Event) => {\n      const customEvent = event as CustomEvent;\n      const { orderId } = customEvent.detail;\n      const order = orders.find((o) => o.id === orderId);\n      if (!order) return;\n\n      try {\n        const response = await apiRequest(\"GET\", `/api/orders/${orderId}/items`);\n        const orderItemsData = await response.json() as OrderItem[];\n        \n        const productsMap = new Map(products.map((p) => [p.id, p]));\n        const restoredItems: OrderItemData[] = orderItemsData\n          .map((item) => {\n            const product = productsMap.get(item.productId);\n            if (!product) return null;\n            return {\n              product,\n              quantity: item.quantity,\n            };\n          })\n          .filter((item): item is OrderItemData => item !== null);\n\n        setOrderItems(restoredItems);\n        setSelectedTable(order.tableId);\n        setDiningOption(order.diningOption);\n        setCurrentOrderNumber(order.orderNumber);\n        setCurrentDraftId(orderId);\n        setManualDiscount(parseFloat(order.discount) || 0);\n        setDiscountType((order.discountType as 'amount' | 'percentage') || 'amount');\n        \n        // Open payment modal directly for printing\n        setTimeout(() => {\n          setPaymentModalOpen(true);\n        }, 100);\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to load draft order for printing\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    window.addEventListener('printDraft', handlePrintDraft);\n    return () => {\n      window.removeEventListener('printDraft', handlePrintDraft);\n    };\n  }, [orders, products, toast]);\n\n  const handleProcessPayment = (type: \"kot\" | \"bill\" | \"print\") => {\n    if (type === \"kot\") {\n      const subtotal = orderItems.reduce(\n        (sum, item) => sum + parseFloat(item.product.price) * item.quantity,\n        0\n      );\n      \n      const discountAmount = discountType === 'percentage' \n        ? (subtotal * manualDiscount) / 100 \n        : manualDiscount;\n      \n      setReceiptData({\n        orderNumber: currentOrderNumber,\n        items: orderItems.map((item) => ({\n          product: item.product,\n          quantity: item.quantity,\n          price: item.product.price,\n          total: (parseFloat(item.product.price) * item.quantity).toString(),\n        })),\n        subtotal,\n        discount: discountAmount,\n        total: subtotal - discountAmount,\n        tableId: selectedTable,\n        diningOption,\n      });\n      setReceiptModalOpen(true);\n    } else if (type === \"print\") {\n      setPaymentModalOpen(true);\n    }\n  };\n\n  const handleConfirmPayment = (paymentMethod: string, amountPaid: number) => {\n    const subtotal = orderItems.reduce(\n      (sum, item) => sum + parseFloat(item.product.price) * item.quantity,\n      0\n    );\n\n    const discountAmount = discountType === 'percentage' \n      ? (subtotal * manualDiscount) / 100 \n      : manualDiscount;\n    const total = subtotal - discountAmount;\n    const draftIdToDelete = currentDraftId;\n\n    const orderData = {\n      tableId: selectedTable,\n      diningOption,\n      subtotal: subtotal.toString(),\n      discount: manualDiscount.toString(),\n      discountType: discountType,\n      total: total.toString(),\n      status: \"completed\",\n      paymentMethod,\n      paymentStatus: \"paid\",\n      items: orderItems.map((item) => ({\n        productId: item.product.id,\n        quantity: item.quantity,\n        price: item.product.price,\n        total: (parseFloat(item.product.price) * item.quantity).toString(),\n      })),\n    };\n\n    createOrderMutation.mutate(orderData, {\n      onSuccess: () => {\n        if (draftIdToDelete) {\n          deleteOrderMutation.mutate(draftIdToDelete);\n          setCurrentDraftId(null);\n        }\n      },\n    });\n\n    setReceiptData({\n      orderNumber: currentOrderNumber,\n      items: orderItems.map((item) => ({\n        product: item.product,\n        quantity: item.quantity,\n        price: item.product.price,\n        total: (parseFloat(item.product.price) * item.quantity).toString(),\n      })),\n      subtotal,\n      discount: discountAmount,\n      total: total,\n      tableId: selectedTable,\n      diningOption,\n    });\n\n    setPaymentModalOpen(false);\n    setReceiptModalOpen(true);\n  };\n\n  const handlePrintReceipt = () => {\n    toast({\n      title: \"Receipt Printed\",\n      description: \"Receipt has been sent to printer\",\n    });\n  };\n\n  const handleNewOrder = () => {\n    setOrderItems([]);\n    setSelectedTable(null);\n    setDiningOption(\"dine-in\");\n    setCurrentOrderNumber(`${Math.floor(Math.random() * 100)}`);\n    setCurrentDraftId(null);\n    setManualDiscount(0);\n    setDiscountType('amount');\n    toast({\n      title: \"New Order\",\n      description: \"Started a new order\",\n    });\n  };\n\n  const handleQRMenuOrders = () => {\n    toast({\n      title: \"QR Menu Orders\",\n      description: \"QR menu order feature coming soon\",\n    });\n  };\n\n  const handleTableOrder = () => {\n    toast({\n      title: \"Table Order\",\n      description: \"Table order management feature coming soon\",\n    });\n  };\n\n  const filteredProducts = products.filter((product) => {\n    const matchesCategory = !selectedCategory || product.categoryId === selectedCategory;\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const subtotal = orderItems.reduce(\n    (sum, item) => sum + parseFloat(item.product.price) * item.quantity,\n    0\n  );\n\n  return (\n    <div className=\"flex h-full overflow-hidden\">\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"h-16 border-b border-border bg-background px-6 flex items-center justify-between flex-shrink-0\">\n          <div className=\"flex items-center gap-4 flex-1 max-w-2xl\">\n            <h1 className=\"text-xl font-semibold whitespace-nowrap\">Point of Sale (POS)</h1>\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search Product...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9 max-w-md\"\n                data-testid=\"input-search-products\"\n              />\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n              <Bell className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </header>\n\n        <div className=\"flex-1 overflow-hidden flex flex-col\">\n          <div className=\"px-6 py-4 border-b border-border bg-background\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Badge variant=\"secondary\">Dashboard</Badge>\n              <span className=\"text-muted-foreground\">/</span>\n              <span className=\"text-sm\">POS</span>\n            </div>\n\n            <div className=\"flex gap-2 overflow-x-auto pb-2\">\n              <Button\n                variant={selectedCategory === null ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedCategory(null)}\n                className=\"whitespace-nowrap\"\n                data-testid=\"button-category-all\"\n              >\n                Show All\n              </Button>\n              {categories.map((category) => (\n                <Button\n                  key={category.id}\n                  variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category.id)}\n                  className=\"whitespace-nowrap\"\n                  data-testid={`button-category-${category.slug}`}\n                >\n                  {category.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex-1 overflow-auto p-6\">\n            {productsLoading ? (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {[...Array(8)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"aspect-square bg-muted rounded-lg mb-3\" />\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\" />\n                    <div className=\"h-4 bg-muted rounded w-1/2\" />\n                  </div>\n                ))}\n              </div>\n            ) : filteredProducts.length === 0 ? (\n              <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-medium mb-1\">No products found</p>\n                  <p className=\"text-sm\">Try adjusting your search or filter</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {filteredProducts.map((product) => (\n                  <ProductCard\n                    key={product.id}\n                    product={product}\n                    onAddToOrder={handleAddToOrder}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <OrderPanel\n        orderItems={orderItems}\n        onUpdateQuantity={handleUpdateQuantity}\n        onRemoveItem={handleRemoveItem}\n        onClearOrder={handleClearOrder}\n        onSaveDraft={handleSaveDraft}\n        onProcessPayment={handleProcessPayment}\n        orderNumber={currentOrderNumber}\n        selectedTable={selectedTable}\n        onSelectTable={setSelectedTable}\n        tables={tables}\n        diningOption={diningOption}\n        onChangeDiningOption={setDiningOption}\n        searchInPacking={searchInPacking}\n        onSearchInPacking={setSearchInPacking}\n        manualDiscount={manualDiscount}\n        onManualDiscountChange={setManualDiscount}\n        discountType={discountType}\n        onDiscountTypeChange={setDiscountType}\n        onDiscountChange={handleDiscountChange}\n      />\n\n      <PaymentModal\n        open={paymentModalOpen}\n        onClose={() => setPaymentModalOpen(false)}\n        onConfirm={handleConfirmPayment}\n        total={subtotal - (discountType === 'percentage' ? (subtotal * manualDiscount) / 100 : manualDiscount)}\n        orderNumber={currentOrderNumber}\n      />\n\n      <DraftListModal\n        open={draftListModalOpen}\n        onClose={() => setDraftListModalOpen(false)}\n        draftOrders={draftOrders}\n        onEditDraft={handleEditDraft}\n        onPrintDraft={handlePrintDraft}\n        onDeleteDraft={handleDeleteDraft}\n      />\n\n      {receiptData && (\n        <ReceiptPrintModal\n          open={receiptModalOpen}\n          onClose={() => setReceiptModalOpen(false)}\n          order={receiptData}\n          onPrint={handlePrintReceipt}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":21097},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/expenses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Eye, Edit, Trash2, Printer, Search, FolderOpen } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { Expense, ExpenseCategory } from \"@shared/schema\";\n\nconst UNIT_OPTIONS = [\"Kg\", \"ml\", \"Litre\", \"Gram\", \"Box\", \"Unit\", \"Piece\", \"Dozen\", \"Pack\"];\n\nexport default function ExpenseManage() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"expenses\");\n  \n  const [viewExpense, setViewExpense] = useState<Expense | null>(null);\n  const [editExpense, setEditExpense] = useState<Expense | null>(null);\n  const [deleteExpenseId, setDeleteExpenseId] = useState<string | null>(null);\n  const [showAddExpenseDialog, setShowAddExpenseDialog] = useState(false);\n  const [printExpense, setPrintExpense] = useState<Expense | null>(null);\n  \n  const [editCategory, setEditCategory] = useState<ExpenseCategory | null>(null);\n  const [deleteCategoryId, setDeleteCategoryId] = useState<string | null>(null);\n  const [showAddCategoryDialog, setShowAddCategoryDialog] = useState(false);\n  \n  const [expenseFormData, setExpenseFormData] = useState({\n    expenseDate: new Date().toISOString().slice(0, 16),\n    categoryId: \"\",\n    description: \"\",\n    amount: \"\",\n    unit: \"Kg\",\n    quantity: \"1\",\n    total: \"\",\n  });\n  \n  const [categoryFormData, setCategoryFormData] = useState({\n    name: \"\",\n    description: \"\",\n  });\n\n  const { data: expenses = [], isLoading: expensesLoading } = useQuery<Expense[]>({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<ExpenseCategory[]>({\n    queryKey: [\"/api/expense-categories\"],\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"/api/expenses\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      setShowAddExpenseDialog(false);\n      resetExpenseForm();\n      toast({ title: \"Success\", description: \"Expense added successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to add expense\", variant: \"destructive\" });\n    },\n  });\n\n  const updateExpenseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(`/api/expenses/${id}`, \"PATCH\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      setEditExpense(null);\n      toast({ title: \"Success\", description: \"Expense updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update expense\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteExpenseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/expenses/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      setDeleteExpenseId(null);\n      toast({ title: \"Success\", description: \"Expense deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete expense\", variant: \"destructive\" });\n    },\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"/api/expense-categories\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expense-categories\"] });\n      setShowAddCategoryDialog(false);\n      resetCategoryForm();\n      toast({ title: \"Success\", description: \"Category added successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to add category\", variant: \"destructive\" });\n    },\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(`/api/expense-categories/${id}`, \"PATCH\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expense-categories\"] });\n      setEditCategory(null);\n      toast({ title: \"Success\", description: \"Category updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update category\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/expense-categories/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expense-categories\"] });\n      setDeleteCategoryId(null);\n      toast({ title: \"Success\", description: \"Category deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete category\", variant: \"destructive\" });\n    },\n  });\n\n  const resetExpenseForm = () => {\n    setExpenseFormData({\n      expenseDate: new Date().toISOString().slice(0, 16),\n      categoryId: \"\",\n      description: \"\",\n      amount: \"\",\n      unit: \"Kg\",\n      quantity: \"1\",\n      total: \"\",\n    });\n  };\n\n  const resetCategoryForm = () => {\n    setCategoryFormData({\n      name: \"\",\n      description: \"\",\n    });\n  };\n\n  const calculateTotal = (amount: string, quantity: string) => {\n    const amt = parseFloat(amount) || 0;\n    const qty = parseFloat(quantity) || 0;\n    return (amt * qty).toFixed(2);\n  };\n\n  const handleExpenseFormChange = (field: string, value: string) => {\n    const updated = { ...expenseFormData, [field]: value };\n    \n    if (field === \"amount\" || field === \"quantity\") {\n      updated.total = calculateTotal(updated.amount, updated.quantity);\n    }\n    \n    setExpenseFormData(updated);\n  };\n\n  const handleAddExpense = () => {\n    if (!expenseFormData.categoryId || !expenseFormData.description || !expenseFormData.amount) {\n      toast({ title: \"Error\", description: \"Please fill in all required fields\", variant: \"destructive\" });\n      return;\n    }\n\n    createExpenseMutation.mutate({\n      expenseDate: new Date(expenseFormData.expenseDate).toISOString(),\n      categoryId: expenseFormData.categoryId,\n      description: expenseFormData.description,\n      amount: expenseFormData.amount,\n      unit: expenseFormData.unit,\n      quantity: expenseFormData.quantity,\n      total: expenseFormData.total || calculateTotal(expenseFormData.amount, expenseFormData.quantity),\n    });\n  };\n\n  const handleEditExpenseSave = () => {\n    if (!editExpense) return;\n    \n    updateExpenseMutation.mutate({\n      id: editExpense.id,\n      data: {\n        expenseDate: new Date(editExpense.expenseDate).toISOString(),\n        categoryId: editExpense.categoryId,\n        description: editExpense.description,\n        amount: editExpense.amount,\n        unit: editExpense.unit,\n        quantity: editExpense.quantity,\n        total: editExpense.total,\n      },\n    });\n  };\n\n  const handlePrintExpense = (expense: Expense) => {\n    const category = categories.find(c => c.id === expense.categoryId);\n    const printWindow = window.open(\"\", \"_blank\");\n    if (printWindow) {\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>Expense Receipt - ${expense.id}</title>\n            <style>\n              body { font-family: Arial, sans-serif; padding: 20px; }\n              h1 { color: #EA580C; }\n              table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n              th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }\n              th { background-color: #f5f5f5; }\n              .total { font-size: 1.2em; font-weight: bold; }\n            </style>\n          </head>\n          <body>\n            <h1>Expense Receipt</h1>\n            <table>\n              <tr><th>Expense ID</th><td>${expense.id}</td></tr>\n              <tr><th>Date & Time</th><td>${format(new Date(expense.expenseDate), \"PPpp\")}</td></tr>\n              <tr><th>Category</th><td>${category?.name || \"N/A\"}</td></tr>\n              <tr><th>Description</th><td>${expense.description}</td></tr>\n              <tr><th>Amount</th><td>$${expense.amount}</td></tr>\n              <tr><th>Unit</th><td>${expense.unit}</td></tr>\n              <tr><th>Quantity</th><td>${expense.quantity}</td></tr>\n              <tr><th class=\"total\">Total</th><td class=\"total\">$${expense.total}</td></tr>\n            </table>\n          </body>\n        </html>\n      `);\n      printWindow.document.close();\n      printWindow.print();\n    }\n  };\n\n  const handleAddCategory = () => {\n    if (!categoryFormData.name) {\n      toast({ title: \"Error\", description: \"Category name is required\", variant: \"destructive\" });\n      return;\n    }\n\n    createCategoryMutation.mutate(categoryFormData);\n  };\n\n  const handleEditCategorySave = () => {\n    if (!editCategory) return;\n    \n    updateCategoryMutation.mutate({\n      id: editCategory.id,\n      data: {\n        name: editCategory.name,\n        description: editCategory.description,\n      },\n    });\n  };\n\n  const filteredExpenses = expenses.filter(expense => {\n    const category = categories.find(c => c.id === expense.categoryId);\n    const searchLower = searchTerm.toLowerCase();\n    \n    return (\n      expense.id.toLowerCase().includes(searchLower) ||\n      expense.description.toLowerCase().includes(searchLower) ||\n      category?.name.toLowerCase().includes(searchLower) ||\n      expense.total.includes(searchTerm)\n    );\n  });\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Expense Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Track and manage all business expenses</p>\n          </div>\n          <Button onClick={() => setShowAddExpenseDialog(true)} data-testid=\"button-add-expense\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Expense\n          </Button>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList>\n            <TabsTrigger value=\"expenses\" data-testid=\"tab-expenses\">Expenses</TabsTrigger>\n            <TabsTrigger value=\"categories\" data-testid=\"tab-categories\">\n              <FolderOpen className=\"w-4 h-4 mr-2\" />\n              Categories\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"expenses\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Expense Records</CardTitle>\n                <CardDescription>View and manage all expense records</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"relative flex-1\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search by ID, description, category, or amount...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-9\"\n                      data-testid=\"input-search-expenses\"\n                    />\n                  </div>\n                </div>\n\n                {expensesLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">Loading expenses...</div>\n                ) : filteredExpenses.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    {searchTerm ? \"No expenses found matching your search\" : \"No expenses recorded yet\"}\n                  </div>\n                ) : (\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead data-testid=\"header-expense-id\">Expense ID</TableHead>\n                          <TableHead data-testid=\"header-date-time\">Date & Time</TableHead>\n                          <TableHead data-testid=\"header-category\">Category</TableHead>\n                          <TableHead data-testid=\"header-description\">Description</TableHead>\n                          <TableHead data-testid=\"header-amount\">Amount</TableHead>\n                          <TableHead data-testid=\"header-unit\">Unit</TableHead>\n                          <TableHead data-testid=\"header-quantity\">Quantity</TableHead>\n                          <TableHead data-testid=\"header-total\">Total</TableHead>\n                          <TableHead data-testid=\"header-actions\">Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredExpenses.map((expense) => {\n                          const category = categories.find(c => c.id === expense.categoryId);\n                          return (\n                            <TableRow key={expense.id}>\n                              <TableCell data-testid={`text-expense-id-${expense.id}`}>{expense.id}</TableCell>\n                              <TableCell data-testid={`text-date-${expense.id}`}>\n                                {format(new Date(expense.expenseDate), \"MMM dd, yyyy HH:mm\")}\n                              </TableCell>\n                              <TableCell data-testid={`text-category-${expense.id}`}>\n                                {category?.name || \"Unknown\"}\n                              </TableCell>\n                              <TableCell data-testid={`text-description-${expense.id}`}>{expense.description}</TableCell>\n                              <TableCell data-testid={`text-amount-${expense.id}`}>${expense.amount}</TableCell>\n                              <TableCell data-testid={`text-unit-${expense.id}`}>{expense.unit}</TableCell>\n                              <TableCell data-testid={`text-quantity-${expense.id}`}>{expense.quantity}</TableCell>\n                              <TableCell className=\"font-semibold\" data-testid={`text-total-${expense.id}`}>\n                                ${expense.total}\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center gap-1\">\n                                  <Tooltip>\n                                    <TooltipTrigger asChild>\n                                      <Button\n                                        size=\"icon\"\n                                        variant=\"ghost\"\n                                        onClick={() => setViewExpense(expense)}\n                                        data-testid={`button-view-${expense.id}`}\n                                      >\n                                        <Eye className=\"w-4 h-4\" />\n                                      </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent>View Details</TooltipContent>\n                                  </Tooltip>\n\n                                  <Tooltip>\n                                    <TooltipTrigger asChild>\n                                      <Button\n                                        size=\"icon\"\n                                        variant=\"ghost\"\n                                        onClick={() => setEditExpense(expense)}\n                                        data-testid={`button-edit-${expense.id}`}\n                                      >\n                                        <Edit className=\"w-4 h-4\" />\n                                      </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent>Edit Expense</TooltipContent>\n                                  </Tooltip>\n\n                                  <Tooltip>\n                                    <TooltipTrigger asChild>\n                                      <Button\n                                        size=\"icon\"\n                                        variant=\"ghost\"\n                                        onClick={() => handlePrintExpense(expense)}\n                                        data-testid={`button-print-${expense.id}`}\n                                      >\n                                        <Printer className=\"w-4 h-4\" />\n                                      </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent>Print Receipt</TooltipContent>\n                                  </Tooltip>\n\n                                  <Tooltip>\n                                    <TooltipTrigger asChild>\n                                      <Button\n                                        size=\"icon\"\n                                        variant=\"ghost\"\n                                        onClick={() => setDeleteExpenseId(expense.id)}\n                                        data-testid={`button-delete-${expense.id}`}\n                                      >\n                                        <Trash2 className=\"w-4 h-4\" />\n                                      </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent>Delete Expense</TooltipContent>\n                                  </Tooltip>\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"categories\" className=\"space-y-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-4\">\n                <div>\n                  <CardTitle>Expense Categories</CardTitle>\n                  <CardDescription>Organize expenses by categories</CardDescription>\n                </div>\n                <Button onClick={() => setShowAddCategoryDialog(true)} data-testid=\"button-add-category\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Category\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {categoriesLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">Loading categories...</div>\n                ) : categories.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">No categories created yet</div>\n                ) : (\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead data-testid=\"header-category-name\">Category Name</TableHead>\n                          <TableHead data-testid=\"header-category-description\">Description</TableHead>\n                          <TableHead data-testid=\"header-category-actions\">Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {categories.map((category) => (\n                          <TableRow key={category.id}>\n                            <TableCell className=\"font-medium\" data-testid={`text-category-name-${category.id}`}>\n                              {category.name}\n                            </TableCell>\n                            <TableCell data-testid={`text-category-description-${category.id}`}>\n                              {category.description || \"—\"}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center gap-1\">\n                                <Tooltip>\n                                  <TooltipTrigger asChild>\n                                    <Button\n                                      size=\"icon\"\n                                      variant=\"ghost\"\n                                      onClick={() => setEditCategory(category)}\n                                      data-testid={`button-edit-category-${category.id}`}\n                                    >\n                                      <Edit className=\"w-4 h-4\" />\n                                    </Button>\n                                  </TooltipTrigger>\n                                  <TooltipContent>Edit Category</TooltipContent>\n                                </Tooltip>\n\n                                <Tooltip>\n                                  <TooltipTrigger asChild>\n                                    <Button\n                                      size=\"icon\"\n                                      variant=\"ghost\"\n                                      onClick={() => setDeleteCategoryId(category.id)}\n                                      data-testid={`button-delete-category-${category.id}`}\n                                    >\n                                      <Trash2 className=\"w-4 h-4\" />\n                                    </Button>\n                                  </TooltipTrigger>\n                                  <TooltipContent>Delete Category</TooltipContent>\n                                </Tooltip>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Add Expense Dialog */}\n      <Dialog open={showAddExpenseDialog} onOpenChange={setShowAddExpenseDialog}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-add-expense\">\n          <DialogHeader>\n            <DialogTitle>Add New Expense</DialogTitle>\n            <DialogDescription>Record a new business expense</DialogDescription>\n          </DialogHeader>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"expense-date\">Expense Date *</Label>\n              <Input\n                id=\"expense-date\"\n                type=\"datetime-local\"\n                value={expenseFormData.expenseDate}\n                onChange={(e) => handleExpenseFormChange(\"expenseDate\", e.target.value)}\n                data-testid=\"input-expense-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"category\">Category *</Label>\n              <Select\n                value={expenseFormData.categoryId}\n                onValueChange={(value) => handleExpenseFormChange(\"categoryId\", value)}\n              >\n                <SelectTrigger id=\"category\" data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((cat) => (\n                    <SelectItem key={cat.id} value={cat.id} data-testid={`option-category-${cat.id}`}>\n                      {cat.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"col-span-2\">\n              <Label htmlFor=\"description\">Description *</Label>\n              <Input\n                id=\"description\"\n                placeholder=\"Enter expense description\"\n                value={expenseFormData.description}\n                onChange={(e) => handleExpenseFormChange(\"description\", e.target.value)}\n                data-testid=\"input-description\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"amount\">Amount *</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"0.00\"\n                value={expenseFormData.amount}\n                onChange={(e) => handleExpenseFormChange(\"amount\", e.target.value)}\n                data-testid=\"input-amount\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"unit\">Unit *</Label>\n              <Select\n                value={expenseFormData.unit}\n                onValueChange={(value) => handleExpenseFormChange(\"unit\", value)}\n              >\n                <SelectTrigger id=\"unit\" data-testid=\"select-unit\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {UNIT_OPTIONS.map((unit) => (\n                    <SelectItem key={unit} value={unit} data-testid={`option-unit-${unit}`}>\n                      {unit}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"quantity\">Quantity *</Label>\n              <Input\n                id=\"quantity\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"1\"\n                value={expenseFormData.quantity}\n                onChange={(e) => handleExpenseFormChange(\"quantity\", e.target.value)}\n                data-testid=\"input-quantity\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"total\">Total</Label>\n              <Input\n                id=\"total\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"Auto-calculated\"\n                value={expenseFormData.total || calculateTotal(expenseFormData.amount, expenseFormData.quantity)}\n                readOnly\n                className=\"bg-muted\"\n                data-testid=\"input-total\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAddExpenseDialog(false)} data-testid=\"button-cancel-expense\">\n              Cancel\n            </Button>\n            <Button onClick={handleAddExpense} disabled={createExpenseMutation.isPending} data-testid=\"button-save-expense\">\n              {createExpenseMutation.isPending ? \"Saving...\" : \"Save Expense\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Expense Dialog */}\n      <Dialog open={!!viewExpense} onOpenChange={() => setViewExpense(null)}>\n        <DialogContent data-testid=\"dialog-view-expense\">\n          <DialogHeader>\n            <DialogTitle>Expense Details</DialogTitle>\n            <DialogDescription>View complete expense information</DialogDescription>\n          </DialogHeader>\n          {viewExpense && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-muted-foreground\">Expense ID</Label>\n                  <p className=\"font-medium\" data-testid=\"view-expense-id\">{viewExpense.id}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Date & Time</Label>\n                  <p className=\"font-medium\" data-testid=\"view-expense-date\">\n                    {format(new Date(viewExpense.expenseDate), \"PPpp\")}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Category</Label>\n                  <p className=\"font-medium\" data-testid=\"view-expense-category\">\n                    {categories.find(c => c.id === viewExpense.categoryId)?.name || \"Unknown\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Description</Label>\n                  <p className=\"font-medium\" data-testid=\"view-expense-description\">{viewExpense.description}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Amount</Label>\n                  <p className=\"font-medium\" data-testid=\"view-expense-amount\">${viewExpense.amount}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Unit</Label>\n                  <p className=\"font-medium\" data-testid=\"view-expense-unit\">{viewExpense.unit}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Quantity</Label>\n                  <p className=\"font-medium\" data-testid=\"view-expense-quantity\">{viewExpense.quantity}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Total</Label>\n                  <p className=\"font-bold text-lg\" data-testid=\"view-expense-total\">${viewExpense.total}</p>\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button onClick={() => setViewExpense(null)} data-testid=\"button-close-view\">Close</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Expense Dialog */}\n      <Dialog open={!!editExpense} onOpenChange={() => setEditExpense(null)}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-edit-expense\">\n          <DialogHeader>\n            <DialogTitle>Edit Expense</DialogTitle>\n            <DialogDescription>Modify expense details</DialogDescription>\n          </DialogHeader>\n          {editExpense && (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-expense-date\">Expense Date</Label>\n                <Input\n                  id=\"edit-expense-date\"\n                  type=\"datetime-local\"\n                  value={new Date(editExpense.expenseDate).toISOString().slice(0, 16)}\n                  onChange={(e) => setEditExpense({ ...editExpense, expenseDate: new Date(e.target.value) })}\n                  data-testid=\"input-edit-expense-date\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-category\">Category</Label>\n                <Select\n                  value={editExpense.categoryId}\n                  onValueChange={(value) => setEditExpense({ ...editExpense, categoryId: value })}\n                >\n                  <SelectTrigger id=\"edit-category\" data-testid=\"select-edit-category\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map((cat) => (\n                      <SelectItem key={cat.id} value={cat.id}>\n                        {cat.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"col-span-2\">\n                <Label htmlFor=\"edit-description\">Description</Label>\n                <Input\n                  id=\"edit-description\"\n                  value={editExpense.description}\n                  onChange={(e) => setEditExpense({ ...editExpense, description: e.target.value })}\n                  data-testid=\"input-edit-description\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-amount\">Amount</Label>\n                <Input\n                  id=\"edit-amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editExpense.amount}\n                  onChange={(e) => {\n                    const newAmount = e.target.value;\n                    const newTotal = calculateTotal(newAmount, editExpense.quantity);\n                    setEditExpense({ ...editExpense, amount: newAmount, total: newTotal });\n                  }}\n                  data-testid=\"input-edit-amount\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-unit\">Unit</Label>\n                <Select\n                  value={editExpense.unit}\n                  onValueChange={(value) => setEditExpense({ ...editExpense, unit: value })}\n                >\n                  <SelectTrigger id=\"edit-unit\" data-testid=\"select-edit-unit\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {UNIT_OPTIONS.map((unit) => (\n                      <SelectItem key={unit} value={unit}>\n                        {unit}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"edit-quantity\">Quantity</Label>\n                <Input\n                  id=\"edit-quantity\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editExpense.quantity}\n                  onChange={(e) => {\n                    const newQuantity = e.target.value;\n                    const newTotal = calculateTotal(editExpense.amount, newQuantity);\n                    setEditExpense({ ...editExpense, quantity: newQuantity, total: newTotal });\n                  }}\n                  data-testid=\"input-edit-quantity\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-total\">Total</Label>\n                <Input\n                  id=\"edit-total\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editExpense.total}\n                  readOnly\n                  className=\"bg-muted\"\n                  data-testid=\"input-edit-total\"\n                />\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setEditExpense(null)} data-testid=\"button-cancel-edit\">\n              Cancel\n            </Button>\n            <Button onClick={handleEditExpenseSave} disabled={updateExpenseMutation.isPending} data-testid=\"button-save-edit\">\n              {updateExpenseMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Expense Confirmation */}\n      <AlertDialog open={!!deleteExpenseId} onOpenChange={() => setDeleteExpenseId(null)}>\n        <AlertDialogContent data-testid=\"dialog-delete-expense\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Expense</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this expense? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteExpenseId && deleteExpenseMutation.mutate(deleteExpenseId)}\n              className=\"bg-destructive text-destructive-foreground hover-elevate\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Add Category Dialog */}\n      <Dialog open={showAddCategoryDialog} onOpenChange={setShowAddCategoryDialog}>\n        <DialogContent data-testid=\"dialog-add-category\">\n          <DialogHeader>\n            <DialogTitle>Add Expense Category</DialogTitle>\n            <DialogDescription>Create a new expense category</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"category-name\">Category Name *</Label>\n              <Input\n                id=\"category-name\"\n                placeholder=\"e.g., Office Supplies\"\n                value={categoryFormData.name}\n                onChange={(e) => setCategoryFormData({ ...categoryFormData, name: e.target.value })}\n                data-testid=\"input-category-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"category-description\">Description</Label>\n              <Input\n                id=\"category-description\"\n                placeholder=\"Optional description\"\n                value={categoryFormData.description}\n                onChange={(e) => setCategoryFormData({ ...categoryFormData, description: e.target.value })}\n                data-testid=\"input-category-description\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAddCategoryDialog(false)} data-testid=\"button-cancel-category\">\n              Cancel\n            </Button>\n            <Button onClick={handleAddCategory} disabled={createCategoryMutation.isPending} data-testid=\"button-save-category\">\n              {createCategoryMutation.isPending ? \"Saving...\" : \"Save Category\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Category Dialog */}\n      <Dialog open={!!editCategory} onOpenChange={() => setEditCategory(null)}>\n        <DialogContent data-testid=\"dialog-edit-category\">\n          <DialogHeader>\n            <DialogTitle>Edit Category</DialogTitle>\n            <DialogDescription>Modify category details</DialogDescription>\n          </DialogHeader>\n          {editCategory && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"edit-category-name\">Category Name</Label>\n                <Input\n                  id=\"edit-category-name\"\n                  value={editCategory.name}\n                  onChange={(e) => setEditCategory({ ...editCategory, name: e.target.value })}\n                  data-testid=\"input-edit-category-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-category-description\">Description</Label>\n                <Input\n                  id=\"edit-category-description\"\n                  value={editCategory.description || \"\"}\n                  onChange={(e) => setEditCategory({ ...editCategory, description: e.target.value })}\n                  data-testid=\"input-edit-category-description\"\n                />\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setEditCategory(null)} data-testid=\"button-cancel-edit-category\">\n              Cancel\n            </Button>\n            <Button onClick={handleEditCategorySave} disabled={updateCategoryMutation.isPending} data-testid=\"button-save-edit-category\">\n              {updateCategoryMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Category Confirmation */}\n      <AlertDialog open={!!deleteCategoryId} onOpenChange={() => setDeleteCategoryId(null)}>\n        <AlertDialogContent data-testid=\"dialog-delete-category\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Category</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this category? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-category\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteCategoryId && deleteCategoryMutation.mutate(deleteCategoryId)}\n              className=\"bg-destructive text-destructive-foreground hover-elevate\"\n              data-testid=\"button-confirm-delete-category\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":40903},"client/src/pages/hrm.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Eye, Edit2, Trash2, Users, Calendar, FileText, DollarSign, BarChart3, Upload, Download, FileSpreadsheet } from \"lucide-react\";\nimport * as XLSX from \"xlsx\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { insertEmployeeSchema, type Employee, type InsertEmployee, insertAttendanceSchema, type Attendance, type InsertAttendance, insertLeaveSchema, type Leave, type InsertLeave, insertPayrollSchema, type Payroll, type InsertPayroll } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\n\nexport default function HRM() {\n  const [activeTab, setActiveTab] = useState(\"employees\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const { toast } = useToast();\n\n  const { data: employees = [], isLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  });\n\n  const addForm = useForm<InsertEmployee>({\n    resolver: zodResolver(insertEmployeeSchema),\n    defaultValues: {\n      employeeId: \"\",\n      name: \"\",\n      position: \"\",\n      department: \"\",\n      email: null,\n      phone: null,\n      joiningDate: new Date(),\n      salary: \"0\",\n      photoUrl: null,\n      status: \"active\",\n    },\n  });\n\n  const editForm = useForm<InsertEmployee>({\n    resolver: zodResolver(insertEmployeeSchema),\n    defaultValues: {\n      employeeId: \"\",\n      name: \"\",\n      position: \"\",\n      department: \"\",\n      email: null,\n      phone: null,\n      joiningDate: new Date(),\n      salary: \"0\",\n      photoUrl: null,\n      status: \"active\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertEmployee) => {\n      const res = await apiRequest(\"POST\", \"/api/employees\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      toast({ title: \"Success\", description: \"Employee added successfully\" });\n      setIsAddDialogOpen(false);\n      addForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to add employee\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertEmployee> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/employees/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      toast({ title: \"Success\", description: \"Employee updated successfully\" });\n      setIsEditDialogOpen(false);\n      setSelectedEmployee(null);\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update employee\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/employees/${id}`);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      toast({ title: \"Success\", description: \"Employee deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete employee\", variant: \"destructive\" });\n    },\n  });\n\n  const handleAdd = (data: InsertEmployee) => {\n    const formattedData = {\n      ...data,\n      email: data.email || null,\n      phone: data.phone || null,\n      photoUrl: data.photoUrl || null,\n    };\n    createMutation.mutate(formattedData);\n  };\n\n  const handleEdit = (data: InsertEmployee) => {\n    if (!selectedEmployee) return;\n    const formattedData = {\n      ...data,\n      email: data.email || null,\n      phone: data.phone || null,\n      photoUrl: data.photoUrl || null,\n    };\n    updateMutation.mutate({ id: selectedEmployee.id, data: formattedData });\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this employee?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const openEditDialog = (employee: Employee) => {\n    setSelectedEmployee(employee);\n    editForm.reset({\n      employeeId: employee.employeeId,\n      name: employee.name,\n      position: employee.position,\n      department: employee.department,\n      email: employee.email || \"\",\n      phone: employee.phone || \"\",\n      joiningDate: new Date(employee.joiningDate),\n      salary: employee.salary,\n      photoUrl: employee.photoUrl || \"\",\n      status: employee.status,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const openViewDialog = (employee: Employee) => {\n    setSelectedEmployee(employee);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleExportToCSV = () => {\n    if (employees.length === 0) {\n      toast({ title: \"No Data\", description: \"No employees to export\", variant: \"destructive\" });\n      return;\n    }\n\n    const csvData = employees.map((emp) => ({\n      \"Employee ID\": emp.employeeId,\n      Name: emp.name,\n      Position: emp.position,\n      Department: emp.department,\n      Email: emp.email || \"\",\n      Phone: emp.phone || \"\",\n      \"Joining Date\": format(new Date(emp.joiningDate), \"yyyy-MM-dd\"),\n      Salary: emp.salary,\n      \"Photo URL\": emp.photoUrl || \"\",\n      Status: emp.status,\n    }));\n\n    const worksheet = XLSX.utils.json_to_sheet(csvData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Employees\");\n    XLSX.writeFile(workbook, `employees_${format(new Date(), \"yyyy-MM-dd\")}.csv`);\n    toast({ title: \"Success\", description: \"Employees exported successfully\" });\n  };\n\n  const handleImportFromExcel = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target?.result as ArrayBuffer);\n        const workbook = XLSX.read(data, { type: \"array\", cellDates: true });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n        if (jsonData.length === 0) {\n          toast({ title: \"Error\", description: \"No data found in file\", variant: \"destructive\" });\n          return;\n        }\n\n        let successCount = 0;\n        let errorCount = 0;\n\n        jsonData.forEach((row: any) => {\n          try {\n            const joiningDate = row[\"Joining Date\"];\n            let parsedDate: Date;\n\n            if (joiningDate instanceof Date) {\n              parsedDate = joiningDate;\n            } else if (typeof joiningDate === \"string\") {\n              parsedDate = new Date(joiningDate);\n            } else {\n              parsedDate = new Date();\n            }\n\n            const employeeData: InsertEmployee = {\n              employeeId: String(row[\"Employee ID\"] || \"\"),\n              name: String(row[\"Name\"] || \"\"),\n              position: String(row[\"Position\"] || \"\"),\n              department: String(row[\"Department\"] || \"\"),\n              email: row[\"Email\"] ? String(row[\"Email\"]) : null,\n              phone: row[\"Phone\"] ? String(row[\"Phone\"]) : null,\n              joiningDate: parsedDate,\n              salary: String(row[\"Salary\"] || \"0\"),\n              photoUrl: row[\"Photo URL\"] ? String(row[\"Photo URL\"]) : null,\n              status: String(row[\"Status\"] || \"active\"),\n            };\n\n            createMutation.mutate(employeeData, {\n              onSuccess: () => {\n                successCount++;\n              },\n              onError: () => {\n                errorCount++;\n              },\n            });\n          } catch (error) {\n            errorCount++;\n          }\n        });\n\n        setTimeout(() => {\n          toast({\n            title: \"Import Complete\",\n            description: `Successfully imported ${successCount} employees. ${errorCount > 0 ? `Failed: ${errorCount}` : \"\"}`,\n          });\n        }, 1000);\n      } catch (error) {\n        toast({ title: \"Error\", description: \"Failed to parse file\", variant: \"destructive\" });\n      }\n    };\n    reader.readAsArrayBuffer(file);\n    event.target.value = \"\";\n  };\n\n  const handleDownloadSampleTemplate = () => {\n    const sampleData = [\n      {\n        \"Employee ID\": \"EMP001\",\n        Name: \"John Doe\",\n        Position: \"Manager\",\n        Department: \"Admin\",\n        Email: \"john.doe@example.com\",\n        Phone: \"+1234567890\",\n        \"Joining Date\": \"2024-01-15\",\n        Salary: \"5000.00\",\n        \"Photo URL\": \"https://example.com/photo.jpg\",\n        Status: \"active\",\n      },\n      {\n        \"Employee ID\": \"EMP002\",\n        Name: \"Jane Smith\",\n        Position: \"Chef\",\n        Department: \"Kitchen\",\n        Email: \"jane.smith@example.com\",\n        Phone: \"+1234567891\",\n        \"Joining Date\": \"2024-02-01\",\n        Salary: \"4000.00\",\n        \"Photo URL\": \"\",\n        Status: \"active\",\n      },\n    ];\n\n    const worksheet = XLSX.utils.json_to_sheet(sampleData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Employees\");\n    XLSX.writeFile(workbook, \"employee_template.xlsx\");\n    toast({ title: \"Success\", description: \"Sample template downloaded successfully\" });\n  };\n\n  const handleDownloadScheduleTemplate = () => {\n    const today = new Date();\n    const sampleScheduleData: Array<{\n      \"Employee ID\": string;\n      \"Employee Name\": string;\n      Date: string;\n      \"Shift Start\": string;\n      \"Shift End\": string;\n      \"Day Off\": string;\n    }> = [];\n    \n    // Generate sample data for a full month (30 days) for 3 employees\n    const employees = [\n      { id: \"EMP001\", name: \"John Smith\", shift: { start: \"09:00 AM\", end: \"05:00 PM\" } },\n      { id: \"EMP002\", name: \"Sarah Johnson\", shift: { start: \"08:00 AM\", end: \"04:00 PM\" } },\n      { id: \"EMP003\", name: \"Michael Chen\", shift: { start: \"10:00 AM\", end: \"06:00 PM\" } },\n    ];\n\n    for (let day = 1; day <= 30; day++) {\n      const date = new Date(today.getFullYear(), today.getMonth(), day);\n      const dateStr = format(date, \"yyyy-MM-dd\");\n      \n      employees.forEach((emp, index) => {\n        // Every 7th day is a day off for demonstration\n        const isDayOff = day % 7 === (index + 1);\n        \n        sampleScheduleData.push({\n          \"Employee ID\": emp.id,\n          \"Employee Name\": emp.name,\n          Date: dateStr,\n          \"Shift Start\": isDayOff ? \"\" : emp.shift.start,\n          \"Shift End\": isDayOff ? \"\" : emp.shift.end,\n          \"Day Off\": isDayOff ? \"Yes\" : \"No\",\n        });\n      });\n    }\n\n    const worksheet = XLSX.utils.json_to_sheet(sampleScheduleData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Schedule\");\n    XLSX.writeFile(workbook, `employee_schedule_template_${format(today, \"MMMM_yyyy\")}.xlsx`);\n    toast({ \n      title: \"Success\", \n      description: `Full month schedule template downloaded (${sampleScheduleData.length} entries for 30 days)` \n    });\n  };\n\n  const handleUploadSchedule = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target?.result as ArrayBuffer);\n        const workbook = XLSX.read(data, { type: \"array\", cellDates: true });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n        if (jsonData.length === 0) {\n          toast({ title: \"Error\", description: \"No schedule data found in file\", variant: \"destructive\" });\n          return;\n        }\n\n        const employeeIds = new Set(jsonData.map((row: any) => row[\"Employee ID\"]));\n        const dates = new Set(jsonData.map((row: any) => row[\"Date\"]));\n        \n        console.log(\"Full Month Schedule Data:\", jsonData);\n        console.log(\"Employees scheduled:\", employeeIds.size);\n        console.log(\"Days covered:\", dates.size);\n        \n        toast({\n          title: \"Full Month Schedule Imported\",\n          description: `Successfully imported ${jsonData.length} schedule entries for ${employeeIds.size} employees across ${dates.size} days`,\n        });\n      } catch (error) {\n        toast({ title: \"Error\", description: \"Failed to parse schedule file\", variant: \"destructive\" });\n      }\n    };\n    reader.readAsArrayBuffer(file);\n    event.target.value = \"\";\n  };\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Human Resource Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage employees, attendance, leave, payroll and reports</p>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"employees\" data-testid=\"tab-employees\" className=\"gap-2\">\n              <Users className=\"w-4 h-4\" />\n              Employees\n            </TabsTrigger>\n            <TabsTrigger value=\"attendance\" data-testid=\"tab-attendance\" className=\"gap-2\">\n              <Calendar className=\"w-4 h-4\" />\n              Attendance\n            </TabsTrigger>\n            <TabsTrigger value=\"leave\" data-testid=\"tab-leave\" className=\"gap-2\">\n              <FileText className=\"w-4 h-4\" />\n              Leave\n            </TabsTrigger>\n            <TabsTrigger value=\"payroll\" data-testid=\"tab-payroll\" className=\"gap-2\">\n              <DollarSign className=\"w-4 h-4\" />\n              Payroll\n            </TabsTrigger>\n            <TabsTrigger value=\"reports\" data-testid=\"tab-reports\" className=\"gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              Reports\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"employees\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>Employee Management</CardTitle>\n                    <CardDescription>View and manage all employees</CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    <Button variant=\"outline\" onClick={handleDownloadSampleTemplate} data-testid=\"button-download-template\">\n                      <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                      Employee Template\n                    </Button>\n                    <Button variant=\"outline\" onClick={handleDownloadScheduleTemplate} data-testid=\"button-download-schedule-template\">\n                      <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                      Schedule Template\n                    </Button>\n                    <Button variant=\"outline\" onClick={handleExportToCSV} data-testid=\"button-export-employees\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export\n                    </Button>\n                    <Button variant=\"outline\" asChild data-testid=\"button-import-employees\">\n                      <label className=\"cursor-pointer\">\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Import\n                        <input\n                          type=\"file\"\n                          accept=\".xlsx,.xls,.csv\"\n                          onChange={handleImportFromExcel}\n                          className=\"hidden\"\n                          data-testid=\"input-import-file\"\n                        />\n                      </label>\n                    </Button>\n                    <Button variant=\"outline\" asChild data-testid=\"button-upload-schedule\">\n                      <label className=\"cursor-pointer\">\n                        <Calendar className=\"w-4 h-4 mr-2\" />\n                        Import Full Month Schedule\n                        <input\n                          type=\"file\"\n                          accept=\".xlsx,.xls,.csv\"\n                          onChange={handleUploadSchedule}\n                          className=\"hidden\"\n                          data-testid=\"input-schedule-file\"\n                        />\n                      </label>\n                    </Button>\n                    <Button onClick={() => setIsAddDialogOpen(true)} data-testid=\"button-add-employee\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Employee\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"text-center py-8\">Loading employees...</div>\n                ) : employees.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">No employees found</div>\n                ) : (\n                  <Table data-testid=\"table-employees\">\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Employee ID</TableHead>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Position</TableHead>\n                        <TableHead>Department</TableHead>\n                        <TableHead>Contact</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {employees.map((employee) => (\n                        <TableRow key={employee.id} data-testid={`row-employee-${employee.id}`}>\n                          <TableCell className=\"font-medium\">{employee.employeeId}</TableCell>\n                          <TableCell>{employee.name}</TableCell>\n                          <TableCell>{employee.position}</TableCell>\n                          <TableCell>{employee.department}</TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              {employee.email && <div>{employee.email}</div>}\n                              {employee.phone && <div className=\"text-muted-foreground\">{employee.phone}</div>}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge\n                              variant={employee.status === \"active\" ? \"default\" : \"secondary\"}\n                              data-testid={`badge-status-${employee.id}`}\n                            >\n                              {employee.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => openViewDialog(employee)}\n                                data-testid={`button-view-${employee.id}`}\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => openEditDialog(employee)}\n                                data-testid={`button-edit-${employee.id}`}\n                              >\n                                <Edit2 className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => handleDelete(employee.id)}\n                                data-testid={`button-delete-${employee.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"attendance\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>Staff Schedule</CardTitle>\n                    <CardDescription>Manage employee work schedules and shifts</CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    <Button variant=\"outline\" onClick={handleDownloadScheduleTemplate} data-testid=\"button-download-schedule-template-attendance\">\n                      <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                      Download Template\n                    </Button>\n                    <Button variant=\"outline\" asChild data-testid=\"button-upload-schedule-attendance\">\n                      <label className=\"cursor-pointer\">\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Upload Schedule\n                        <input\n                          type=\"file\"\n                          accept=\".xlsx,.xls,.csv\"\n                          onChange={handleUploadSchedule}\n                          className=\"hidden\"\n                          data-testid=\"input-schedule-file-attendance\"\n                        />\n                      </label>\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"text-center py-8\">Loading schedule...</div>\n                ) : employees.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Calendar className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>No employees available</p>\n                    <p className=\"text-sm mt-2\">Add employees to create work schedules</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"bg-muted/50 p-4 rounded-lg\">\n                      <h3 className=\"font-semibold mb-3\">Today's Schedule - {format(new Date(), \"MMMM dd, yyyy\")}</h3>\n                      <Table data-testid=\"table-staff-schedule\">\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Employee ID</TableHead>\n                            <TableHead>Name</TableHead>\n                            <TableHead>Position</TableHead>\n                            <TableHead>Department</TableHead>\n                            <TableHead>Shift Time</TableHead>\n                            <TableHead>Status</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {employees.filter(emp => emp.status === \"active\").map((employee) => (\n                            <TableRow key={employee.id} data-testid={`row-schedule-${employee.id}`}>\n                              <TableCell className=\"font-medium\">{employee.employeeId}</TableCell>\n                              <TableCell>{employee.name}</TableCell>\n                              <TableCell>{employee.position}</TableCell>\n                              <TableCell>{employee.department}</TableCell>\n                              <TableCell>\n                                <div className=\"text-sm\">\n                                  {employee.department === \"Kitchen\" ? \"08:00 AM - 04:00 PM\" : \n                                   employee.department === \"Admin\" ? \"09:00 AM - 05:00 PM\" : \n                                   employee.position.toLowerCase().includes(\"chef\") ? \"10:00 AM - 06:00 PM\" :\n                                   \"09:00 AM - 05:00 PM\"}\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant=\"default\" data-testid={`badge-shift-status-${employee.id}`}>\n                                  Scheduled\n                                </Badge>\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                    \n                    <div className=\"bg-muted/30 p-4 rounded-lg space-y-3\">\n                      <h4 className=\"font-medium\">Schedule Management Instructions</h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-2 list-disc list-inside\">\n                        <li>Download the schedule template to create employee work schedules</li>\n                        <li>Fill in the template with employee IDs, dates, shift times, and day-off information</li>\n                        <li>Upload the completed schedule file to update employee shifts</li>\n                        <li>The template supports multiple employees and multiple dates</li>\n                        <li>Mark \"Day Off\" as \"Yes\" for employees who are not working on specific dates</li>\n                      </ul>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"leave\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Leave Management</CardTitle>\n                <CardDescription>Manage leave requests and approvals</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <FileText className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>Leave management will be implemented here</p>\n                  <p className=\"text-sm mt-2\">Apply for leave, approve/reject requests, and track leave balance</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"payroll\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Payroll & Salary</CardTitle>\n                <CardDescription>Manage salary records and generate payslips</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <DollarSign className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>Payroll management will be implemented here</p>\n                  <p className=\"text-sm mt-2\">Manage salary records, calculate bonuses/deductions, and generate payslips</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"reports\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Reports & Analytics</CardTitle>\n                <CardDescription>Export and view HR reports</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <BarChart3 className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>Reports and analytics will be implemented here</p>\n                  <p className=\"text-sm mt-2\">Export attendance, leave, and payroll summaries</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-add-employee\">\n            <DialogHeader>\n              <DialogTitle>Add New Employee</DialogTitle>\n              <DialogDescription>Fill in the employee details to add to the system</DialogDescription>\n            </DialogHeader>\n            <Form {...addForm}>\n              <form onSubmit={addForm.handleSubmit(handleAdd)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addForm.control}\n                    name=\"employeeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Employee ID</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"EMP001\" data-testid=\"input-employee-id\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={addForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"John Doe\" data-testid=\"input-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={addForm.control}\n                    name=\"position\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Position</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Manager\" data-testid=\"input-position\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={addForm.control}\n                    name=\"department\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Department</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Admin\" data-testid=\"input-department\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={addForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} type=\"email\" placeholder=\"email@example.com\" data-testid=\"input-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={addForm.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"+1234567890\" data-testid=\"input-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={addForm.control}\n                    name=\"joiningDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Joining Date</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"date\"\n                            value={field.value ? format(new Date(field.value), \"yyyy-MM-dd\") : \"\"}\n                            onChange={(e) => field.onChange(new Date(e.target.value))}\n                            data-testid=\"input-joining-date\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={addForm.control}\n                    name=\"salary\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Salary</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"5000.00\" data-testid=\"input-salary\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={addForm.control}\n                    name=\"photoUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Photo URL (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"https://example.com/photo.jpg\" data-testid=\"input-photo-url\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={addForm.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Status</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-status\">\n                              <SelectValue placeholder=\"Select status\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"active\">Active</SelectItem>\n                            <SelectItem value=\"inactive\">Inactive</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <DialogFooter>\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} data-testid=\"button-cancel-add\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-add\">\n                    {createMutation.isPending ? \"Adding...\" : \"Add Employee\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-edit-employee\">\n            <DialogHeader>\n              <DialogTitle>Edit Employee</DialogTitle>\n              <DialogDescription>Update employee details</DialogDescription>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(handleEdit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"employeeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Employee ID</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"EMP001\" data-testid=\"input-edit-employee-id\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"John Doe\" data-testid=\"input-edit-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"position\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Position</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Manager\" data-testid=\"input-edit-position\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"department\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Department</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Admin\" data-testid=\"input-edit-department\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} type=\"email\" placeholder=\"email@example.com\" data-testid=\"input-edit-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"+1234567890\" data-testid=\"input-edit-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"joiningDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Joining Date</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"date\"\n                            value={field.value ? format(new Date(field.value), \"yyyy-MM-dd\") : \"\"}\n                            onChange={(e) => field.onChange(new Date(e.target.value))}\n                            data-testid=\"input-edit-joining-date\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"salary\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Salary</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"5000.00\" data-testid=\"input-edit-salary\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"photoUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Photo URL (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"https://example.com/photo.jpg\" data-testid=\"input-edit-photo-url\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Status</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-status\">\n                              <SelectValue placeholder=\"Select status\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"active\">Active</SelectItem>\n                            <SelectItem value=\"inactive\">Inactive</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <DialogFooter>\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditDialogOpen(false)} data-testid=\"button-cancel-edit\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={updateMutation.isPending} data-testid=\"button-submit-edit\">\n                    {updateMutation.isPending ? \"Updating...\" : \"Update Employee\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n          <DialogContent data-testid=\"dialog-view-employee\">\n            <DialogHeader>\n              <DialogTitle>Employee Details</DialogTitle>\n              <DialogDescription>View complete employee information</DialogDescription>\n            </DialogHeader>\n            {selectedEmployee && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-muted-foreground\">Employee ID</Label>\n                    <p className=\"font-medium\" data-testid=\"text-view-employee-id\">{selectedEmployee.employeeId}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Name</Label>\n                    <p className=\"font-medium\" data-testid=\"text-view-name\">{selectedEmployee.name}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Position</Label>\n                    <p className=\"font-medium\" data-testid=\"text-view-position\">{selectedEmployee.position}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Department</Label>\n                    <p className=\"font-medium\" data-testid=\"text-view-department\">{selectedEmployee.department}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Email</Label>\n                    <p className=\"font-medium\" data-testid=\"text-view-email\">{selectedEmployee.email || \"N/A\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Phone</Label>\n                    <p className=\"font-medium\" data-testid=\"text-view-phone\">{selectedEmployee.phone || \"N/A\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Joining Date</Label>\n                    <p className=\"font-medium\" data-testid=\"text-view-joining-date\">\n                      {format(new Date(selectedEmployee.joiningDate), \"MMM dd, yyyy\")}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Salary</Label>\n                    <p className=\"font-medium\" data-testid=\"text-view-salary\">${selectedEmployee.salary}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Status</Label>\n                    <Badge variant={selectedEmployee.status === \"active\" ? \"default\" : \"secondary\"} data-testid=\"badge-view-status\">\n                      {selectedEmployee.status}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            )}\n            <DialogFooter>\n              <Button onClick={() => setIsViewDialogOpen(false)} data-testid=\"button-close-view\">Close</Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":47095},"client/src/pages/items.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema, insertCategorySchema, type Product, type Category } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport { Plus, Search, Download, Upload, Edit, Trash2, PackagePlus, FolderPlus, Utensils, Calendar, ImagePlus, X, FileSpreadsheet } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport * as XLSX from 'xlsx';\n\nconst UNIT_OPTIONS = [\"piece\", \"kg\", \"gram\", \"ml\", \"litre\", \"plate\", \"serving\", \"bowl\", \"cup\", \"glass\", \"box\"];\n\nconst DATE_FILTER_OPTIONS = [\n  { label: \"All Time\", value: \"all\" },\n  { label: \"Today\", value: \"today\" },\n  { label: \"Yesterday\", value: \"yesterday\" },\n  { label: \"Custom Date\", value: \"custom\" },\n];\n\nexport default function ItemManage() {\n  const [itemDialogOpen, setItemDialogOpen] = useState(false);\n  const [categoryDialogOpen, setCategoryDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<Product | null>(null);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [dateFilter, setDateFilter] = useState<string>(\"all\");\n  const [customDate, setCustomDate] = useState<Date | undefined>(undefined);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const { toast } = useToast();\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: allProducts = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const filteredProducts = allProducts.filter((product) => {\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      product.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = selectedCategory === \"all\" || product.categoryId === selectedCategory;\n    \n    let matchesDate = true;\n    if (dateFilter === \"today\") {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const productDate = new Date(product.createdAt);\n      productDate.setHours(0, 0, 0, 0);\n      matchesDate = productDate.getTime() === today.getTime();\n    } else if (dateFilter === \"yesterday\") {\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      yesterday.setHours(0, 0, 0, 0);\n      const productDate = new Date(product.createdAt);\n      productDate.setHours(0, 0, 0, 0);\n      matchesDate = productDate.getTime() === yesterday.getTime();\n    } else if (dateFilter === \"custom\" && customDate) {\n      const selectedDate = new Date(customDate);\n      selectedDate.setHours(0, 0, 0, 0);\n      const productDate = new Date(product.createdAt);\n      productDate.setHours(0, 0, 0, 0);\n      matchesDate = productDate.getTime() === selectedDate.getTime();\n    }\n\n    return matchesSearch && matchesCategory && matchesDate;\n  });\n\n  const itemForm = useForm<z.infer<typeof insertProductSchema>>({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      name: \"\",\n      price: \"\",\n      purchaseCost: \"\",\n      categoryId: \"\",\n      imageUrl: \"\",\n      unit: \"piece\",\n      description: \"\",\n      quantity: \"0\",\n    },\n  });\n\n  const categoryForm = useForm<z.infer<typeof insertCategorySchema>>({\n    resolver: zodResolver(insertCategorySchema),\n    defaultValues: {\n      name: \"\",\n      slug: \"\",\n    },\n  });\n\n  const createItemMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof insertProductSchema>) => {\n      return await apiRequest(\"POST\", \"/api/products\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setItemDialogOpen(false);\n      itemForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Item created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateItemMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<z.infer<typeof insertProductSchema>> }) => {\n      return await apiRequest(\"PATCH\", `/api/products/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setItemDialogOpen(false);\n      setEditingItem(null);\n      itemForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Item updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/products/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Item deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof insertCategorySchema>) => {\n      return await apiRequest(\"POST\", \"/api/categories\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setCategoryDialogOpen(false);\n      categoryForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<z.infer<typeof insertCategorySchema>> }) => {\n      return await apiRequest(\"PATCH\", `/api/categories/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setCategoryDialogOpen(false);\n      setEditingCategory(null);\n      categoryForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Category updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/categories/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Category deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleItemSubmit = (data: z.infer<typeof insertProductSchema>) => {\n    if (editingItem) {\n      updateItemMutation.mutate({ id: editingItem.id, data });\n    } else {\n      createItemMutation.mutate(data);\n    }\n  };\n\n  const handleCategorySubmit = (data: z.infer<typeof insertCategorySchema>) => {\n    const categoryData = {\n      ...data,\n      slug: data.slug || data.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, ''),\n    };\n    if (editingCategory) {\n      updateCategoryMutation.mutate({ id: editingCategory.id, data: categoryData });\n    } else {\n      createCategoryMutation.mutate(categoryData);\n    }\n  };\n\n  const handleEditItem = (item: Product) => {\n    setEditingItem(item);\n    setImagePreview(item.imageUrl || \"\");\n    itemForm.reset({\n      name: item.name,\n      price: item.price,\n      purchaseCost: item.purchaseCost || \"\",\n      categoryId: item.categoryId,\n      imageUrl: item.imageUrl || \"\",\n      unit: item.unit,\n      description: item.description || \"\",\n      quantity: item.quantity,\n    });\n    setItemDialogOpen(true);\n  };\n\n  const handleEditCategory = (category: Category) => {\n    setEditingCategory(category);\n    categoryForm.reset({\n      name: category.name,\n      slug: category.slug,\n    });\n    setCategoryDialogOpen(true);\n  };\n\n  const handleAddItemClick = () => {\n    setEditingItem(null);\n    setImagePreview(\"\");\n    itemForm.reset({\n      name: \"\",\n      price: \"\",\n      purchaseCost: \"\",\n      categoryId: \"\",\n      imageUrl: \"\",\n      unit: \"piece\",\n      description: \"\",\n      quantity: \"0\",\n    });\n    setItemDialogOpen(true);\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file\",\n        description: \"Please upload an image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const base64String = reader.result as string;\n      setImagePreview(base64String);\n      itemForm.setValue('imageUrl', base64String);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleRemoveImage = () => {\n    setImagePreview(\"\");\n    itemForm.setValue('imageUrl', \"\");\n  };\n\n  const handleAddCategoryClick = () => {\n    setEditingCategory(null);\n    categoryForm.reset({\n      name: \"\",\n      slug: \"\",\n    });\n    setCategoryDialogOpen(true);\n  };\n\n  const handleExport = () => {\n    const csvHeaders = \"Name,Category,Purchase Cost,Sales Price,Unit,Quantity,Description,Created At\\n\";\n    const csvRows = filteredProducts.map(product => {\n      const category = categories.find(c => c.id === product.categoryId)?.name || \"\";\n      return `\"${product.name}\",\"${category}\",\"${product.purchaseCost || \"\"}\",\"${product.price}\",\"${product.unit}\",\"${product.quantity}\",\"${product.description || \"\"}\",\"${format(new Date(product.createdAt), \"yyyy-MM-dd\")}\"`;\n    }).join(\"\\n\");\n    \n    const csv = csvHeaders + csvRows;\n    const blob = new Blob([csv], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `items-${format(new Date(), \"yyyy-MM-dd\")}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"Success\",\n      description: \"Items exported successfully\",\n    });\n  };\n\n  const handleImport = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    const isExcel = file.name.endsWith('.xlsx') || file.name.endsWith('.xls');\n    const reader = new FileReader();\n    \n    reader.onload = async (event) => {\n      let rows: any[][] = [];\n      \n      if (isExcel) {\n        const data = new Uint8Array(event.target?.result as ArrayBuffer);\n        const workbook = XLSX.read(data, { type: 'array', cellDates: true, raw: false });\n        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1, raw: false }) as any[][];\n        rows = jsonData.slice(1);\n      } else {\n        const text = event.target?.result as string;\n        const lines = text.split('\\n').slice(1);\n        rows = lines.map(line => {\n          if (!line.trim()) return [];\n          const matches = line.match(/(?:\"([^\"]*)\"|([^,]*))/g);\n          return matches ? matches.map(m => m.replace(/^\"|\"$/g, '').trim()) : [];\n        });\n      }\n      \n      let imported = 0;\n      let skipped = 0;\n      for (const row of rows) {\n        if (!row || row.length < 6) continue;\n\n        const name = (row[0] || \"\").toString().trim();\n        const categoryName = (row[1] || \"\").toString().trim();\n        const purchaseCost = (row[2] || \"\").toString().trim();\n        const price = (row[3] || \"\").toString().trim();\n        const unit = (row[4] || \"\").toString().trim();\n        const quantity = (row[5] || \"\").toString().trim();\n        const description = (row[6] || \"\").toString().trim();\n\n        const category = categories.find(c => c.name.toLowerCase() === categoryName.toLowerCase());\n        if (!category) {\n          skipped++;\n          continue;\n        }\n\n        try {\n          await apiRequest(\"POST\", \"/api/products\", {\n            name,\n            categoryId: category.id,\n            purchaseCost: purchaseCost || undefined,\n            price,\n            unit,\n            quantity,\n            description,\n            imageUrl: \"\",\n          });\n          imported++;\n        } catch (error) {\n          console.error(\"Failed to import item:\", name, error);\n          skipped++;\n        }\n      }\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Import Complete\",\n        description: `Successfully imported ${imported} items. ${skipped > 0 ? `${skipped} items skipped.` : ''}`,\n      });\n    };\n\n    if (isExcel) {\n      reader.readAsArrayBuffer(file);\n    } else {\n      reader.readAsText(file);\n    }\n    e.target.value = \"\";\n  };\n\n  const handleDownloadSample = () => {\n    const sampleData = [\n      [\"Name\", \"Category\", \"Purchase Cost\", \"Sales Price\", \"Unit\", \"Quantity\", \"Description\"],\n      [\"Shrimp Basil Salad\", \"Salads\", \"6.00\", \"10.60\", \"plate\", \"50\", \"Fresh shrimp with basil and greens\"],\n      [\"Onion Rings\", \"Beverages\", \"4.50\", \"8.50\", \"serving\", \"100\", \"Crispy fried onion rings\"],\n      [\"Chicken Burger\", \"Soup\", \"6.50\", \"10.50\", \"piece\", \"60\", \"Juicy grilled chicken burger\"],\n      [\"Vegetable Pizza\", \"Pizza\", \"9.00\", \"15.00\", \"piece\", \"40\", \"Mixed vegetable pizza\"],\n    ];\n    \n    const worksheet = XLSX.utils.aoa_to_sheet(sampleData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Items\");\n    \n    const fileName = `items_sample_template.xlsx`;\n    XLSX.writeFile(workbook, fileName);\n    \n    toast({\n      title: \"Success\",\n      description: \"Sample Excel template downloaded\",\n    });\n  };\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between flex-wrap gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Item Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage inventory and menu items</p>\n          </div>\n          <div className=\"flex items-center gap-2 flex-wrap\">\n            <Dialog open={categoryDialogOpen} onOpenChange={setCategoryDialogOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" onClick={handleAddCategoryClick} data-testid=\"button-manage-categories\">\n                  <FolderPlus className=\"w-4 h-4 mr-2\" />\n                  Manage Categories\n                </Button>\n              </DialogTrigger>\n              <DialogContent data-testid=\"dialog-category\">\n                <DialogHeader>\n                  <DialogTitle>{editingCategory ? \"Edit Category\" : \"Add Category\"}</DialogTitle>\n                  <DialogDescription>\n                    {editingCategory ? \"Update category information\" : \"Create a new category for items\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...categoryForm}>\n                  <form onSubmit={categoryForm.handleSubmit(handleCategorySubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={categoryForm.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., Beverages\" data-testid=\"input-category-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={categoryForm.control}\n                      name=\"slug\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Slug</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., beverages\" data-testid=\"input-category-slug\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <DialogFooter>\n                      <Button type=\"submit\" disabled={createCategoryMutation.isPending || updateCategoryMutation.isPending} data-testid=\"button-save-category\">\n                        {editingCategory ? \"Update\" : \"Create\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n\n                {categories.length > 0 && (\n                  <div className=\"mt-4 space-y-2\">\n                    <h3 className=\"font-medium text-sm\">Existing Categories</h3>\n                    <div className=\"space-y-2\">\n                      {categories.map((category) => (\n                        <div key={category.id} className=\"flex items-center justify-between p-2 rounded-md border\" data-testid={`category-item-${category.id}`}>\n                          <span className=\"text-sm\">{category.name}</span>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => handleEditCategory(category)}\n                              data-testid={`button-edit-category-${category.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => deleteCategoryMutation.mutate(category.id)}\n                              data-testid={`button-delete-category-${category.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </DialogContent>\n            </Dialog>\n\n            <div>\n              <input\n                id=\"import-file\"\n                type=\"file\"\n                accept=\".csv,.xlsx,.xls\"\n                className=\"hidden\"\n                onChange={handleImport}\n                data-testid=\"input-import-file\"\n              />\n              <Button \n                variant=\"outline\" \n                onClick={() => document.getElementById('import-file')?.click()}\n                data-testid=\"button-import\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Import Items\n              </Button>\n            </div>\n\n            <Button variant=\"outline\" onClick={handleDownloadSample} data-testid=\"button-download-sample\">\n              <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n              Download Sample Excel\n            </Button>\n\n            <Button variant=\"outline\" onClick={handleExport} data-testid=\"button-export\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Items\n            </Button>\n\n            <Dialog open={itemDialogOpen} onOpenChange={setItemDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={handleAddItemClick} data-testid=\"button-add-item\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Item\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-item\">\n                <DialogHeader>\n                  <DialogTitle>{editingItem ? \"Edit Item\" : \"Add New Item\"}</DialogTitle>\n                  <DialogDescription>\n                    {editingItem ? \"Update item information\" : \"Create a new inventory item\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...itemForm}>\n                  <form onSubmit={itemForm.handleSubmit(handleItemSubmit)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <FormLabel>Item Image (optional)</FormLabel>\n                      \n                      {imagePreview ? (\n                        <div className=\"relative w-full h-48 rounded-md overflow-hidden border\">\n                          <img\n                            src={imagePreview}\n                            alt=\"Preview\"\n                            className=\"w-full h-full object-cover\"\n                          />\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            className=\"absolute top-2 right-2\"\n                            onClick={handleRemoveImage}\n                            data-testid=\"button-remove-image\"\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-3\">\n                          <label htmlFor=\"item-image-upload\">\n                            <input\n                              id=\"item-image-upload\"\n                              type=\"file\"\n                              accept=\"image/*\"\n                              className=\"hidden\"\n                              onChange={handleImageUpload}\n                              data-testid=\"input-image-upload\"\n                            />\n                            <div className=\"border-2 border-dashed rounded-md p-6 hover-elevate cursor-pointer transition-colors flex flex-col items-center gap-2\">\n                              <ImagePlus className=\"w-8 h-8 text-muted-foreground\" />\n                              <div className=\"text-center\">\n                                <p className=\"text-sm font-medium\">Upload Image</p>\n                                <p className=\"text-xs text-muted-foreground\">Click to select an image file</p>\n                              </div>\n                            </div>\n                          </label>\n                          \n                          <div className=\"relative\">\n                            <div className=\"absolute inset-0 flex items-center\">\n                              <span className=\"w-full border-t\" />\n                            </div>\n                            <div className=\"relative flex justify-center text-xs uppercase\">\n                              <span className=\"bg-background px-2 text-muted-foreground\">Or use URL</span>\n                            </div>\n                          </div>\n\n                          <FormField\n                            control={itemForm.control}\n                            name=\"imageUrl\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    value={field.value || \"\"} \n                                    placeholder=\"https://example.com/image.jpg\" \n                                    data-testid=\"input-image-url\"\n                                    onChange={(e) => {\n                                      field.onChange(e);\n                                      setImagePreview(e.target.value);\n                                    }}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      )}\n                    </div>\n\n                    <FormField\n                      control={itemForm.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Item Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., Fresh Orange Juice\" data-testid=\"input-item-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={itemForm.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-category\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories.map((category) => (\n                                <SelectItem key={category.id} value={category.id}>\n                                  {category.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={itemForm.control}\n                        name=\"purchaseCost\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Purchase Cost</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-purchase-cost\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={itemForm.control}\n                        name=\"price\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Sales Price</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-sales-price\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={itemForm.control}\n                        name=\"unit\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Unit</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-unit\">\n                                  <SelectValue placeholder=\"Select unit\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {UNIT_OPTIONS.map((unit) => (\n                                  <SelectItem key={unit} value={unit}>\n                                    {unit}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={itemForm.control}\n                        name=\"quantity\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Quantity/Stock</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0\" data-testid=\"input-quantity\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={itemForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description (optional)</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} value={field.value || \"\"} placeholder=\"Item description\" rows={3} data-testid=\"input-description\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <DialogFooter>\n                      <Button type=\"submit\" disabled={createItemMutation.isPending || updateItemMutation.isPending} data-testid=\"button-save-item\">\n                        {editingItem ? \"Update Item\" : \"Create Item\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Search & Filter</CardTitle>\n            <CardDescription>Find items by name, category, or date</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search items...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-filter-category\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <div className=\"flex gap-2\">\n                <Select value={dateFilter} onValueChange={setDateFilter}>\n                  <SelectTrigger data-testid=\"select-date-filter\">\n                    <SelectValue placeholder=\"Date Filter\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {DATE_FILTER_OPTIONS.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                {dateFilter === \"custom\" && (\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button variant=\"outline\" data-testid=\"button-custom-date\">\n                        <Calendar className=\"w-4 h-4 mr-2\" />\n                        {customDate ? format(customDate, \"MMM dd, yyyy\") : \"Pick date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <CalendarComponent\n                        mode=\"single\"\n                        selected={customDate}\n                        onSelect={setCustomDate}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Items ({filteredProducts.length})</h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {filteredProducts.map((product) => {\n              const category = categories.find(c => c.id === product.categoryId);\n              return (\n                <Card key={product.id} className=\"overflow-hidden\" data-testid={`card-item-${product.id}`}>\n                  <div className=\"aspect-square bg-muted relative overflow-hidden\">\n                    {product.imageUrl ? (\n                      <img\n                        src={product.imageUrl}\n                        alt={product.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-muted to-accent\">\n                        <Utensils className=\"w-12 h-12 text-muted-foreground\" />\n                      </div>\n                    )}\n                  </div>\n                  <CardContent className=\"p-4 space-y-3\">\n                    <div>\n                      <h3 className=\"font-semibold truncate\" data-testid={`text-item-name-${product.id}`}>{product.name}</h3>\n                      {category && (\n                        <p className=\"text-xs text-muted-foreground\" data-testid={`text-item-category-${product.id}`}>{category.name}</p>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-lg font-bold text-primary font-mono\" data-testid={`text-item-price-${product.id}`}>\n                        ${parseFloat(product.price).toFixed(2)}\n                      </span>\n                      <span className=\"text-sm text-muted-foreground\" data-testid={`text-item-unit-${product.id}`}>\n                        per {product.unit}\n                      </span>\n                    </div>\n\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Stock:</span>\n                      <span className=\"font-medium\" data-testid={`text-item-quantity-${product.id}`}>\n                        {parseFloat(product.quantity)} {product.unit}\n                      </span>\n                    </div>\n\n                    {product.description && (\n                      <p className=\"text-xs text-muted-foreground line-clamp-2\" data-testid={`text-item-description-${product.id}`}>\n                        {product.description}\n                      </p>\n                    )}\n\n                    <div className=\"flex gap-2 pt-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        onClick={() => handleEditItem(product)}\n                        data-testid={`button-edit-item-${product.id}`}\n                      >\n                        <Edit className=\"w-4 h-4 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => deleteItemMutation.mutate(product.id)}\n                        disabled={deleteItemMutation.isPending}\n                        data-testid={`button-delete-item-${product.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {filteredProducts.length === 0 && (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <PackagePlus className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No items found</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  {searchQuery || selectedCategory !== \"all\" || dateFilter !== \"all\"\n                    ? \"Try adjusting your search filters\"\n                    : \"Get started by adding your first item\"}\n                </p>\n                {!searchQuery && selectedCategory === \"all\" && dateFilter === \"all\" && (\n                  <Button onClick={handleAddItemClick} data-testid=\"button-add-first-item\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Your First Item\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":39270},"client/src/pages/purchases.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertPurchaseSchema, insertCategorySchema, type Purchase, type Category } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport { Plus, Search, Download, Upload, Edit, Trash2, FolderPlus, Calendar, ImagePlus, X, ShoppingCart, Eye, Printer, FileSpreadsheet } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport * as XLSX from 'xlsx';\n\nconst UNIT_OPTIONS = [\"kg\", \"gram\", \"ml\", \"litre\", \"piece\", \"box\", \"packet\", \"bottle\", \"can\", \"bag\"];\n\nconst DATE_FILTER_OPTIONS = [\n  { label: \"All Time\", value: \"all\" },\n  { label: \"Today\", value: \"today\" },\n  { label: \"Yesterday\", value: \"yesterday\" },\n  { label: \"Custom Date\", value: \"custom\" },\n];\n\nexport default function PurchaseManage() {\n  const [purchaseDialogOpen, setPurchaseDialogOpen] = useState(false);\n  const [categoryDialogOpen, setCategoryDialogOpen] = useState(false);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [editingPurchase, setEditingPurchase] = useState<Purchase | null>(null);\n  const [viewingPurchase, setViewingPurchase] = useState<Purchase | null>(null);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [dateFilter, setDateFilter] = useState<string>(\"all\");\n  const [customDate, setCustomDate] = useState<Date | undefined>(undefined);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const { toast } = useToast();\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: allPurchases = [] } = useQuery<Purchase[]>({\n    queryKey: [\"/api/purchases\"],\n  });\n\n  const filteredPurchases = allPurchases.filter((purchase) => {\n    const matchesSearch = purchase.itemName.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = selectedCategory === \"all\" || purchase.categoryId === selectedCategory;\n    \n    let matchesDate = true;\n    if (dateFilter === \"today\") {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const purchaseDate = new Date(purchase.purchaseDate);\n      purchaseDate.setHours(0, 0, 0, 0);\n      matchesDate = purchaseDate.getTime() === today.getTime();\n    } else if (dateFilter === \"yesterday\") {\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      yesterday.setHours(0, 0, 0, 0);\n      const purchaseDate = new Date(purchase.purchaseDate);\n      purchaseDate.setHours(0, 0, 0, 0);\n      matchesDate = purchaseDate.getTime() === yesterday.getTime();\n    } else if (dateFilter === \"custom\" && customDate) {\n      const selectedDate = new Date(customDate);\n      selectedDate.setHours(0, 0, 0, 0);\n      const purchaseDate = new Date(purchase.purchaseDate);\n      purchaseDate.setHours(0, 0, 0, 0);\n      matchesDate = purchaseDate.getTime() === selectedDate.getTime();\n    }\n\n    return matchesSearch && matchesCategory && matchesDate;\n  });\n\n  const purchaseForm = useForm<z.infer<typeof insertPurchaseSchema>>({\n    resolver: zodResolver(insertPurchaseSchema),\n    defaultValues: {\n      imageUrl: null,\n      categoryId: \"\",\n      itemName: \"\",\n      quantity: \"\",\n      unit: \"kg\",\n      price: \"\",\n      purchaseDate: new Date(),\n    },\n  });\n\n  const categoryForm = useForm<z.infer<typeof insertCategorySchema>>({\n    resolver: zodResolver(insertCategorySchema),\n    defaultValues: {\n      name: \"\",\n      slug: \"\",\n    },\n  });\n\n  const createPurchaseMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof insertPurchaseSchema>) => {\n      return await apiRequest(\"POST\", \"/api/purchases\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      setPurchaseDialogOpen(false);\n      purchaseForm.reset();\n      setImagePreview(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Purchase created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create purchase\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePurchaseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<z.infer<typeof insertPurchaseSchema>> }) => {\n      return await apiRequest(\"PATCH\", `/api/purchases/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      setPurchaseDialogOpen(false);\n      purchaseForm.reset();\n      setImagePreview(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Purchase updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update purchase\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePurchaseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/purchases/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      toast({\n        title: \"Success\",\n        description: \"Purchase deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete purchase\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof insertCategorySchema>) => {\n      return await apiRequest(\"POST\", \"/api/categories\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setCategoryDialogOpen(false);\n      categoryForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<z.infer<typeof insertCategorySchema>> }) => {\n      return await apiRequest(\"PATCH\", `/api/categories/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setCategoryDialogOpen(false);\n      categoryForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Category updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/categories/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Category deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePurchaseSubmit = (data: z.infer<typeof insertPurchaseSchema>) => {\n    if (editingPurchase) {\n      updatePurchaseMutation.mutate({ id: editingPurchase.id, data });\n    } else {\n      createPurchaseMutation.mutate(data);\n    }\n  };\n\n  const handleCategorySubmit = (data: z.infer<typeof insertCategorySchema>) => {\n    const categoryData = {\n      ...data,\n      slug: data.slug || data.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, ''),\n    };\n    if (editingCategory) {\n      updateCategoryMutation.mutate({ id: editingCategory.id, data: categoryData });\n    } else {\n      createCategoryMutation.mutate(categoryData);\n    }\n  };\n\n  const handleEditPurchase = (purchase: Purchase) => {\n    setEditingPurchase(purchase);\n    setImagePreview(purchase.imageUrl || \"\");\n    purchaseForm.reset({\n      imageUrl: purchase.imageUrl || null,\n      categoryId: purchase.categoryId,\n      itemName: purchase.itemName,\n      quantity: purchase.quantity,\n      unit: purchase.unit,\n      price: purchase.price,\n      purchaseDate: new Date(purchase.purchaseDate),\n    });\n    setPurchaseDialogOpen(true);\n  };\n\n  const handleEditCategory = (category: Category) => {\n    setEditingCategory(category);\n    categoryForm.reset({\n      name: category.name,\n      slug: category.slug,\n    });\n    setCategoryDialogOpen(true);\n  };\n\n  const handleAddPurchaseClick = () => {\n    setEditingPurchase(null);\n    setImagePreview(\"\");\n    purchaseForm.reset({\n      imageUrl: null,\n      categoryId: \"\",\n      itemName: \"\",\n      quantity: \"\",\n      unit: \"kg\",\n      price: \"\",\n      purchaseDate: new Date(),\n    });\n    setPurchaseDialogOpen(true);\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file\",\n        description: \"Please upload an image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const maxSize = 5 * 1024 * 1024;\n    if (file.size > maxSize) {\n      toast({\n        title: \"File too large\",\n        description: \"Please upload an image smaller than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const base64String = reader.result as string;\n      setImagePreview(base64String);\n      purchaseForm.setValue('imageUrl', base64String);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleRemoveImage = () => {\n    setImagePreview(\"\");\n    purchaseForm.setValue('imageUrl', null);\n  };\n\n  const handleAddCategoryClick = () => {\n    setEditingCategory(null);\n    categoryForm.reset({\n      name: \"\",\n      slug: \"\",\n    });\n    setCategoryDialogOpen(true);\n  };\n\n  const handleExport = () => {\n    const csvHeader = \"Item Name,Category,Quantity,Unit,Price,Purchase Date\\n\";\n    const csvRows = filteredPurchases.map(purchase => {\n      const category = categories.find(c => c.id === purchase.categoryId);\n      return `\"${purchase.itemName}\",\"${category?.name || 'N/A'}\",\"${purchase.quantity}\",\"${purchase.unit}\",\"${purchase.price}\",\"${format(new Date(purchase.purchaseDate), 'yyyy-MM-dd')}\"`;\n    }).join('\\n');\n    \n    const csvContent = csvHeader + csvRows;\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `purchases_${format(new Date(), 'yyyy-MM-dd')}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Success\",\n      description: `Exported ${filteredPurchases.length} purchases to CSV`,\n    });\n  };\n\n  const handleImport = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    const isExcel = file.name.endsWith('.xlsx') || file.name.endsWith('.xls');\n    const reader = new FileReader();\n    \n    reader.onload = async (event) => {\n      let rows: any[][] = [];\n      \n      if (isExcel) {\n        const data = new Uint8Array(event.target?.result as ArrayBuffer);\n        const workbook = XLSX.read(data, { type: 'array', cellDates: true, raw: false });\n        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1, raw: false }) as any[][];\n        rows = jsonData.slice(1);\n      } else {\n        const text = event.target?.result as string;\n        const lines = text.split('\\n').slice(1);\n        rows = lines.map(line => {\n          if (!line.trim()) return [];\n          const matches = line.match(/(?:\"([^\"]*)\"|([^,]*))/g);\n          return matches ? matches.map(m => m.replace(/^\"|\"$/g, '').trim()) : [];\n        });\n      }\n      \n      let imported = 0;\n      let skipped = 0;\n      for (const row of rows) {\n        if (!row || row.length < 6) continue;\n        if (!row[0] || !String(row[0]).trim()) continue;\n        \n        const itemName = String(row[0] || '').trim();\n        const categoryName = String(row[1] || '').trim();\n        const quantity = String(row[2] || '').trim();\n        const unit = String(row[3] || '').trim();\n        const price = String(row[4] || '').trim();\n        \n        let purchaseDate: Date;\n        if (row[5] instanceof Date) {\n          purchaseDate = row[5];\n        } else {\n          const dateStr = String(row[5] || '').trim();\n          purchaseDate = new Date(dateStr);\n        }\n        \n        if (isNaN(purchaseDate.getTime())) {\n          console.error('Invalid date for purchase:', itemName, row[5]);\n          skipped++;\n          continue;\n        }\n        \n        const category = categories.find(c => c.name.toLowerCase() === categoryName.toLowerCase());\n        if (!category) {\n          console.error('Category not found:', categoryName);\n          skipped++;\n          continue;\n        }\n\n        try {\n          await apiRequest(\"POST\", \"/api/purchases\", {\n            itemName,\n            categoryId: category.id,\n            quantity,\n            unit,\n            price,\n            purchaseDate,\n            imageUrl: null,\n          });\n          imported++;\n        } catch (error) {\n          console.error('Failed to import purchase:', itemName, error);\n          skipped++;\n        }\n      }\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      \n      const message = skipped > 0 \n        ? `Imported ${imported} purchases, ${skipped} skipped`\n        : `Imported ${imported} purchases`;\n      \n      toast({\n        title: skipped > 0 ? \"Import completed with warnings\" : \"Success\",\n        description: message,\n        variant: skipped > 0 ? \"default\" : \"default\",\n      });\n    };\n    \n    if (isExcel) {\n      reader.readAsArrayBuffer(file);\n    } else {\n      reader.readAsText(file);\n    }\n    e.target.value = '';\n  };\n\n  const handleDownloadSample = () => {\n    const sampleData = [\n      [\"Item Name\", \"Category\", \"Quantity\", \"Unit\", \"Price\", \"Purchase Date\"],\n      [\"Tomatoes\", \"Vegetables\", \"10\", \"kg\", \"2.50\", \"2025-01-15\"],\n      [\"Chicken Breast\", \"Meat\", \"5\", \"kg\", \"8.99\", \"2025-01-15\"],\n      [\"Milk\", \"Dairy\", \"12\", \"litre\", \"3.50\", \"2025-01-16\"],\n      [\"Rice\", \"Grains\", \"25\", \"kg\", \"1.20\", \"2025-01-16\"],\n    ];\n    \n    const worksheet = XLSX.utils.aoa_to_sheet(sampleData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Purchases\");\n    \n    const fileName = `purchase_sample_template.xlsx`;\n    XLSX.writeFile(workbook, fileName);\n    \n    toast({\n      title: \"Success\",\n      description: \"Sample Excel template downloaded\",\n    });\n  };\n\n  const handleViewPurchase = (purchase: Purchase) => {\n    setViewingPurchase(purchase);\n    setViewDialogOpen(true);\n  };\n\n  const handlePrintPurchase = (purchase: Purchase) => {\n    const category = categories.find(c => c.id === purchase.categoryId);\n    const printContent = `\n      <html>\n        <head>\n          <title>Purchase Receipt - ${purchase.itemName}</title>\n          <style>\n            body { font-family: Arial, sans-serif; padding: 20px; }\n            h1 { color: #EA580C; }\n            .details { margin: 20px 0; }\n            .details p { margin: 8px 0; }\n            .label { font-weight: bold; }\n          </style>\n        </head>\n        <body>\n          <h1>Purchase Receipt</h1>\n          <div class=\"details\">\n            <p><span class=\"label\">Item Name:</span> ${purchase.itemName}</p>\n            <p><span class=\"label\">Category:</span> ${category?.name || 'N/A'}</p>\n            <p><span class=\"label\">Quantity:</span> ${purchase.quantity} ${purchase.unit}</p>\n            <p><span class=\"label\">Price:</span> $${purchase.price}</p>\n            <p><span class=\"label\">Purchase Date:</span> ${format(new Date(purchase.purchaseDate), 'PPP')}</p>\n            <p><span class=\"label\">Total:</span> $${(parseFloat(purchase.quantity) * parseFloat(purchase.price)).toFixed(2)}</p>\n          </div>\n        </body>\n      </html>\n    `;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      printWindow.print();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex items-center justify-between p-6 border-b\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" data-testid=\"text-page-title\">Purchase Management</h1>\n          <p className=\"text-sm text-muted-foreground\">Manage purchase orders and inventory</p>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-auto p-6\">\n        <div className=\"space-y-6\">\n          <div className=\"flex flex-wrap gap-4 items-end\">\n            <div className=\"flex-1 min-w-[200px]\">\n              <label className=\"text-sm font-medium mb-2 block\">Search Purchases</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by item name...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n\n            <div className=\"w-[200px]\">\n              <label className=\"text-sm font-medium mb-2 block\">Category</label>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-filter-category\">\n                  <SelectValue placeholder=\"All categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"w-[200px]\">\n              <label className=\"text-sm font-medium mb-2 block\">Date Filter</label>\n              <Select value={dateFilter} onValueChange={setDateFilter}>\n                <SelectTrigger data-testid=\"select-date-filter\">\n                  <SelectValue placeholder=\"Select date range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {DATE_FILTER_OPTIONS.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {dateFilter === \"custom\" && (\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Select Date</label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button variant=\"outline\" data-testid=\"button-custom-date\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      {customDate ? format(customDate, \"PPP\") : \"Pick a date\"}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                    <CalendarComponent\n                      mode=\"single\"\n                      selected={customDate}\n                      onSelect={setCustomDate}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex flex-wrap gap-3\">\n            <Dialog open={categoryDialogOpen} onOpenChange={setCategoryDialogOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" onClick={handleAddCategoryClick} data-testid=\"button-manage-categories\">\n                  <FolderPlus className=\"w-4 h-4 mr-2\" />\n                  Manage Categories\n                </Button>\n              </DialogTrigger>\n              <DialogContent data-testid=\"dialog-category\">\n                <DialogHeader>\n                  <DialogTitle>{editingCategory ? \"Edit Category\" : \"Add New Category\"}</DialogTitle>\n                  <DialogDescription>\n                    {editingCategory ? \"Update category information\" : \"Create a new category for purchases\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...categoryForm}>\n                  <form onSubmit={categoryForm.handleSubmit(handleCategorySubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={categoryForm.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., Vegetables\" data-testid=\"input-category-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <DialogFooter>\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setCategoryDialogOpen(false)} data-testid=\"button-cancel-category\">\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" data-testid=\"button-submit-category\">\n                        {editingCategory ? \"Update\" : \"Create\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n\n                {categories.length > 0 && (\n                  <div className=\"mt-6\">\n                    <h3 className=\"text-sm font-medium mb-3\">Existing Categories</h3>\n                    <div className=\"space-y-2 max-h-[200px] overflow-y-auto\">\n                      {categories.map((category) => (\n                        <div key={category.id} className=\"flex items-center justify-between p-2 rounded-md hover-elevate\">\n                          <span className=\"text-sm\">{category.name}</span>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => handleEditCategory(category)}\n                              data-testid={`button-edit-category-${category.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => deleteCategoryMutation.mutate(category.id)}\n                              data-testid={`button-delete-category-${category.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </DialogContent>\n            </Dialog>\n\n            <label htmlFor=\"import-file\">\n              <input\n                id=\"import-file\"\n                type=\"file\"\n                accept=\".csv,.xlsx,.xls\"\n                className=\"hidden\"\n                onChange={handleImport}\n                data-testid=\"input-import-file\"\n              />\n              <Button variant=\"outline\" asChild data-testid=\"button-import\">\n                <span>\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Import Purchases\n                </span>\n              </Button>\n            </label>\n\n            <Button variant=\"outline\" onClick={handleDownloadSample} data-testid=\"button-download-sample\">\n              <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n              Download Sample Excel\n            </Button>\n\n            <Button variant=\"outline\" onClick={handleExport} data-testid=\"button-export\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Purchases\n            </Button>\n\n            <Dialog open={purchaseDialogOpen} onOpenChange={setPurchaseDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={handleAddPurchaseClick} data-testid=\"button-add-purchase\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Purchase\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-purchase\">\n                <DialogHeader>\n                  <DialogTitle>{editingPurchase ? \"Edit Purchase\" : \"Add New Purchase\"}</DialogTitle>\n                  <DialogDescription>\n                    {editingPurchase ? \"Update purchase information\" : \"Create a new purchase record\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...purchaseForm}>\n                  <form onSubmit={purchaseForm.handleSubmit(handlePurchaseSubmit)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <FormLabel>Purchase Image (optional)</FormLabel>\n                      \n                      {imagePreview ? (\n                        <div className=\"relative w-full h-48 rounded-md overflow-hidden border\">\n                          <img\n                            src={imagePreview}\n                            alt=\"Preview\"\n                            className=\"w-full h-full object-cover\"\n                          />\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            className=\"absolute top-2 right-2\"\n                            onClick={handleRemoveImage}\n                            data-testid=\"button-remove-image\"\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-3\">\n                          <label htmlFor=\"purchase-image-upload\">\n                            <input\n                              id=\"purchase-image-upload\"\n                              type=\"file\"\n                              accept=\"image/*\"\n                              className=\"hidden\"\n                              onChange={handleImageUpload}\n                              data-testid=\"input-image-upload\"\n                            />\n                            <div className=\"border-2 border-dashed rounded-md p-6 hover-elevate cursor-pointer transition-colors flex flex-col items-center gap-2\">\n                              <ImagePlus className=\"w-8 h-8 text-muted-foreground\" />\n                              <div className=\"text-center\">\n                                <p className=\"text-sm font-medium\">Upload Image</p>\n                                <p className=\"text-xs text-muted-foreground\">Click to select an image file</p>\n                              </div>\n                            </div>\n                          </label>\n                          \n                          <div className=\"relative\">\n                            <div className=\"absolute inset-0 flex items-center\">\n                              <span className=\"w-full border-t\" />\n                            </div>\n                            <div className=\"relative flex justify-center text-xs uppercase\">\n                              <span className=\"bg-background px-2 text-muted-foreground\">Or use URL</span>\n                            </div>\n                          </div>\n\n                          <FormField\n                            control={purchaseForm.control}\n                            name=\"imageUrl\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    value={field.value || \"\"} \n                                    placeholder=\"https://example.com/image.jpg\" \n                                    data-testid=\"input-image-url\"\n                                    onChange={(e) => {\n                                      field.onChange(e);\n                                      setImagePreview(e.target.value);\n                                    }}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      )}\n                    </div>\n\n                    <FormField\n                      control={purchaseForm.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-category\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories.map((category) => (\n                                <SelectItem key={category.id} value={category.id}>\n                                  {category.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={purchaseForm.control}\n                      name=\"itemName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Item Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., Fresh Tomatoes\" data-testid=\"input-item-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={purchaseForm.control}\n                        name=\"quantity\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Quantity</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"10\" data-testid=\"input-quantity\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={purchaseForm.control}\n                        name=\"unit\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Unit</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-unit\">\n                                  <SelectValue placeholder=\"Select unit\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {UNIT_OPTIONS.map((unit) => (\n                                  <SelectItem key={unit} value={unit}>\n                                    {unit}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={purchaseForm.control}\n                      name=\"price\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Price per Unit ($)</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"5.99\" data-testid=\"input-price\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={purchaseForm.control}\n                      name=\"purchaseDate\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-col\">\n                          <FormLabel>Purchase Date</FormLabel>\n                          <Popover>\n                            <PopoverTrigger asChild>\n                              <FormControl>\n                                <Button\n                                  variant=\"outline\"\n                                  className=\"justify-start text-left font-normal\"\n                                  data-testid=\"button-purchase-date\"\n                                >\n                                  <Calendar className=\"mr-2 h-4 w-4\" />\n                                  {field.value ? format(field.value, \"PPP\") : \"Pick a date\"}\n                                </Button>\n                              </FormControl>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                              <CalendarComponent\n                                mode=\"single\"\n                                selected={field.value}\n                                onSelect={field.onChange}\n                                initialFocus\n                              />\n                            </PopoverContent>\n                          </Popover>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <DialogFooter>\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setPurchaseDialogOpen(false)} data-testid=\"button-cancel\">\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createPurchaseMutation.isPending || updatePurchaseMutation.isPending} data-testid=\"button-submit\">\n                        {editingPurchase ? \"Update\" : \"Create\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-[100px]\">Image</TableHead>\n                      <TableHead>Item Name</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead className=\"text-right\">Quantity</TableHead>\n                      <TableHead>Unit</TableHead>\n                      <TableHead className=\"text-right\">Price</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead className=\"text-center w-[200px]\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredPurchases.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={8} className=\"text-center py-12\">\n                          <ShoppingCart className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                          <p className=\"text-muted-foreground\">No purchases found</p>\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      filteredPurchases.map((purchase) => {\n                        const category = categories.find(c => c.id === purchase.categoryId);\n                        \n                        return (\n                          <TableRow key={purchase.id} data-testid={`row-purchase-${purchase.id}`}>\n                            <TableCell>\n                              {purchase.imageUrl ? (\n                                <img\n                                  src={purchase.imageUrl}\n                                  alt={purchase.itemName}\n                                  className=\"w-16 h-16 object-cover rounded-md\"\n                                  data-testid={`img-purchase-${purchase.id}`}\n                                />\n                              ) : (\n                                <div className=\"w-16 h-16 bg-muted rounded-md flex items-center justify-center\">\n                                  <ShoppingCart className=\"w-6 h-6 text-muted-foreground\" />\n                                </div>\n                              )}\n                            </TableCell>\n                            <TableCell className=\"font-medium\" data-testid={`text-item-name-${purchase.id}`}>\n                              {purchase.itemName}\n                            </TableCell>\n                            <TableCell data-testid={`text-category-${purchase.id}`}>\n                              {category?.name || 'N/A'}\n                            </TableCell>\n                            <TableCell className=\"text-right\" data-testid={`text-quantity-${purchase.id}`}>\n                              {purchase.quantity}\n                            </TableCell>\n                            <TableCell data-testid={`text-unit-${purchase.id}`}>\n                              {purchase.unit}\n                            </TableCell>\n                            <TableCell className=\"text-right\" data-testid={`text-price-${purchase.id}`}>\n                              ${purchase.price}\n                            </TableCell>\n                            <TableCell data-testid={`text-date-${purchase.id}`}>\n                              {format(new Date(purchase.purchaseDate), 'PP')}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex gap-2 justify-center\">\n                                <Button\n                                  size=\"icon\"\n                                  variant=\"ghost\"\n                                  onClick={() => handleViewPurchase(purchase)}\n                                  data-testid={`button-view-${purchase.id}`}\n                                >\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  size=\"icon\"\n                                  variant=\"ghost\"\n                                  onClick={() => handleEditPurchase(purchase)}\n                                  data-testid={`button-edit-${purchase.id}`}\n                                >\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  size=\"icon\"\n                                  variant=\"ghost\"\n                                  onClick={() => handlePrintPurchase(purchase)}\n                                  data-testid={`button-print-${purchase.id}`}\n                                >\n                                  <Printer className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  size=\"icon\"\n                                  variant=\"ghost\"\n                                  onClick={() => deletePurchaseMutation.mutate(purchase.id)}\n                                  data-testid={`button-delete-${purchase.id}`}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-view-purchase\">\n          <DialogHeader>\n            <DialogTitle>Purchase Details</DialogTitle>\n          </DialogHeader>\n          {viewingPurchase && (\n            <div className=\"space-y-4\">\n              {viewingPurchase.imageUrl && (\n                <div className=\"w-full h-64 rounded-md overflow-hidden\">\n                  <img\n                    src={viewingPurchase.imageUrl}\n                    alt={viewingPurchase.itemName}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              )}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Item Name</p>\n                  <p className=\"font-medium\">{viewingPurchase.itemName}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Category</p>\n                  <p className=\"font-medium\">{categories.find(c => c.id === viewingPurchase.categoryId)?.name || 'N/A'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Quantity</p>\n                  <p className=\"font-medium\">{viewingPurchase.quantity} {viewingPurchase.unit}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Price per Unit</p>\n                  <p className=\"font-medium\">${viewingPurchase.price}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Amount</p>\n                  <p className=\"font-semibold text-primary text-lg\">\n                    ${(parseFloat(viewingPurchase.quantity) * parseFloat(viewingPurchase.price)).toFixed(2)}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Purchase Date</p>\n                  <p className=\"font-medium\">{format(new Date(viewingPurchase.purchaseDate), 'PPP')}</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":44884},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Download, \n  Printer, \n  Calendar as CalendarIcon, \n  TrendingUp, \n  DollarSign, \n  ShoppingCart, \n  BarChart3,\n  Eye,\n  FileText\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { Order } from \"@shared/schema\";\n\ntype ReportType = \"sales\" | \"inventory\" | \"payments\" | \"discounts\" | \"refunds\" | \"staff\";\ntype DateFilter = \"today\" | \"yesterday\" | \"7days\" | \"month\" | \"custom\";\n\nexport default function Reports() {\n  const [reportType, setReportType] = useState<ReportType>(\"sales\");\n  const [dateFilter, setDateFilter] = useState<DateFilter>(\"today\");\n  const [customStartDate, setCustomStartDate] = useState<Date | undefined>();\n  const [customEndDate, setCustomEndDate] = useState<Date | undefined>();\n\n  const { data: sales = [] } = useQuery<Order[]>({\n    queryKey: [\"/api/sales\"],\n  });\n\n  const { data: orders = [] } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const getFilteredSales = () => {\n    const now = new Date();\n    let startDate = new Date();\n    \n    switch (dateFilter) {\n      case \"today\":\n        startDate.setHours(0, 0, 0, 0);\n        break;\n      case \"yesterday\":\n        startDate.setDate(now.getDate() - 1);\n        startDate.setHours(0, 0, 0, 0);\n        break;\n      case \"7days\":\n        startDate.setDate(now.getDate() - 7);\n        break;\n      case \"month\":\n        startDate.setMonth(now.getMonth() - 1);\n        break;\n      case \"custom\":\n        if (customStartDate) {\n          startDate = customStartDate;\n        }\n        break;\n    }\n\n    return sales.filter(sale => {\n      const saleDate = new Date(sale.createdAt);\n      if (dateFilter === \"custom\" && customEndDate) {\n        return saleDate >= startDate && saleDate <= customEndDate;\n      }\n      return saleDate >= startDate;\n    });\n  };\n\n  const filteredSales = getFilteredSales();\n  \n  const totalRevenue = filteredSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n  const totalTransactions = filteredSales.length;\n  const avgSaleValue = totalTransactions > 0 ? totalRevenue / totalTransactions : 0;\n  const totalDiscounts = filteredSales.reduce((sum, sale) => sum + parseFloat(sale.discount), 0);\n\n  const paymentMethods = filteredSales.reduce((acc, sale) => {\n    const method = sale.paymentMethod || \"Unknown\";\n    acc[method] = (acc[method] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const handleExport = () => {\n    const csvContent = [\n      [\"Date\", \"Order Number\", \"Customer\", \"Total\", \"Payment Method\", \"Status\"].join(\",\"),\n      ...filteredSales.map(sale => [\n        format(new Date(sale.createdAt), \"yyyy-MM-dd HH:mm\"),\n        sale.orderNumber,\n        sale.customerName || \"N/A\",\n        sale.total,\n        sale.paymentMethod || \"N/A\",\n        sale.status\n      ].join(\",\"))\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${reportType}-report-${format(new Date(), \"yyyy-MM-dd\")}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">POS Reports Dashboard</h1>\n            <p className=\"text-muted-foreground mt-1\">Analyze performance, sales, and profitability</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={handlePrint} data-testid=\"button-print-report\">\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Print\n            </Button>\n            <Button onClick={handleExport} data-testid=\"button-export-report\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export CSV\n            </Button>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Report Filters</CardTitle>\n            <CardDescription>Select report type and date range</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Report Type</label>\n                <Select value={reportType} onValueChange={(value) => setReportType(value as ReportType)}>\n                  <SelectTrigger data-testid=\"select-report-type\">\n                    <SelectValue placeholder=\"Select report type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"sales\">Sales</SelectItem>\n                    <SelectItem value=\"inventory\">Inventory</SelectItem>\n                    <SelectItem value=\"payments\">Payments</SelectItem>\n                    <SelectItem value=\"discounts\">Discounts</SelectItem>\n                    <SelectItem value=\"refunds\">Refunds</SelectItem>\n                    <SelectItem value=\"staff\">Staff Performance</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Date Range</label>\n                <Select value={dateFilter} onValueChange={(value) => setDateFilter(value as DateFilter)}>\n                  <SelectTrigger data-testid=\"select-date-filter\">\n                    <SelectValue placeholder=\"Select date range\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"yesterday\">Yesterday</SelectItem>\n                    <SelectItem value=\"7days\">Last 7 Days</SelectItem>\n                    <SelectItem value=\"month\">Last Month</SelectItem>\n                    <SelectItem value=\"custom\">Custom Range</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {dateFilter === \"custom\" && (\n                <div className=\"flex gap-2\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Start Date</label>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-start-date\">\n                          <CalendarIcon className=\"w-4 h-4 mr-2\" />\n                          {customStartDate ? format(customStartDate, \"MMM dd, yyyy\") : \"Pick date\"}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={customStartDate}\n                          onSelect={setCustomStartDate}\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">End Date</label>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-end-date\">\n                          <CalendarIcon className=\"w-4 h-4 mr-2\" />\n                          {customEndDate ? format(customEndDate, \"MMM dd, yyyy\") : \"Pick date\"}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={customEndDate}\n                          onSelect={setCustomEndDate}\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-revenue\">${totalRevenue.toFixed(2)}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {totalTransactions} transactions\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Transactions</CardTitle>\n              <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-transactions\">{totalTransactions}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Total orders processed\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Avg Sale Value</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-avg-sale\">${avgSaleValue.toFixed(2)}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Per transaction\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Discounts</CardTitle>\n              <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-discounts\">${totalDiscounts.toFixed(2)}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Given to customers\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {reportType === \"payments\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Payment Methods Breakdown</CardTitle>\n              <CardDescription>Distribution of payment methods used</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {Object.entries(paymentMethods).map(([method, count]) => (\n                  <div key={method} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant=\"outline\" className=\"capitalize\">{method}</Badge>\n                      <span className=\"text-sm text-muted-foreground\">{count} transactions</span>\n                    </div>\n                    <div className=\"text-sm font-medium\">\n                      {((count / totalTransactions) * 100).toFixed(1)}%\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Detailed {reportType === \"sales\" ? \"Sales\" : \"Transaction\"} Report</CardTitle>\n            <CardDescription>View all transactions in the selected date range</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date/Time</TableHead>\n                  <TableHead>Order ID</TableHead>\n                  <TableHead>Customer</TableHead>\n                  <TableHead>Total Amount</TableHead>\n                  <TableHead>Payment Method</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredSales.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center text-muted-foreground\">\n                      No transactions found for the selected period\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredSales.map((sale) => (\n                    <TableRow key={sale.id} data-testid={`row-sale-${sale.id}`}>\n                      <TableCell>{format(new Date(sale.createdAt), \"MMM dd, yyyy HH:mm\")}</TableCell>\n                      <TableCell className=\"font-mono\">#{sale.orderNumber}</TableCell>\n                      <TableCell>{sale.customerName || \"Walk-in\"}</TableCell>\n                      <TableCell className=\"font-mono\">${sale.total}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className=\"capitalize\">\n                          {sale.paymentMethod || \"N/A\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={sale.status === \"completed\" ? \"default\" : \"secondary\"}>\n                          {sale.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"ghost\" data-testid={`button-view-${sale.id}`}>\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"ghost\" data-testid={`button-print-${sale.id}`}>\n                            <FileText className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14963},"client/src/pages/sales.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Eye, Pencil, Printer, Trash2, Download, FileSpreadsheet, FileText, Search, Calendar as CalendarIcon } from \"lucide-react\";\nimport { format, startOfDay, endOfDay, subDays, isWithinInterval } from \"date-fns\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Order } from \"@shared/schema\";\nimport * as XLSX from \"xlsx\";\nimport jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\n\ntype DateFilterType = \"all\" | \"today\" | \"yesterday\" | \"custom\";\n\nexport default function SalesManage() {\n  const [viewSale, setViewSale] = useState<Order | null>(null);\n  const [editSale, setEditSale] = useState<Order | null>(null);\n  const [deleteSaleId, setDeleteSaleId] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dateFilter, setDateFilter] = useState<DateFilterType>(\"all\");\n  const [startDate, setStartDate] = useState<Date | undefined>(undefined);\n  const [endDate, setEndDate] = useState<Date | undefined>(undefined);\n  const { toast } = useToast();\n\n  const { data: sales = [], isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Order> }) => {\n      return apiRequest(\"PATCH\", `/api/orders/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Success\",\n        description: \"Sale updated successfully\",\n      });\n      setEditSale(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update sale\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/orders/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Success\",\n        description: \"Sale deleted successfully\",\n      });\n      setDeleteSaleId(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete sale\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePrint = (sale: Order) => {\n    const printWindow = window.open(\"\", \"_blank\");\n    if (!printWindow) return;\n\n    const content = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Sale Receipt - INV-${sale.orderNumber}</title>\n          <style>\n            body { font-family: Arial, sans-serif; padding: 20px; }\n            h1 { color: #ea580c; }\n            table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n            th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }\n            .total { font-weight: bold; font-size: 1.2em; }\n          </style>\n        </head>\n        <body>\n          <h1>Sale Receipt</h1>\n          <p><strong>Sale ID:</strong> ${sale.id}</p>\n          <p><strong>Invoice No:</strong> INV-${sale.orderNumber}</p>\n          <p><strong>Date:</strong> ${format(new Date(sale.createdAt), \"PPpp\")}</p>\n          <p><strong>Customer:</strong> ${sale.customerName || \"Walk-in Customer\"}</p>\n          <p><strong>Dining Option:</strong> ${sale.diningOption}</p>\n          <hr>\n          <p><strong>Subtotal:</strong> $${sale.subtotal}</p>\n          <p><strong>Discount:</strong> $${sale.discount}</p>\n          <p class=\"total\"><strong>Total:</strong> $${sale.total}</p>\n          <p><strong>Pay by:</strong> ${sale.paymentMethod || \"N/A\"}</p>\n          <p><strong>Payment Status:</strong> ${sale.paymentStatus}</p>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(content);\n    printWindow.document.close();\n    printWindow.print();\n  };\n\n  const handleUpdate = () => {\n    if (!editSale) return;\n    updateMutation.mutate({\n      id: editSale.id,\n      data: {\n        customerName: editSale.customerName,\n        paymentStatus: editSale.paymentStatus,\n        status: editSale.status,\n      },\n    });\n  };\n\n  const handleDelete = () => {\n    if (!deleteSaleId) return;\n    deleteMutation.mutate(deleteSaleId);\n  };\n\n  const getPaymentStatusBadge = (status: string) => {\n    const colors: Record<string, string> = {\n      paid: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n      pending: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n      failed: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",\n    };\n    return colors[status] || colors.pending;\n  };\n\n  const exportToExcel = () => {\n    const exportData = filteredSales.map((sale) => ({\n      \"Sale ID\": sale.id,\n      \"Invoice No\": `INV-${sale.orderNumber}`,\n      \"Date & Time\": format(new Date(sale.createdAt), \"PPpp\"),\n      \"Customer Name\": sale.customerName || \"Walk-in Customer\",\n      \"Dining Option\": sale.diningOption,\n      \"Subtotal\": `$${sale.subtotal}`,\n      \"Discount Amount\": `$${sale.discount}`,\n      \"Total Amount\": `$${sale.total}`,\n      \"Pay by\": sale.paymentMethod || \"N/A\",\n      \"Payment Status\": sale.paymentStatus,\n      \"Order Status\": sale.status,\n    }));\n\n    const worksheet = XLSX.utils.json_to_sheet(exportData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sales\");\n\n    const fileName = `sales_report_${format(new Date(), \"yyyy-MM-dd\")}.xlsx`;\n    XLSX.writeFile(workbook, fileName);\n\n    toast({\n      title: \"Success\",\n      description: \"Sales data exported to Excel successfully\",\n    });\n  };\n\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n\n    doc.setFontSize(18);\n    doc.text(\"Sales Report\", 14, 22);\n    \n    doc.setFontSize(11);\n    doc.text(`Generated: ${format(new Date(), \"PPpp\")}`, 14, 32);\n\n    const tableData = filteredSales.map((sale) => [\n      sale.id,\n      `INV-${sale.orderNumber}`,\n      format(new Date(sale.createdAt), \"PPpp\"),\n      sale.customerName || \"Walk-in Customer\",\n      `$${sale.discount}`,\n      `$${sale.total}`,\n      sale.paymentMethod || \"N/A\",\n      sale.paymentStatus,\n    ]);\n\n    autoTable(doc, {\n      startY: 40,\n      head: [[\"Sale ID\", \"Invoice No\", \"Date & Time\", \"Customer\", \"Discount\", \"Total\", \"Pay by\", \"Payment\"]],\n      body: tableData,\n      theme: \"striped\",\n      headStyles: { fillColor: [234, 88, 12] },\n    });\n\n    const fileName = `sales_report_${format(new Date(), \"yyyy-MM-dd\")}.pdf`;\n    doc.save(fileName);\n\n    toast({\n      title: \"Success\",\n      description: \"Sales data exported to PDF successfully\",\n    });\n  };\n\n  const filteredSales = sales.filter((sale) => {\n    if (sale.status !== \"completed\") {\n      return false;\n    }\n\n    const searchLower = searchTerm.toLowerCase();\n    const invoiceNo = `INV-${sale.orderNumber}`.toLowerCase();\n    const matchesSearch =\n      !searchTerm ||\n      sale.id.toLowerCase().includes(searchLower) ||\n      sale.orderNumber.toLowerCase().includes(searchLower) ||\n      invoiceNo.includes(searchLower) ||\n      sale.customerName?.toLowerCase().includes(searchLower) ||\n      sale.total.toLowerCase().includes(searchLower);\n\n    const saleDate = new Date(sale.createdAt);\n    let matchesDate = true;\n\n    if (dateFilter === \"today\") {\n      const today = startOfDay(new Date());\n      const todayEnd = endOfDay(new Date());\n      matchesDate = isWithinInterval(saleDate, { start: today, end: todayEnd });\n    } else if (dateFilter === \"yesterday\") {\n      const yesterday = startOfDay(subDays(new Date(), 1));\n      const yesterdayEnd = endOfDay(subDays(new Date(), 1));\n      matchesDate = isWithinInterval(saleDate, { start: yesterday, end: yesterdayEnd });\n    } else if (dateFilter === \"custom\" && startDate && endDate) {\n      const start = startOfDay(startDate);\n      const end = endOfDay(endDate);\n      matchesDate = isWithinInterval(saleDate, { start, end });\n    }\n\n    return matchesSearch && matchesDate;\n  });\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-sales-title\">Sales Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage sales activities and records</p>\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button data-testid=\"button-export\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={exportToExcel} data-testid=\"button-export-excel\">\n                <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                Export to Excel\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={exportToPDF} data-testid=\"button-export-pdf\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Export to PDF\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Sales List</CardTitle>\n            <CardDescription>Comprehensive list of all sales transactions</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by customer name, sale ID...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"input-search-sales\"\n                />\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Select value={dateFilter} onValueChange={(value: DateFilterType) => setDateFilter(value)}>\n                  <SelectTrigger className=\"w-[180px]\" data-testid=\"select-date-filter\">\n                    <SelectValue placeholder=\"Filter by date\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Dates</SelectItem>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"yesterday\">Yesterday</SelectItem>\n                    <SelectItem value=\"custom\">Custom Range</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                {dateFilter === \"custom\" && (\n                  <>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button variant=\"outline\" className=\"w-[160px] justify-start\" data-testid=\"button-start-date\">\n                          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                          {startDate ? format(startDate, \"PPP\") : \"Start Date\"}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={startDate}\n                          onSelect={setStartDate}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button variant=\"outline\" className=\"w-[160px] justify-start\" data-testid=\"button-end-date\">\n                          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                          {endDate ? format(endDate, \"PPP\") : \"End Date\"}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={endDate}\n                          onSelect={setEndDate}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </>\n                )}\n              </div>\n            </div>\n\n            {isLoading ? (\n              <p className=\"text-muted-foreground\">Loading sales...</p>\n            ) : filteredSales.length === 0 ? (\n              <p className=\"text-muted-foreground\">No sales found</p>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead data-testid=\"header-sale-id\">Sale ID</TableHead>\n                      <TableHead data-testid=\"header-invoice-no\">Invoice No</TableHead>\n                      <TableHead data-testid=\"header-date-time\">Date & Time</TableHead>\n                      <TableHead data-testid=\"header-customer-name\">Customer Name</TableHead>\n                      <TableHead data-testid=\"header-discount-amount\">Discount</TableHead>\n                      <TableHead data-testid=\"header-total-amount\">Total Amount</TableHead>\n                      <TableHead data-testid=\"header-pay-by\">Pay by</TableHead>\n                      <TableHead data-testid=\"header-payment-status\">Payment Status</TableHead>\n                      <TableHead data-testid=\"header-actions\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredSales.map((sale) => (\n                      <TableRow key={sale.id} data-testid={`row-sale-${sale.id}`}>\n                        <TableCell data-testid={`text-sale-id-${sale.id}`}>{sale.id}</TableCell>\n                        <TableCell data-testid={`text-invoice-no-${sale.id}`}>INV-{sale.orderNumber}</TableCell>\n                        <TableCell data-testid={`text-date-${sale.id}`}>\n                          {format(new Date(sale.createdAt), \"PPpp\")}\n                        </TableCell>\n                        <TableCell data-testid={`text-customer-${sale.id}`}>\n                          {sale.customerName || \"Walk-in Customer\"}\n                        </TableCell>\n                        <TableCell data-testid={`text-discount-${sale.id}`}>${sale.discount}</TableCell>\n                        <TableCell data-testid={`text-total-${sale.id}`}>${sale.total}</TableCell>\n                        <TableCell data-testid={`text-pay-by-${sale.id}`}>\n                          <span className=\"capitalize\">{sale.paymentMethod || \"N/A\"}</span>\n                        </TableCell>\n                        <TableCell data-testid={`text-payment-status-${sale.id}`}>\n                          <span\n                            className={`px-2 py-1 rounded-md text-xs font-medium ${getPaymentStatusBadge(\n                              sale.paymentStatus\n                            )}`}\n                          >\n                            {sale.paymentStatus}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  size=\"icon\"\n                                  variant=\"ghost\"\n                                  onClick={() => setViewSale(sale)}\n                                  data-testid={`button-view-${sale.id}`}\n                                >\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>View Details</TooltipContent>\n                            </Tooltip>\n\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  size=\"icon\"\n                                  variant=\"ghost\"\n                                  onClick={() => setEditSale(sale)}\n                                  data-testid={`button-edit-${sale.id}`}\n                                >\n                                  <Pencil className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>Edit Sale</TooltipContent>\n                            </Tooltip>\n\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  size=\"icon\"\n                                  variant=\"ghost\"\n                                  onClick={() => handlePrint(sale)}\n                                  data-testid={`button-print-${sale.id}`}\n                                >\n                                  <Printer className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>Print Receipt</TooltipContent>\n                            </Tooltip>\n\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  size=\"icon\"\n                                  variant=\"ghost\"\n                                  onClick={() => setDeleteSaleId(sale.id)}\n                                  data-testid={`button-delete-${sale.id}`}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>Delete Sale</TooltipContent>\n                            </Tooltip>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* View Dialog */}\n      <Dialog open={!!viewSale} onOpenChange={() => setViewSale(null)}>\n        <DialogContent data-testid=\"dialog-view-sale\">\n          <DialogHeader>\n            <DialogTitle>Sale Details</DialogTitle>\n            <DialogDescription>View complete sale information</DialogDescription>\n          </DialogHeader>\n          {viewSale && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-muted-foreground\">Sale ID</Label>\n                  <p className=\"font-medium\" data-testid=\"view-sale-id\">{viewSale.id}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Invoice No</Label>\n                  <p className=\"font-medium\" data-testid=\"view-invoice-no\">INV-{viewSale.orderNumber}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Date & Time</Label>\n                  <p className=\"font-medium\" data-testid=\"view-date\">\n                    {format(new Date(viewSale.createdAt), \"PPpp\")}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Customer Name</Label>\n                  <p className=\"font-medium\" data-testid=\"view-customer\">\n                    {viewSale.customerName || \"Walk-in Customer\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Dining Option</Label>\n                  <p className=\"font-medium\" data-testid=\"view-dining-option\">{viewSale.diningOption}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Subtotal</Label>\n                  <p className=\"font-medium\" data-testid=\"view-subtotal\">${viewSale.subtotal}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Discount</Label>\n                  <p className=\"font-medium\" data-testid=\"view-discount\">${viewSale.discount}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Total</Label>\n                  <p className=\"font-bold text-lg\" data-testid=\"view-total\">${viewSale.total}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Pay by</Label>\n                  <p className=\"font-medium capitalize\" data-testid=\"view-pay-by\">{viewSale.paymentMethod || \"N/A\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-muted-foreground\">Payment Status</Label>\n                  <p className=\"font-medium\" data-testid=\"view-payment-status\">{viewSale.paymentStatus}</p>\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button onClick={() => setViewSale(null)} data-testid=\"button-close-view\">Close</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editSale} onOpenChange={() => setEditSale(null)}>\n        <DialogContent data-testid=\"dialog-edit-sale\">\n          <DialogHeader>\n            <DialogTitle>Edit Sale</DialogTitle>\n            <DialogDescription>Modify sale details</DialogDescription>\n          </DialogHeader>\n          {editSale && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"customer-name\">Customer Name</Label>\n                <Input\n                  id=\"customer-name\"\n                  data-testid=\"input-edit-customer-name\"\n                  value={editSale.customerName || \"\"}\n                  onChange={(e) =>\n                    setEditSale({ ...editSale, customerName: e.target.value })\n                  }\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"payment-status\">Payment Status</Label>\n                <Select\n                  value={editSale.paymentStatus}\n                  onValueChange={(value) =>\n                    setEditSale({ ...editSale, paymentStatus: value })\n                  }\n                >\n                  <SelectTrigger data-testid=\"select-edit-payment-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"paid\">Paid</SelectItem>\n                    <SelectItem value=\"failed\">Failed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"status\">Order Status</Label>\n                <Select\n                  value={editSale.status}\n                  onValueChange={(value) =>\n                    setEditSale({ ...editSale, status: value })\n                  }\n                >\n                  <SelectTrigger data-testid=\"select-edit-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"draft\">Draft</SelectItem>\n                    <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setEditSale(null)} data-testid=\"button-cancel-edit\">\n              Cancel\n            </Button>\n            <Button\n              onClick={handleUpdate}\n              disabled={updateMutation.isPending}\n              data-testid=\"button-save-edit\"\n            >\n              {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteSaleId} onOpenChange={() => setDeleteSaleId(null)}>\n        <AlertDialogContent data-testid=\"dialog-delete-sale\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Sale</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this sale? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDelete}\n              disabled={deleteMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":26582},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Settings } from \"@shared/schema\";\nimport { \n  Save, \n  Building2, \n  CreditCard, \n  Receipt, \n  Users, \n  Printer, \n  DollarSign, \n  Database, \n  Bell,\n  Palette,\n  Percent\n} from \"lucide-react\";\n\nexport default function SettingsPage() {\n  const { toast } = useToast();\n  \n  const { data: settings, isLoading } = useQuery<Settings>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const [formData, setFormData] = useState<Partial<Settings>>({});\n\n  useEffect(() => {\n    if (settings) {\n      setFormData(settings);\n    }\n  }, [settings]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: Partial<Settings>) => {\n      return apiRequest(\"PUT\", \"/api/settings\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"Settings saved\",\n        description: \"Your settings have been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateMutation.mutate(formData);\n  };\n\n  const updateField = (field: keyof Settings, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">Loading settings...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Settings</h1>\n            <p className=\"text-muted-foreground mt-1\">Configure system settings and preferences</p>\n          </div>\n          <Button \n            onClick={handleSave} \n            disabled={updateMutation.isPending}\n            data-testid=\"button-save-settings\"\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"general\" className=\"space-y-6\">\n          <TabsList className=\"grid grid-cols-5 lg:grid-cols-10 gap-2 h-auto p-1\">\n            <TabsTrigger value=\"general\" className=\"flex items-center gap-2\" data-testid=\"tab-general\">\n              <Building2 className=\"w-4 h-4\" />\n              <span className=\"hidden lg:inline\">General</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"payment\" className=\"flex items-center gap-2\" data-testid=\"tab-payment\">\n              <CreditCard className=\"w-4 h-4\" />\n              <span className=\"hidden lg:inline\">Payment</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"tax\" className=\"flex items-center gap-2\" data-testid=\"tab-tax\">\n              <Percent className=\"w-4 h-4\" />\n              <span className=\"hidden lg:inline\">Tax</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"receipt\" className=\"flex items-center gap-2\" data-testid=\"tab-receipt\">\n              <Receipt className=\"w-4 h-4\" />\n              <span className=\"hidden lg:inline\">Receipt</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"flex items-center gap-2\" data-testid=\"tab-users\">\n              <Users className=\"w-4 h-4\" />\n              <span className=\"hidden lg:inline\">Users</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"printer\" className=\"flex items-center gap-2\" data-testid=\"tab-printer\">\n              <Printer className=\"w-4 h-4\" />\n              <span className=\"hidden lg:inline\">Printer</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"currency\" className=\"flex items-center gap-2\" data-testid=\"tab-currency\">\n              <DollarSign className=\"w-4 h-4\" />\n              <span className=\"hidden lg:inline\">Currency</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"backup\" className=\"flex items-center gap-2\" data-testid=\"tab-backup\">\n              <Database className=\"w-4 h-4\" />\n              <span className=\"hidden lg:inline\">Backup</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\" data-testid=\"tab-notifications\">\n              <Bell className=\"w-4 h-4\" />\n              <span className=\"hidden lg:inline\">Alerts</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"theme\" className=\"flex items-center gap-2\" data-testid=\"tab-theme\">\n              <Palette className=\"w-4 h-4\" />\n              <span className=\"hidden lg:inline\">Theme</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"general\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>General Settings</CardTitle>\n                <CardDescription>Configure business information and preferences</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"business-name\">Business Name</Label>\n                    <Input \n                      id=\"business-name\" \n                      value={formData.businessName || \"\"} \n                      onChange={(e) => updateField(\"businessName\", e.target.value)}\n                      data-testid=\"input-business-name\" \n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"business-logo\">Business Logo</Label>\n                    <Input \n                      id=\"business-logo\" \n                      type=\"file\" \n                      accept=\"image/*\"\n                      data-testid=\"input-business-logo\" \n                      className=\"cursor-pointer\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Upload your business logo (PNG, JPG, or SVG)\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"address\">Business Address</Label>\n                    <Textarea \n                      id=\"address\" \n                      value={formData.address || \"\"} \n                      onChange={(e) => updateField(\"address\", e.target.value)}\n                      rows={3} \n                      data-testid=\"input-address\" \n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"phone\">Contact Phone</Label>\n                      <Input \n                        id=\"phone\" \n                        value={formData.phone || \"\"} \n                        onChange={(e) => updateField(\"phone\", e.target.value)}\n                        data-testid=\"input-phone\" \n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\">Contact Email</Label>\n                      <Input \n                        id=\"email\" \n                        type=\"email\" \n                        value={formData.email || \"\"} \n                        onChange={(e) => updateField(\"email\", e.target.value)}\n                        data-testid=\"input-email\" \n                      />\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"date-format\">Date Format</Label>\n                      <Select \n                        value={formData.dateFormat || \"dd-mm-yyyy\"} \n                        onValueChange={(value) => updateField(\"dateFormat\", value)}\n                      >\n                        <SelectTrigger id=\"date-format\" data-testid=\"select-date-format\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"dd-mm-yyyy\">DD/MM/YYYY</SelectItem>\n                          <SelectItem value=\"mm-dd-yyyy\">MM/DD/YYYY</SelectItem>\n                          <SelectItem value=\"yyyy-mm-dd\">YYYY-MM-DD</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"time-format\">Time Format</Label>\n                      <Select \n                        value={formData.timeFormat || \"12h\"} \n                        onValueChange={(value) => updateField(\"timeFormat\", value)}\n                      >\n                        <SelectTrigger id=\"time-format\" data-testid=\"select-time-format\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"12h\">12-hour (AM/PM)</SelectItem>\n                          <SelectItem value=\"24h\">24-hour</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"terminal-id\">Terminal/Register ID</Label>\n                    <Input \n                      id=\"terminal-id\" \n                      value={formData.terminalId || \"\"} \n                      onChange={(e) => updateField(\"terminalId\", e.target.value)}\n                      data-testid=\"input-terminal-id\" \n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"payment\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Methods Configuration</CardTitle>\n                <CardDescription>Enable or disable payment options</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Cash Payment</Label>\n                      <p className=\"text-sm text-muted-foreground\">Accept cash payments</p>\n                    </div>\n                    <Switch \n                      checked={formData.paymentCash === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"paymentCash\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-payment-cash\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Card Payment</Label>\n                      <p className=\"text-sm text-muted-foreground\">Accept credit/debit card payments</p>\n                    </div>\n                    <Switch \n                      checked={formData.paymentCard === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"paymentCard\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-payment-card\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>ABA Bank Transfer</Label>\n                      <p className=\"text-sm text-muted-foreground\">Accept ABA bank transfers</p>\n                    </div>\n                    <Switch \n                      checked={formData.paymentAba === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"paymentAba\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-payment-aba\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Acleda Bank Transfer</Label>\n                      <p className=\"text-sm text-muted-foreground\">Accept Acleda bank transfers</p>\n                    </div>\n                    <Switch \n                      checked={formData.paymentAcleda === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"paymentAcleda\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-payment-acleda\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Credit/Due Payment</Label>\n                      <p className=\"text-sm text-muted-foreground\">Allow customers to pay later</p>\n                    </div>\n                    <Switch \n                      checked={formData.paymentCredit === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"paymentCredit\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-payment-credit\"\n                    />\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <Label htmlFor=\"default-payment\">Default Payment Method</Label>\n                    <Select \n                      value={formData.defaultPaymentMethod || \"cash\"} \n                      onValueChange={(value) => updateField(\"defaultPaymentMethod\", value)}\n                    >\n                      <SelectTrigger id=\"default-payment\" data-testid=\"select-default-payment\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"cash\">Cash</SelectItem>\n                        <SelectItem value=\"card\">Card</SelectItem>\n                        <SelectItem value=\"aba\">ABA</SelectItem>\n                        <SelectItem value=\"acleda\">Acleda</SelectItem>\n                        <SelectItem value=\"credit\">Credit/Due</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"min-amount\">Minimum Transaction Amount</Label>\n                      <Input \n                        id=\"min-amount\" \n                        type=\"number\" \n                        value={formData.minTransactionAmount || \"0\"} \n                        onChange={(e) => updateField(\"minTransactionAmount\", e.target.value)}\n                        data-testid=\"input-min-amount\" \n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"max-amount\">Maximum Transaction Amount</Label>\n                      <Input \n                        id=\"max-amount\" \n                        type=\"number\" \n                        value={formData.maxTransactionAmount || \"\"} \n                        onChange={(e) => updateField(\"maxTransactionAmount\", e.target.value)}\n                        data-testid=\"input-max-amount\" \n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"tax\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Tax & Discount Settings</CardTitle>\n                <CardDescription>Configure tax rates and discount options</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"vat-rate\">VAT/Sales Tax Rate (%)</Label>\n                    <Input \n                      id=\"vat-rate\" \n                      type=\"number\" \n                      value={formData.vatRate || \"0\"} \n                      onChange={(e) => updateField(\"vatRate\", e.target.value)}\n                      data-testid=\"input-vat-rate\" \n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"service-tax\">Service Tax Rate (%)</Label>\n                    <Input \n                      id=\"service-tax\" \n                      type=\"number\" \n                      value={formData.serviceTaxRate || \"0\"} \n                      onChange={(e) => updateField(\"serviceTaxRate\", e.target.value)}\n                      data-testid=\"input-service-tax\" \n                    />\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <Label htmlFor=\"default-discount\">Default Discount (%)</Label>\n                    <Input \n                      id=\"default-discount\" \n                      type=\"number\" \n                      value={formData.defaultDiscount || \"0\"} \n                      onChange={(e) => updateField(\"defaultDiscount\", e.target.value)}\n                      data-testid=\"input-default-discount\" \n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Enable Percentage Discount</Label>\n                      <p className=\"text-sm text-muted-foreground\">Allow percentage-based discounts</p>\n                    </div>\n                    <Switch \n                      checked={formData.enablePercentageDiscount === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"enablePercentageDiscount\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-percentage-discount\" \n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Enable Fixed Amount Discount</Label>\n                      <p className=\"text-sm text-muted-foreground\">Allow fixed dollar discounts</p>\n                    </div>\n                    <Switch \n                      checked={formData.enableFixedDiscount === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"enableFixedDiscount\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-fixed-discount\" \n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"max-discount\">Maximum Discount (%)</Label>\n                    <Input \n                      id=\"max-discount\" \n                      type=\"number\" \n                      value={formData.maxDiscount || \"50\"} \n                      onChange={(e) => updateField(\"maxDiscount\", e.target.value)}\n                      data-testid=\"input-max-discount\" \n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"receipt\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Receipt & Invoice Settings</CardTitle>\n                <CardDescription>Customize receipt appearance and settings</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"invoice-prefix\">Invoice Number Prefix</Label>\n                    <Input \n                      id=\"invoice-prefix\" \n                      value={formData.invoicePrefix || \"INV-\"} \n                      onChange={(e) => updateField(\"invoicePrefix\", e.target.value)}\n                      data-testid=\"input-invoice-prefix\" \n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"receipt-header\">Receipt Header Text</Label>\n                    <Textarea \n                      id=\"receipt-header\" \n                      value={formData.receiptHeader || \"\"} \n                      onChange={(e) => updateField(\"receiptHeader\", e.target.value)}\n                      rows={2} \n                      data-testid=\"input-receipt-header\" \n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"receipt-footer\">Receipt Footer Text</Label>\n                    <Textarea \n                      id=\"receipt-footer\" \n                      value={formData.receiptFooter || \"\"} \n                      onChange={(e) => updateField(\"receiptFooter\", e.target.value)}\n                      rows={3} \n                      data-testid=\"input-receipt-footer\" \n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"receipt-logo\">Receipt Logo</Label>\n                    <Input \n                      id=\"receipt-logo\" \n                      type=\"file\" \n                      accept=\"image/*\"\n                      data-testid=\"input-receipt-logo\" \n                      className=\"cursor-pointer\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Upload your business logo for receipts (PNG, JPG, or SVG)\n                    </p>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Auto-Print Receipt</Label>\n                      <p className=\"text-sm text-muted-foreground\">Automatically print after payment</p>\n                    </div>\n                    <Switch \n                      checked={formData.autoPrintReceipt === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"autoPrintReceipt\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-auto-print\" \n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Show Logo on Receipt</Label>\n                      <p className=\"text-sm text-muted-foreground\">Display business logo on printed receipts</p>\n                    </div>\n                    <Switch \n                      checked={formData.showLogoOnReceipt === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"showLogoOnReceipt\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-show-logo\" \n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Include Tax Breakdown</Label>\n                      <p className=\"text-sm text-muted-foreground\">Show detailed tax information</p>\n                    </div>\n                    <Switch \n                      checked={formData.includeTaxBreakdown === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"includeTaxBreakdown\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-tax-breakdown\" \n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>User & Access Management</CardTitle>\n                <CardDescription>Manage staff users and permissions</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <h3 className=\"text-lg font-medium\">Staff Users</h3>\n                      <p className=\"text-sm text-muted-foreground\">Add and manage staff access</p>\n                    </div>\n                    <Button data-testid=\"button-add-user\">Add User</Button>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-4 border rounded-md\">\n                      <div>\n                        <p className=\"font-medium\">Admin User</p>\n                        <p className=\"text-sm text-muted-foreground\">Full system access</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium\">Manager</span>\n                        <Button variant=\"outline\" size=\"sm\" data-testid=\"button-edit-user-1\">Edit</Button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 border rounded-md\">\n                      <div>\n                        <p className=\"font-medium\">Cashier 01</p>\n                        <p className=\"text-sm text-muted-foreground\">POS and sales access</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium\">Cashier</span>\n                        <Button variant=\"outline\" size=\"sm\" data-testid=\"button-edit-user-2\">Edit</Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h4 className=\"font-medium mb-3\">Role Permissions</h4>\n                    <p className=\"text-sm text-muted-foreground mb-4\">Configure default permissions for cashier role</p>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label>Access to Reports</Label>\n                          <p className=\"text-xs text-muted-foreground\">View sales and analytics reports</p>\n                        </div>\n                        <Switch \n                          checked={formData.permAccessReports === \"true\"}\n                          onCheckedChange={(checked) => updateField(\"permAccessReports\", checked ? \"true\" : \"false\")}\n                          data-testid=\"switch-perm-reports\" \n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label>Access to Settings</Label>\n                          <p className=\"text-xs text-muted-foreground\">Modify system configuration</p>\n                        </div>\n                        <Switch \n                          checked={formData.permAccessSettings === \"true\"}\n                          onCheckedChange={(checked) => updateField(\"permAccessSettings\", checked ? \"true\" : \"false\")}\n                          data-testid=\"switch-perm-settings\" \n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label>Process Refunds</Label>\n                          <p className=\"text-xs text-muted-foreground\">Issue refunds and reversals</p>\n                        </div>\n                        <Switch \n                          checked={formData.permProcessRefunds === \"true\"}\n                          onCheckedChange={(checked) => updateField(\"permProcessRefunds\", checked ? \"true\" : \"false\")}\n                          data-testid=\"switch-perm-refunds\" \n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label>Manage Inventory</Label>\n                          <p className=\"text-xs text-muted-foreground\">Add and edit inventory items</p>\n                        </div>\n                        <Switch \n                          checked={formData.permManageInventory === \"true\"}\n                          onCheckedChange={(checked) => updateField(\"permManageInventory\", checked ? \"true\" : \"false\")}\n                          data-testid=\"switch-perm-inventory\" \n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"printer\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Printer & Hardware Setup</CardTitle>\n                <CardDescription>Configure POS hardware devices</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"receipt-printer\">Receipt Printer</Label>\n                    <Select \n                      value={formData.receiptPrinter || \"default\"} \n                      onValueChange={(value) => updateField(\"receiptPrinter\", value)}\n                    >\n                      <SelectTrigger id=\"receipt-printer\" data-testid=\"select-receipt-printer\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"default\">Default Printer</SelectItem>\n                        <SelectItem value=\"epson-tm\">Epson TM-T88</SelectItem>\n                        <SelectItem value=\"star-tsp\">Star TSP143</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"kitchen-printer\">Kitchen Printer (KOT)</Label>\n                    <Select \n                      value={formData.kitchenPrinter || \"none\"} \n                      onValueChange={(value) => updateField(\"kitchenPrinter\", value)}\n                    >\n                      <SelectTrigger id=\"kitchen-printer\" data-testid=\"select-kitchen-printer\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"none\">None</SelectItem>\n                        <SelectItem value=\"epson-tm\">Epson TM-T88</SelectItem>\n                        <SelectItem value=\"star-tsp\">Star TSP143</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"paper-size\">Paper Size</Label>\n                    <Select \n                      value={formData.paperSize || \"80mm\"} \n                      onValueChange={(value) => updateField(\"paperSize\", value)}\n                    >\n                      <SelectTrigger id=\"paper-size\" data-testid=\"select-paper-size\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"58mm\">58mm</SelectItem>\n                        <SelectItem value=\"80mm\">80mm</SelectItem>\n                        <SelectItem value=\"a4\">A4</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Enable Barcode Scanner</Label>\n                      <p className=\"text-sm text-muted-foreground\">Connect barcode scanner device</p>\n                    </div>\n                    <Switch \n                      checked={formData.enableBarcodeScanner === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"enableBarcodeScanner\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-barcode-scanner\" \n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Enable Cash Drawer</Label>\n                      <p className=\"text-sm text-muted-foreground\">Auto-open cash drawer on payment</p>\n                    </div>\n                    <Switch \n                      checked={formData.enableCashDrawer === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"enableCashDrawer\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-cash-drawer\" \n                    />\n                  </div>\n\n                  <div>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-test-printer\">\n                      <Printer className=\"w-4 h-4 mr-2\" />\n                      Test Print\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"currency\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Currency & Localization</CardTitle>\n                <CardDescription>Set currency and regional preferences</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"currency\">Default Currency</Label>\n                    <Select \n                      value={formData.currency || \"usd\"} \n                      onValueChange={(value) => updateField(\"currency\", value)}\n                    >\n                      <SelectTrigger id=\"currency\" data-testid=\"select-currency\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"usd\">USD ($)</SelectItem>\n                        <SelectItem value=\"khr\">KHR (៛)</SelectItem>\n                        <SelectItem value=\"eur\">EUR (€)</SelectItem>\n                        <SelectItem value=\"gbp\">GBP (£)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"language\">Language</Label>\n                    <Select \n                      value={formData.language || \"en\"} \n                      onValueChange={(value) => updateField(\"language\", value)}\n                    >\n                      <SelectTrigger id=\"language\" data-testid=\"select-language\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"en\">English</SelectItem>\n                        <SelectItem value=\"km\">Khmer</SelectItem>\n                        <SelectItem value=\"zh\">Chinese</SelectItem>\n                        <SelectItem value=\"th\">Thai</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"decimal-places\">Decimal Places</Label>\n                    <Select \n                      value={formData.decimalPlaces || \"2\"} \n                      onValueChange={(value) => updateField(\"decimalPlaces\", value)}\n                    >\n                      <SelectTrigger id=\"decimal-places\" data-testid=\"select-decimal-places\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"0\">0 (No decimals)</SelectItem>\n                        <SelectItem value=\"2\">2 (0.00)</SelectItem>\n                        <SelectItem value=\"3\">3 (0.000)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"rounding\">Rounding Rule</Label>\n                    <Select \n                      value={formData.roundingRule || \"nearest\"} \n                      onValueChange={(value) => updateField(\"roundingRule\", value)}\n                    >\n                      <SelectTrigger id=\"rounding\" data-testid=\"select-rounding\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"nearest\">Round to Nearest</SelectItem>\n                        <SelectItem value=\"up\">Round Up</SelectItem>\n                        <SelectItem value=\"down\">Round Down</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"currency-symbol\">Currency Symbol Position</Label>\n                    <Select \n                      value={formData.currencySymbolPosition || \"before\"} \n                      onValueChange={(value) => updateField(\"currencySymbolPosition\", value)}\n                    >\n                      <SelectTrigger id=\"currency-symbol\" data-testid=\"select-symbol-position\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"before\">Before Amount ($100)</SelectItem>\n                        <SelectItem value=\"after\">After Amount (100$)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"backup\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Backup & Data Management</CardTitle>\n                <CardDescription>Configure data backup and recovery options</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Enable Automatic Backups</Label>\n                      <p className=\"text-sm text-muted-foreground\">Backup data automatically</p>\n                    </div>\n                    <Switch \n                      checked={formData.autoBackup === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"autoBackup\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-auto-backup\" \n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"backup-frequency\">Backup Frequency</Label>\n                    <Select \n                      value={formData.backupFrequency || \"daily\"} \n                      onValueChange={(value) => updateField(\"backupFrequency\", value)}\n                    >\n                      <SelectTrigger id=\"backup-frequency\" data-testid=\"select-backup-frequency\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"hourly\">Hourly</SelectItem>\n                        <SelectItem value=\"daily\">Daily</SelectItem>\n                        <SelectItem value=\"weekly\">Weekly</SelectItem>\n                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"backup-storage\">Backup Storage</Label>\n                    <Select \n                      value={formData.backupStorage || \"cloud\"} \n                      onValueChange={(value) => updateField(\"backupStorage\", value)}\n                    >\n                      <SelectTrigger id=\"backup-storage\" data-testid=\"select-backup-storage\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"local\">Local Storage</SelectItem>\n                        <SelectItem value=\"cloud\">Cloud Storage</SelectItem>\n                        <SelectItem value=\"both\">Both</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h4 className=\"font-medium mb-3\">Manual Backup & Recovery</h4>\n                    <div className=\"flex gap-2\">\n                      <Button variant=\"outline\" className=\"flex-1\" data-testid=\"button-backup-now\">\n                        <Database className=\"w-4 h-4 mr-2\" />\n                        Backup Now\n                      </Button>\n                      <Button variant=\"outline\" className=\"flex-1\" data-testid=\"button-restore\">\n                        <Database className=\"w-4 h-4 mr-2\" />\n                        Restore Data\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"p-4 bg-muted rounded-md\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Last backup: Never\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Notifications & Alerts</CardTitle>\n                <CardDescription>Configure system notifications and alerts</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Low Stock Alerts</Label>\n                      <p className=\"text-sm text-muted-foreground\">Notify when inventory is low</p>\n                    </div>\n                    <Switch \n                      checked={formData.lowStockAlerts === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"lowStockAlerts\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-low-stock-alerts\" \n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"stock-threshold\">Low Stock Threshold</Label>\n                    <Input \n                      id=\"stock-threshold\" \n                      type=\"number\" \n                      value={formData.stockThreshold || 10} \n                      onChange={(e) => updateField(\"stockThreshold\", parseInt(e.target.value))}\n                      data-testid=\"input-stock-threshold\" \n                    />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Sale Notifications</Label>\n                      <p className=\"text-sm text-muted-foreground\">Alert on new sales</p>\n                    </div>\n                    <Switch \n                      checked={formData.saleNotifications === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"saleNotifications\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-sale-notifications\" \n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Discount Alerts</Label>\n                      <p className=\"text-sm text-muted-foreground\">Notify when discounts are applied</p>\n                    </div>\n                    <Switch \n                      checked={formData.discountAlerts === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"discountAlerts\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-discount-alerts\" \n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>System Update Notifications</Label>\n                      <p className=\"text-sm text-muted-foreground\">Alert on system updates</p>\n                    </div>\n                    <Switch \n                      checked={formData.systemUpdateNotifications === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"systemUpdateNotifications\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-system-updates\" \n                    />\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <Label htmlFor=\"notification-email\">Notification Email</Label>\n                    <Input \n                      id=\"notification-email\" \n                      type=\"email\" \n                      value={formData.notificationEmail || \"\"} \n                      onChange={(e) => updateField(\"notificationEmail\", e.target.value)}\n                      data-testid=\"input-notification-email\" \n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"theme\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Customization & Themes</CardTitle>\n                <CardDescription>Customize the appearance of your POS system</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"color-theme\">Color Theme</Label>\n                    <Select \n                      value={formData.colorTheme || \"orange\"} \n                      onValueChange={(value) => updateField(\"colorTheme\", value)}\n                    >\n                      <SelectTrigger id=\"color-theme\" data-testid=\"select-color-theme\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"orange\">Orange (Default)</SelectItem>\n                        <SelectItem value=\"blue\">Blue</SelectItem>\n                        <SelectItem value=\"green\">Green</SelectItem>\n                        <SelectItem value=\"purple\">Purple</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"layout\">Layout Preference</Label>\n                    <Select \n                      value={formData.layoutPreference || \"grid\"} \n                      onValueChange={(value) => updateField(\"layoutPreference\", value)}\n                    >\n                      <SelectTrigger id=\"layout\" data-testid=\"select-layout\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"grid\">Grid View</SelectItem>\n                        <SelectItem value=\"list\">List View</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"font-size\">Font Size</Label>\n                    <Select \n                      value={formData.fontSize || \"medium\"} \n                      onValueChange={(value) => updateField(\"fontSize\", value)}\n                    >\n                      <SelectTrigger id=\"font-size\" data-testid=\"select-font-size\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"small\">Small</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"large\">Large</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Compact Mode</Label>\n                      <p className=\"text-sm text-muted-foreground\">Reduce spacing for more content</p>\n                    </div>\n                    <Switch \n                      checked={formData.compactMode === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"compactMode\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-compact-mode\" \n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Show Animations</Label>\n                      <p className=\"text-sm text-muted-foreground\">Enable UI animations</p>\n                    </div>\n                    <Switch \n                      checked={formData.showAnimations === \"true\"}\n                      onCheckedChange={(checked) => updateField(\"showAnimations\", checked ? \"true\" : \"false\")}\n                      data-testid=\"switch-animations\" \n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":50254},"client/src/pages/tables.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTableSchema, type Table as TableType } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport { Plus, Edit, Trash2, Eye, Printer, Users } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Tables() {\n  const [tableDialogOpen, setTableDialogOpen] = useState(false);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [editingTable, setEditingTable] = useState<TableType | null>(null);\n  const [viewingTable, setViewingTable] = useState<TableType | null>(null);\n  const { toast } = useToast();\n\n  const { data: tables = [] } = useQuery<TableType[]>({\n    queryKey: [\"/api/tables\"],\n  });\n\n  const tableForm = useForm<z.infer<typeof insertTableSchema>>({\n    resolver: zodResolver(insertTableSchema),\n    defaultValues: {\n      tableNumber: \"\",\n      capacity: \"\",\n      description: \"\",\n      status: \"available\",\n    },\n  });\n\n  const createTableMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof insertTableSchema>) => {\n      return await apiRequest(\"POST\", \"/api/tables\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      setTableDialogOpen(false);\n      tableForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Table created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create table\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTableMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<z.infer<typeof insertTableSchema>> }) => {\n      return await apiRequest(\"PATCH\", `/api/tables/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      setTableDialogOpen(false);\n      tableForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Table updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update table\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTableMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/tables/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      toast({\n        title: \"Success\",\n        description: \"Table deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete table\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTableSubmit = (data: z.infer<typeof insertTableSchema>) => {\n    if (editingTable) {\n      updateTableMutation.mutate({ id: editingTable.id, data });\n    } else {\n      createTableMutation.mutate(data);\n    }\n  };\n\n  const handleEditTable = (table: TableType) => {\n    setEditingTable(table);\n    tableForm.reset({\n      tableNumber: table.tableNumber,\n      capacity: table.capacity || \"\",\n      description: table.description || \"\",\n      status: table.status,\n    });\n    setTableDialogOpen(true);\n  };\n\n  const handleAddTableClick = () => {\n    setEditingTable(null);\n    tableForm.reset({\n      tableNumber: \"\",\n      capacity: \"\",\n      description: \"\",\n      status: \"available\",\n    });\n    setTableDialogOpen(true);\n  };\n\n  const handleViewTable = (table: TableType) => {\n    setViewingTable(table);\n    setViewDialogOpen(true);\n  };\n\n  const handlePrintTable = (table: TableType) => {\n    const printContent = `\n      <html>\n        <head>\n          <title>Table Information - ${table.tableNumber}</title>\n          <style>\n            body { font-family: Arial, sans-serif; padding: 20px; }\n            h1 { color: #EA580C; }\n            .details { margin: 20px 0; }\n            .details p { margin: 8px 0; }\n            .label { font-weight: bold; }\n          </style>\n        </head>\n        <body>\n          <h1>Table Information</h1>\n          <div class=\"details\">\n            <p><span class=\"label\">Table Number:</span> ${table.tableNumber}</p>\n            <p><span class=\"label\">Capacity:</span> ${table.capacity || 'Not specified'}</p>\n            <p><span class=\"label\">Description:</span> ${table.description || 'No description'}</p>\n            <p><span class=\"label\">Status:</span> ${table.status}</p>\n          </div>\n        </body>\n      </html>\n    `;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      printWindow.print();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex items-center justify-between p-6 border-b\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" data-testid=\"text-page-title\">Table Management</h1>\n          <p className=\"text-sm text-muted-foreground\">Manage your restaurant tables and seating arrangements</p>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-auto p-6\">\n        <div className=\"space-y-6\">\n          <div className=\"flex justify-end\">\n            <Dialog open={tableDialogOpen} onOpenChange={setTableDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={handleAddTableClick} data-testid=\"button-add-table\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Table\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\" data-testid=\"dialog-table\">\n                <DialogHeader>\n                  <DialogTitle>{editingTable ? \"Edit Table\" : \"Add New Table\"}</DialogTitle>\n                  <DialogDescription>\n                    {editingTable ? \"Update table information\" : \"Create a new table in your restaurant\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...tableForm}>\n                  <form onSubmit={tableForm.handleSubmit(handleTableSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={tableForm.control}\n                      name=\"tableNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Table Number/Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 1, A1, VIP-1\" data-testid=\"input-table-number\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={tableForm.control}\n                      name=\"capacity\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Capacity (optional)</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} placeholder=\"e.g., 4, 6, 8\" data-testid=\"input-capacity\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={tableForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description (optional)</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              {...field} \n                              value={field.value || \"\"}\n                              placeholder=\"e.g., Window seat, Outdoor patio, Private room\" \n                              data-testid=\"input-description\"\n                              rows={3}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <DialogFooter>\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setTableDialogOpen(false)} data-testid=\"button-cancel\">\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createTableMutation.isPending || updateTableMutation.isPending} data-testid=\"button-submit\">\n                        {editingTable ? \"Update\" : \"Create\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Table Number</TableHead>\n                      <TableHead>Capacity</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead className=\"text-center w-[200px]\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {tables.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={5} className=\"text-center py-12\">\n                          <Users className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                          <p className=\"text-muted-foreground\">No tables found</p>\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      tables.map((table) => (\n                        <TableRow key={table.id} data-testid={`row-table-${table.id}`}>\n                          <TableCell className=\"font-medium\" data-testid={`text-table-number-${table.id}`}>\n                            {table.tableNumber}\n                          </TableCell>\n                          <TableCell data-testid={`text-capacity-${table.id}`}>\n                            {table.capacity || '-'}\n                          </TableCell>\n                          <TableCell data-testid={`text-description-${table.id}`}>\n                            {table.description || '-'}\n                          </TableCell>\n                          <TableCell data-testid={`text-status-${table.id}`}>\n                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                              table.status === 'available' ? 'bg-green-100 text-green-800' :\n                              table.status === 'occupied' ? 'bg-red-100 text-red-800' :\n                              'bg-gray-100 text-gray-800'\n                            }`}>\n                              {table.status}\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2 justify-center\">\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                onClick={() => handleViewTable(table)}\n                                data-testid={`button-view-${table.id}`}\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                onClick={() => handleEditTable(table)}\n                                data-testid={`button-edit-${table.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                onClick={() => handlePrintTable(table)}\n                                data-testid={`button-print-${table.id}`}\n                              >\n                                <Printer className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                onClick={() => deleteTableMutation.mutate(table.id)}\n                                data-testid={`button-delete-${table.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n        <DialogContent className=\"max-w-md\" data-testid=\"dialog-view-table\">\n          <DialogHeader>\n            <DialogTitle>Table Details</DialogTitle>\n          </DialogHeader>\n          {viewingTable && (\n            <div className=\"space-y-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Table Number</p>\n                <p className=\"font-medium text-lg\">{viewingTable.tableNumber}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Capacity</p>\n                <p className=\"font-medium\">{viewingTable.capacity || 'Not specified'}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Description</p>\n                <p className=\"font-medium\">{viewingTable.description || 'No description provided'}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Status</p>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                  viewingTable.status === 'available' ? 'bg-green-100 text-green-800' :\n                  viewingTable.status === 'occupied' ? 'bg-red-100 text-red-800' :\n                  'bg-gray-100 text-gray-800'\n                }`}>\n                  {viewingTable.status}\n                </span>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":15461},"client/src/components/draft-list-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Edit, Printer, Trash2, ShoppingCart } from \"lucide-react\";\nimport type { Order } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface DraftListModalProps {\n  open: boolean;\n  onClose: () => void;\n  draftOrders: Order[];\n  onEditDraft: (orderId: string) => void;\n  onPrintDraft: (orderId: string) => void;\n  onDeleteDraft: (orderId: string) => void;\n}\n\nexport function DraftListModal({\n  open,\n  onClose,\n  draftOrders,\n  onEditDraft,\n  onPrintDraft,\n  onDeleteDraft,\n}: DraftListModalProps) {\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl\" data-testid=\"modal-draft-list\">\n        <DialogHeader>\n          <DialogTitle>Draft Orders</DialogTitle>\n          <DialogDescription>\n            Manage your saved draft orders\n          </DialogDescription>\n        </DialogHeader>\n\n        <ScrollArea className=\"max-h-[500px] pr-4\">\n          <div className=\"space-y-3\">\n            {draftOrders.length === 0 ? (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <ShoppingCart className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p className=\"text-sm\">No draft orders</p>\n                <p className=\"text-xs mt-1\">Save an order as draft to see it here</p>\n              </div>\n            ) : (\n              draftOrders.map((order) => (\n                <Card key={order.id} className=\"p-4\" data-testid={`card-draft-${order.id}`}>\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h4 className=\"font-semibold\">Order #{order.orderNumber}</h4>\n                        <Badge variant=\"secondary\" data-testid={`badge-status-${order.id}`}>\n                          Draft\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-2 text-sm text-muted-foreground\">\n                        <div>\n                          <span className=\"font-medium\">Created:</span>{\" \"}\n                          {format(new Date(order.createdAt), \"MMM dd, yyyy HH:mm\")}\n                        </div>\n                        {order.tableId && (\n                          <div>\n                            <span className=\"font-medium\">Table:</span> {order.tableId}\n                          </div>\n                        )}\n                        <div>\n                          <span className=\"font-medium\">Dining:</span>{\" \"}\n                          {order.diningOption}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Total:</span>{\" \"}\n                          <span className=\"font-mono font-semibold text-foreground\">\n                            ${parseFloat(order.total).toFixed(2)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => onEditDraft(order.id)}\n                        data-testid={`button-edit-draft-${order.id}`}\n                        title=\"Edit Order\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => onPrintDraft(order.id)}\n                        data-testid={`button-print-draft-${order.id}`}\n                        title=\"Print Order\"\n                      >\n                        <Printer className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => onDeleteDraft(order.id)}\n                        data-testid={`button-delete-draft-${order.id}`}\n                        title=\"Delete Order\"\n                      >\n                        <Trash2 className=\"w-4 h-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  </div>\n                </Card>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4813},"client/src/components/receipt-print-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Printer, Receipt, Utensils, Calendar, Hash } from \"lucide-react\";\nimport type { Order, OrderItem, Product } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface ReceiptPrintModalProps {\n  open: boolean;\n  onClose: () => void;\n  order: {\n    orderNumber: string;\n    items: Array<{\n      product: Product;\n      quantity: number;\n      price: string;\n      total: string;\n    }>;\n    subtotal: number;\n    discount: number;\n    total: number;\n    tableId?: string | null;\n    diningOption: string;\n  };\n  onPrint: () => void;\n}\n\nexport function ReceiptPrintModal({\n  open,\n  onClose,\n  order,\n  onPrint,\n}: ReceiptPrintModalProps) {\n  const handlePrint = () => {\n    window.print();\n    onPrint();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-receipt-print\">\n        <DialogHeader className=\"space-y-3 pb-2\">\n          <div className=\"flex items-center justify-center gap-2\">\n            <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-primary to-orange-600 flex items-center justify-center shadow-lg\">\n              <Receipt className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <DialogTitle className=\"text-xl\">Receipt Preview</DialogTitle>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\" id=\"receipt-content\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 to-orange-600/5 rounded-lg -z-10\" />\n            <div className=\"text-center space-y-2 py-6 px-4\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-primary to-orange-600 flex items-center justify-center\">\n                  <Utensils className=\"w-4 h-4 text-primary-foreground\" />\n                </div>\n                <h2 className=\"text-2xl font-bold bg-gradient-to-r from-primary to-orange-600 bg-clip-text text-transparent\">\n                  BondPos\n                </h2>\n              </div>\n              <p className=\"text-sm text-muted-foreground font-medium\">Restaurant POS System</p>\n              <div className=\"flex items-center justify-center gap-1 text-xs text-muted-foreground\">\n                <Calendar className=\"w-3 h-3\" />\n                <span>{format(new Date(), \"MMM dd, yyyy HH:mm\")}</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t-2 border-b-2 border-dashed border-border py-3 space-y-2\">\n            <div className=\"flex items-center justify-between px-2\">\n              <div className=\"flex items-center gap-2\">\n                <Hash className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">Order #:</span>\n              </div>\n              <Badge variant=\"secondary\" className=\"font-mono font-semibold\">\n                {order.orderNumber}\n              </Badge>\n            </div>\n            {order.tableId && (\n              <div className=\"flex items-center justify-between px-2\">\n                <span className=\"text-sm text-muted-foreground\">Table:</span>\n                <Badge variant=\"outline\" className=\"font-semibold\">\n                  {order.tableId}\n                </Badge>\n              </div>\n            )}\n            <div className=\"flex items-center justify-between px-2\">\n              <span className=\"text-sm text-muted-foreground\">Dining Option:</span>\n              <Badge className=\"capitalize bg-primary/10 text-primary hover:bg-primary/20\">\n                {order.diningOption}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"space-y-3 px-2\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"h-px flex-1 bg-gradient-to-r from-transparent via-border to-transparent\" />\n              <h3 className=\"font-semibold text-sm text-muted-foreground uppercase tracking-wide\">\n                Order Items\n              </h3>\n              <div className=\"h-px flex-1 bg-gradient-to-r from-transparent via-border to-transparent\" />\n            </div>\n            <div className=\"space-y-3\">\n              {order.items.map((item, index) => (\n                <div \n                  key={index} \n                  className=\"bg-accent/30 rounded-lg p-3 hover-elevate transition-all\" \n                  data-testid={`receipt-item-${index}`}\n                >\n                  <div className=\"flex justify-between items-start gap-3\">\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-semibold text-sm truncate\">{item.product.name}</p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Badge variant=\"outline\" className=\"text-xs font-mono\">\n                          {item.quantity}x\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          ${parseFloat(item.price).toFixed(2)} each\n                        </span>\n                      </div>\n                    </div>\n                    <span className=\"font-mono font-bold text-primary shrink-0\">\n                      ${parseFloat(item.total).toFixed(2)}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <Separator className=\"my-4\" />\n\n          <div className=\"space-y-2 px-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Subtotal:</span>\n              <span className=\"font-mono font-medium\">${order.subtotal.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Discount:</span>\n              <span className=\"font-mono font-medium text-green-600\">\n                ${order.discount.toFixed(2)}\n              </span>\n            </div>\n            \n            <div className=\"border-t-2 border-dashed border-border pt-3 mt-3\">\n              <div className=\"bg-gradient-to-r from-primary/10 via-orange-600/10 to-primary/10 rounded-lg p-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-bold text-lg\">Total:</span>\n                  <span \n                    className=\"font-mono font-bold text-2xl bg-gradient-to-r from-primary to-orange-600 bg-clip-text text-transparent\" \n                    data-testid=\"receipt-total\"\n                  >\n                    ${order.total.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t-2 border-dashed border-border pt-4 mt-4\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"inline-flex items-center justify-center gap-1 text-primary\">\n                <div className=\"w-1 h-1 rounded-full bg-primary animate-pulse\" />\n                <p className=\"text-sm font-semibold\">Thank you for your business!</p>\n                <div className=\"w-1 h-1 rounded-full bg-primary animate-pulse\" />\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Powered by <span className=\"font-semibold text-primary\">BondPos</span> POS System\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <DialogFooter className=\"gap-2 sm:gap-0\">\n          <Button \n            variant=\"outline\" \n            onClick={onClose} \n            data-testid=\"button-close-receipt\"\n            className=\"gap-2\"\n          >\n            Close\n          </Button>\n          <Button \n            onClick={handlePrint} \n            className=\"gap-2 bg-gradient-to-r from-primary to-orange-600 hover:from-primary/90 hover:to-orange-600/90\" \n            data-testid=\"button-print-receipt\"\n          >\n            <Printer className=\"w-4 h-4\" />\n            Print\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8399},"attached_assets/content-1759785636632.md":{"content":"[Skip to content](https://github.com/PersonalHub360/bondpos#start-of-content)\n\nYou signed in with another tab or window. [Reload](https://github.com/PersonalHub360/bondpos) to refresh your session.You signed out in another tab or window. [Reload](https://github.com/PersonalHub360/bondpos) to refresh your session.You switched accounts on another tab or window. [Reload](https://github.com/PersonalHub360/bondpos) to refresh your session.Dismiss alert\n\n{{ message }}\n\n[PersonalHub360](https://github.com/PersonalHub360)/ **[bondpos](https://github.com/PersonalHub360/bondpos)** Public\n\n- [Notifications](https://github.com/login?return_to=%2FPersonalHub360%2Fbondpos) You must be signed in to change notification settings\n- [Fork\\\\\n0](https://github.com/login?return_to=%2FPersonalHub360%2Fbondpos)\n- [Star\\\\\n0](https://github.com/login?return_to=%2FPersonalHub360%2Fbondpos)\n\n\n[0\\\\\nstars](https://github.com/PersonalHub360/bondpos/stargazers) [0\\\\\nforks](https://github.com/PersonalHub360/bondpos/forks) [Branches](https://github.com/PersonalHub360/bondpos/branches) [Tags](https://github.com/PersonalHub360/bondpos/tags) [Activity](https://github.com/PersonalHub360/bondpos/activity)\n\n[Star](https://github.com/login?return_to=%2FPersonalHub360%2Fbondpos)\n\n[Notifications](https://github.com/login?return_to=%2FPersonalHub360%2Fbondpos) You must be signed in to change notification settings\n\n# PersonalHub360/bondpos\n\nmain\n\n[**1** Branch](https://github.com/PersonalHub360/bondpos/branches) [**0** Tags](https://github.com/PersonalHub360/bondpos/tags)\n\n[Go to Branches page](https://github.com/PersonalHub360/bondpos/branches)[Go to Tags page](https://github.com/PersonalHub360/bondpos/tags)\n\nGo to file\n\nCode\n\nOpen more actions menu\n\n## Folders and files\n\n| Name | Name | Last commit message | Last commit date |\n| --- | --- | --- | --- |\n| ## Latest commit<br>[![PersonalHub360](https://avatars.githubusercontent.com/u/233523797?v=4&size=40)](https://github.com/PersonalHub360)[PersonalHub360](https://github.com/PersonalHub360/bondpos/commits?author=PersonalHub360)<br>[Initial commit](https://github.com/PersonalHub360/bondpos/commit/ee2853afbd25aa7722a7e14e1aa859c75b2746bc)<br>12 hours agoOct 6, 2025<br>[ee2853a](https://github.com/PersonalHub360/bondpos/commit/ee2853afbd25aa7722a7e14e1aa859c75b2746bc) · 12 hours agoOct 6, 2025<br>## History<br>[1 Commit](https://github.com/PersonalHub360/bondpos/commits/main/) <br>Open commit details<br>[View commit history for this file.](https://github.com/PersonalHub360/bondpos/commits/main/) |\n| [README.md](https://github.com/PersonalHub360/bondpos/blob/main/README.md \"README.md\") | [README.md](https://github.com/PersonalHub360/bondpos/blob/main/README.md \"README.md\") | [Initial commit](https://github.com/PersonalHub360/bondpos/commit/ee2853afbd25aa7722a7e14e1aa859c75b2746bc \"Initial commit\") | 12 hours agoOct 6, 2025 |\n| View all files |\n\n## Repository files navigation\n\n# bondpos\n\n[Permalink: bondpos](https://github.com/PersonalHub360/bondpos#bondpos)\n\n## About\n\nNo description, website, or topics provided.\n\n\n### Resources\n\n[Readme](https://github.com/PersonalHub360/bondpos#readme-ov-file)\n\n### Uh oh!\n\nThere was an error while loading. [Please reload this page](https://github.com/PersonalHub360/bondpos).\n\n[Activity](https://github.com/PersonalHub360/bondpos/activity)\n\n### Stars\n\n[**0**\\\\\nstars](https://github.com/PersonalHub360/bondpos/stargazers)\n\n### Watchers\n\n[**0**\\\\\nwatching](https://github.com/PersonalHub360/bondpos/watchers)\n\n### Forks\n\n[**0**\\\\\nforks](https://github.com/PersonalHub360/bondpos/forks)\n\n[Report repository](https://github.com/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2FPersonalHub360%2Fbondpos&report=PersonalHub360+%28user%29)\n\n## [Releases](https://github.com/PersonalHub360/bondpos/releases)\n\nNo releases published\n\n## [Packages\\  0](https://github.com/users/PersonalHub360/packages?repo_name=bondpos)\n\nNo packages published\n\nYou can’t perform that action at this time.","size_bytes":3991},"client/src/components/qr-menu-orders-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { CheckCircle, XCircle, Clock, ShoppingCart, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Order } from \"@shared/schema\";\n\ninterface QROrderItem {\n  id: string;\n  productId: string;\n  productName: string;\n  quantity: number;\n  price: string;\n  total: string;\n}\n\ninterface QROrder extends Order {\n  items: QROrderItem[];\n}\n\ninterface QRMenuOrdersModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function QRMenuOrdersModal({ open, onOpenChange }: QRMenuOrdersModalProps) {\n  const { toast } = useToast();\n\n  const { data: qrOrders = [], isLoading } = useQuery<QROrder[]>({\n    queryKey: [\"/api/orders/qr\"],\n    enabled: open,\n  });\n\n  const acceptOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      return await apiRequest(\"PATCH\", `/api/orders/${orderId}/accept`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders/qr\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Order Accepted\",\n        description: \"The order has been accepted and sent to kitchen\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to accept order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      return await apiRequest(\"PATCH\", `/api/orders/${orderId}/reject`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders/qr\"] });\n      toast({\n        title: \"Order Rejected\",\n        description: \"The order has been rejected\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAcceptOrder = (orderId: string) => {\n    acceptOrderMutation.mutate(orderId);\n  };\n\n  const handleRejectOrder = (orderId: string) => {\n    rejectOrderMutation.mutate(orderId);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[85vh]\" data-testid=\"dialog-qr-orders\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl flex items-center gap-2\">\n            <ShoppingCart className=\"w-6 h-6 text-primary\" />\n            QR Menu Orders\n          </DialogTitle>\n          <DialogDescription>\n            Review and manage online orders from customers\n          </DialogDescription>\n        </DialogHeader>\n\n        <ScrollArea className=\"h-[500px] pr-4\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <p className=\"text-muted-foreground\">Loading orders...</p>\n            </div>\n          ) : qrOrders.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center h-32 gap-2\">\n              <ShoppingCart className=\"w-12 h-12 text-muted-foreground/50\" />\n              <p className=\"text-muted-foreground\">No pending QR orders</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {qrOrders.map((order) => (\n                <Card key={order.id} className=\"hover-elevate\" data-testid={`qr-order-${order.id}`}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-1\">\n                        <CardTitle className=\"text-lg flex items-center gap-2\">\n                          Order #{order.orderNumber}\n                          <Badge variant=\"secondary\" className=\"font-normal\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            {new Date(order.createdAt).toLocaleTimeString()}\n                          </Badge>\n                        </CardTitle>\n                        {order.customerName && (\n                          <p className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                            <User className=\"w-3 h-3\" />\n                            {order.customerName}\n                            {order.customerPhone && ` • ${order.customerPhone}`}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"default\"\n                          onClick={() => handleAcceptOrder(order.id)}\n                          disabled={acceptOrderMutation.isPending}\n                          data-testid={`button-accept-${order.id}`}\n                        >\n                          <CheckCircle className=\"w-4 h-4 mr-1\" />\n                          Accept\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => handleRejectOrder(order.id)}\n                          disabled={rejectOrderMutation.isPending}\n                          data-testid={`button-reject-${order.id}`}\n                        >\n                          <XCircle className=\"w-4 h-4 mr-1\" />\n                          Reject\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"space-y-2\">\n                      {order.items?.map((item: QROrderItem, index: number) => (\n                        <div\n                          key={index}\n                          className=\"flex justify-between items-center py-2 border-b border-border/50 last:border-0\"\n                          data-testid={`order-item-${index}`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <Badge variant=\"outline\" className=\"font-mono\">\n                              {item.quantity}x\n                            </Badge>\n                            <span className=\"font-medium\">{item.productName}</span>\n                          </div>\n                          <span className=\"font-semibold\">${item.price}</span>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"flex justify-between items-center pt-2 border-t\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {order.diningOption === \"dine-in\" ? \"Dine In\" : order.diningOption === \"takeaway\" ? \"Takeaway\" : \"Delivery\"}\n                        {order.tableId && ` • Table ${order.tableId}`}\n                      </span>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm text-muted-foreground\">Total Amount</p>\n                        <p className=\"text-xl font-bold text-primary\" data-testid={`order-total-${order.id}`}>\n                          ${order.total}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7827},"client/src/components/table-order-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Table as TableIcon, CheckCircle, XCircle, Wrench, Edit, Trash2 } from \"lucide-react\";\nimport type { Table } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport { TableEditModal } from \"./table-edit-modal\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface TableOrderModalProps {\n  open: boolean;\n  onClose: () => void;\n  tables: Table[];\n}\n\nexport function TableOrderModal({\n  open,\n  onClose,\n  tables,\n}: TableOrderModalProps) {\n  const { toast } = useToast();\n  const [editingTable, setEditingTable] = useState<Table | null>(null);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [tableToDelete, setTableToDelete] = useState<Table | null>(null);\n  const [selectedTables, setSelectedTables] = useState<Set<string>>(new Set());\n  const [bulkDeleteConfirmOpen, setBulkDeleteConfirmOpen] = useState(false);\n\n  const availableTables = tables.filter((t) => t.status === \"available\");\n  const occupiedTables = tables.filter((t) => t.status === \"occupied\" || t.status === \"booked\");\n  const maintenanceTables = tables.filter((t) => t.status === \"maintenance\");\n\n  const toggleTableSelection = (tableId: string) => {\n    setSelectedTables(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(tableId)) {\n        newSet.delete(tableId);\n      } else {\n        newSet.add(tableId);\n      }\n      return newSet;\n    });\n  };\n\n  const selectAll = () => {\n    setSelectedTables(new Set(tables.map(t => t.id)));\n  };\n\n  const clearSelection = () => {\n    setSelectedTables(new Set());\n  };\n\n  const deleteMutation = useMutation({\n    mutationFn: async (tableId: string) => {\n      return await apiRequest(\"DELETE\", `/api/tables/${tableId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      toast({\n        title: \"Success\",\n        description: \"Table deleted successfully\",\n      });\n      setDeleteConfirmOpen(false);\n      setTableToDelete(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete table\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkDeleteMutation = useMutation({\n    mutationFn: async (tableIds: string[]) => {\n      const results = await Promise.allSettled(\n        tableIds.map(id => apiRequest(\"DELETE\", `/api/tables/${id}`))\n      );\n      \n      const failed = results.filter(r => r.status === 'rejected').length;\n      if (failed > 0) {\n        throw new Error(`Failed to delete ${failed} table(s)`);\n      }\n      \n      return results;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      toast({\n        title: \"Success\",\n        description: `${selectedTables.size} table(s) deleted successfully`,\n      });\n      setBulkDeleteConfirmOpen(false);\n      setSelectedTables(new Set());\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete selected tables\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (table: Table) => {\n    setTableToDelete(table);\n    setDeleteConfirmOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (tableToDelete) {\n      deleteMutation.mutate(tableToDelete.id);\n    }\n  };\n\n  const handleBulkDelete = () => {\n    setBulkDeleteConfirmOpen(true);\n  };\n\n  const confirmBulkDelete = () => {\n    const tableIds = Array.from(selectedTables);\n    bulkDeleteMutation.mutate(tableIds);\n  };\n\n  const TableCard = ({ table, statusColor }: { table: Table; statusColor: string }) => {\n    const isSelected = selectedTables.has(table.id);\n    \n    return (\n      <Card className=\"p-4\" data-testid={`card-table-${table.id}`}>\n        <div className=\"flex items-start justify-between gap-4\">\n          <div className=\"flex items-start gap-3 flex-1\">\n            <Checkbox\n              checked={isSelected}\n              onCheckedChange={() => toggleTableSelection(table.id)}\n              data-testid={`checkbox-table-${table.id}`}\n              className=\"mt-1\"\n            />\n            <div className={`w-10 h-10 rounded-lg ${statusColor} flex items-center justify-center`}>\n              <TableIcon className=\"w-5 h-5 text-white\" />\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"font-semibold\">Table {table.tableNumber}</h4>\n              {table.capacity && (\n                <p className=\"text-sm text-muted-foreground\">\n                  Capacity: {table.capacity} people\n                </p>\n              )}\n              {table.description && (\n                <p className=\"text-sm text-muted-foreground mt-1\">{table.description}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge \n              variant=\"secondary\" \n              className=\"capitalize\"\n              data-testid={`badge-status-${table.id}`}\n            >\n              {table.status}\n            </Badge>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => setEditingTable(table)}\n              data-testid={`button-edit-table-${table.id}`}\n              title=\"Edit Table\"\n            >\n              <Edit className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => handleDelete(table)}\n              data-testid={`button-delete-table-${table.id}`}\n              title=\"Delete Table\"\n            >\n              <Trash2 className=\"w-4 h-4 text-destructive\" />\n            </Button>\n          </div>\n        </div>\n      </Card>\n    );\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-3xl\" data-testid=\"modal-table-order\">\n        <DialogHeader>\n          <DialogTitle>Table Orders</DialogTitle>\n          <DialogDescription>\n            Manage table status and assignments - Total Tables: {tables.length}\n            {selectedTables.size > 0 && ` | Selected: ${selectedTables.size}`}\n          </DialogDescription>\n        </DialogHeader>\n        \n        {tables.length > 0 && (\n          <div className=\"flex gap-2 pb-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={selectAll}\n              disabled={selectedTables.size === tables.length}\n              data-testid=\"button-select-all\"\n            >\n              Select All\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={clearSelection}\n              disabled={selectedTables.size === 0}\n              data-testid=\"button-clear-selection\"\n            >\n              Clear Selection\n            </Button>\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={handleBulkDelete}\n              disabled={selectedTables.size === 0}\n              data-testid=\"button-delete-selected\"\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Delete Selected ({selectedTables.size})\n            </Button>\n          </div>\n        )}\n\n        <ScrollArea className=\"max-h-[600px] pr-4\">\n          <div className=\"space-y-6\">\n            {/* Available Tables */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                <h3 className=\"font-semibold text-lg\">\n                  Available ({availableTables.length})\n                </h3>\n              </div>\n              {availableTables.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground py-4 text-center bg-muted/50 rounded-lg\">\n                  No available tables\n                </p>\n              ) : (\n                <div className=\"grid gap-3\">\n                  {availableTables.map((table) => (\n                    <TableCard \n                      key={table.id} \n                      table={table} \n                      statusColor=\"bg-green-600\" \n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Booked/Occupied Tables */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <XCircle className=\"w-5 h-5 text-red-600\" />\n                <h3 className=\"font-semibold text-lg\">\n                  Booked/Occupied ({occupiedTables.length})\n                </h3>\n              </div>\n              {occupiedTables.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground py-4 text-center bg-muted/50 rounded-lg\">\n                  No booked or occupied tables\n                </p>\n              ) : (\n                <div className=\"grid gap-3\">\n                  {occupiedTables.map((table) => (\n                    <TableCard \n                      key={table.id} \n                      table={table} \n                      statusColor=\"bg-red-600\" \n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Maintenance Tables */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Wrench className=\"w-5 h-5 text-orange-600\" />\n                <h3 className=\"font-semibold text-lg\">\n                  Maintenance ({maintenanceTables.length})\n                </h3>\n              </div>\n              {maintenanceTables.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground py-4 text-center bg-muted/50 rounded-lg\">\n                  No tables under maintenance\n                </p>\n              ) : (\n                <div className=\"grid gap-3\">\n                  {maintenanceTables.map((table) => (\n                    <TableCard \n                      key={table.id} \n                      table={table} \n                      statusColor=\"bg-orange-600\" \n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </ScrollArea>\n      </DialogContent>\n\n      <TableEditModal\n        open={!!editingTable}\n        onClose={() => setEditingTable(null)}\n        table={editingTable}\n      />\n\n      <AlertDialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>\n        <AlertDialogContent data-testid=\"dialog-delete-confirm\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Table</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete Table {tableToDelete?.tableNumber}? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <AlertDialog open={bulkDeleteConfirmOpen} onOpenChange={setBulkDeleteConfirmOpen}>\n        <AlertDialogContent data-testid=\"dialog-bulk-delete-confirm\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Selected Tables</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete {selectedTables.size} selected table(s)? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-bulk-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmBulkDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-bulk-delete\"\n            >\n              Delete All\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </Dialog>\n  );\n}\n","size_bytes":12921},"client/src/components/table-edit-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTableSchema, type Table } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\n\ninterface TableEditModalProps {\n  open: boolean;\n  onClose: () => void;\n  table: Table | null;\n}\n\nexport function TableEditModal({ open, onClose, table }: TableEditModalProps) {\n  const { toast } = useToast();\n\n  const tableForm = useForm<z.infer<typeof insertTableSchema>>({\n    resolver: zodResolver(insertTableSchema),\n    defaultValues: {\n      tableNumber: \"\",\n      capacity: \"\",\n      description: \"\",\n      status: \"available\",\n    },\n  });\n\n  useEffect(() => {\n    if (table) {\n      tableForm.reset({\n        tableNumber: table.tableNumber,\n        capacity: table.capacity || \"\",\n        description: table.description || \"\",\n        status: table.status,\n      });\n    }\n  }, [table, tableForm]);\n\n  const updateTableMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof insertTableSchema>) => {\n      if (!table) return;\n      return await apiRequest(\"PATCH\", `/api/tables/${table.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      toast({\n        title: \"Success\",\n        description: \"Table updated successfully\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update table\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: z.infer<typeof insertTableSchema>) => {\n    updateTableMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"dialog-edit-table\">\n        <DialogHeader>\n          <DialogTitle>Edit Table</DialogTitle>\n          <DialogDescription>\n            Update table information\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...tableForm}>\n          <form onSubmit={tableForm.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={tableForm.control}\n              name=\"tableNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Table Number/Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"e.g., 1, A1, VIP-1\" data-testid=\"input-table-number\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={tableForm.control}\n              name=\"capacity\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Capacity (optional)</FormLabel>\n                  <FormControl>\n                    <Input {...field} value={field.value || \"\"} placeholder=\"e.g., 4, 6, 8\" data-testid=\"input-capacity\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={tableForm.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      value={field.value || \"\"}\n                      placeholder=\"e.g., Window seat, Outdoor patio, Private room\" \n                      data-testid=\"input-description\"\n                      rows={3}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={tableForm.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value} data-testid=\"select-status\">\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"available\">Available</SelectItem>\n                      <SelectItem value=\"occupied\">Occupied</SelectItem>\n                      <SelectItem value=\"booked\">Booked</SelectItem>\n                      <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateTableMutation.isPending} data-testid=\"button-submit\">\n                Update Table\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5894}},"version":1}